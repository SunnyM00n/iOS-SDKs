// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -user-module-version 1934 -module-name EventKit
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
@_exported import EventKit
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
extension EventKit.EKEventStore {
  @available(iOS 26, macOS 26, watchOS 26, visionOS 26, *)
  public struct EventStoreChanged : Foundation.NotificationCenter.MainActorMessage {
    public static var name: Foundation.Notification.Name {
      get
    }
    public typealias Subject = EventKit.EKEventStore
    public init()
    #if compiler(>=5.3) && $NonescapableTypes
    @_Concurrency.MainActor public static func makeMessage(_ notification: Foundation.Notification) -> EventKit.EKEventStore.EventStoreChanged?
    #endif
    @_Concurrency.MainActor public static func makeNotification(_ message: EventKit.EKEventStore.EventStoreChanged) -> Foundation.Notification
  }
}
@available(iOS 26, macOS 26, watchOS 26, visionOS 26, *)
extension Foundation.NotificationCenter.MessageIdentifier where Self == Foundation.NotificationCenter.BaseMessageIdentifier<EventKit.EKEventStore.EventStoreChanged> {
  public static var changed: Foundation.NotificationCenter.BaseMessageIdentifier<EventKit.EKEventStore.EventStoreChanged> {
    get
  }
}
