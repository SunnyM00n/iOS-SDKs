// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -user-module-version 818 -module-name DataDetection
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
@_exported import DataDetection
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 26.0, macOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public enum DataDetector {
  public struct MatchType : Swift.OptionSet, Swift.Sendable {
    public let rawValue: Swift.UInt64
    public init(rawValue: Swift.UInt64)
    public static let link: DataDetection.DataDetector.MatchType
    public static let emailAddress: DataDetection.DataDetector.MatchType
    public static let phoneNumber: DataDetection.DataDetector.MatchType
    public static let postalAddress: DataDetection.DataDetector.MatchType
    public static let calendarEvent: DataDetection.DataDetector.MatchType
    public static let moneyAmount: DataDetection.DataDetector.MatchType
    public static let measurement: DataDetection.DataDetector.MatchType
    public static let flightNumber: DataDetection.DataDetector.MatchType
    public static let shipmentTrackingNumber: DataDetection.DataDetector.MatchType
    public static let paymentIdentifier: DataDetection.DataDetector.MatchType
    public static let all: DataDetection.DataDetector.MatchType
    @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias ArrayLiteralElement = DataDetection.DataDetector.MatchType
    @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias Element = DataDetection.DataDetector.MatchType
    @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias RawValue = Swift.UInt64
  }
  public struct Options : Swift.Sendable {
    public init()
    public var documentDate: Foundation.Date?
    public var documentTimeZone: Foundation.TimeZone?
    public var documentLanguageCode: Foundation.Locale.LanguageCode?
    public var documentRegion: Foundation.Locale.Region?
  }
  public struct Match : Swift.Sendable {
    public enum HighlightStyle : Swift.Sendable {
      case hidden
      case url
      case regular
      public static func == (a: DataDetection.DataDetector.Match.HighlightStyle, b: DataDetection.DataDetector.Match.HighlightStyle) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum SemanticDetails : Swift.Sendable {
      public struct Link : Swift.Sendable {
        public let url: Foundation.URL
      }
      case link(DataDetection.DataDetector.Match.SemanticDetails.Link)
      public struct EmailAddress : Swift.Sendable {
        public let emailAddress: Swift.String
        public let label: Swift.String?
      }
      case emailAddress(DataDetection.DataDetector.Match.SemanticDetails.EmailAddress)
      public struct PhoneNumber : Swift.Sendable {
        public let phoneNumber: Swift.String
        public let label: Swift.String?
      }
      case phoneNumber(DataDetection.DataDetector.Match.SemanticDetails.PhoneNumber)
      public struct PostalAddress : Swift.Sendable {
        public let fullAddress: Swift.String
        public let street: Swift.String?
        public let city: Swift.String?
        public let state: Swift.String?
        public let postalCode: Swift.String?
        public let region: Swift.String?
        public let regionCode: Foundation.Locale.Region?
        public let label: Swift.String?
      }
      case postalAddress(DataDetection.DataDetector.Match.SemanticDetails.PostalAddress)
      public struct CalendarEvent : Swift.Sendable {
        public let allDay: Swift.Bool
        public let startDate: Foundation.Date?
        public let startTimeZone: Foundation.TimeZone?
        public let endDate: Foundation.Date?
        public let endTimeZone: Foundation.TimeZone?
      }
      case calendarEvent(DataDetection.DataDetector.Match.SemanticDetails.CalendarEvent)
      public struct MoneyAmount : Swift.Sendable {
        public let currency: Foundation.Locale.Currency
        public let amount: Foundation.Decimal
      }
      case moneyAmount(DataDetection.DataDetector.Match.SemanticDetails.MoneyAmount)
      public struct FlightNumber : Swift.Sendable {
        public let airlineCode: Swift.String
        public let flightNumber: Swift.Int
      }
      case flightNumber(DataDetection.DataDetector.Match.SemanticDetails.FlightNumber)
      public struct ShipmentTrackingNumber : Swift.Sendable {
        public let carrier: Swift.String
        public let trackingNumber: Swift.String
        public let trackingURL: Foundation.URL?
      }
      case shipmentTrackingNumber(DataDetection.DataDetector.Match.SemanticDetails.ShipmentTrackingNumber)
      public struct Measurement : Swift.Sendable {
        public let value: Swift.Double
        public let possibleDimensions: [Foundation.Dimension]
        public func measurement<D>(in dimension: D) -> Foundation.Measurement<D> where D : Foundation.Dimension
      }
      case measurement(DataDetection.DataDetector.Match.SemanticDetails.Measurement)
      public struct PaymentIdentifier : Swift.Sendable {
        public enum PaymentSystem : Swift.Sendable {
          case unifiedPaymentsInterface
          public static func == (a: DataDetection.DataDetector.Match.SemanticDetails.PaymentIdentifier.PaymentSystem, b: DataDetection.DataDetector.Match.SemanticDetails.PaymentIdentifier.PaymentSystem) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public let identifier: Swift.String
        public let type: DataDetection.DataDetector.Match.SemanticDetails.PaymentIdentifier.PaymentSystem
      }
      case paymentIdentifier(DataDetection.DataDetector.Match.SemanticDetails.PaymentIdentifier)
    }
    public let range: Swift.Range<Swift.String.Index>?
    public let preferredHighlightStyle: DataDetection.DataDetector.Match.HighlightStyle
    public let details: DataDetection.DataDetector.Match.SemanticDetails
  }
}
extension Swift.StringProtocol {
  @available(iOS 26.0, macOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
  public func dataDetectorMatches(_ types: DataDetection.DataDetector.MatchType = .all, options: DataDetection.DataDetector.Options = DataDetector.Options()) -> some _Concurrency.AsyncSequence<DataDetection.DataDetector.Match, Swift.Never>
  
}
@available(iOS 26.0, macOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension DataDetection.DataDetector.Match.HighlightStyle : Swift.Equatable {}
@available(iOS 26.0, macOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension DataDetection.DataDetector.Match.HighlightStyle : Swift.Hashable {}
@available(iOS 26.0, macOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension DataDetection.DataDetector.Match.SemanticDetails.PaymentIdentifier.PaymentSystem : Swift.Equatable {}
@available(iOS 26.0, macOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension DataDetection.DataDetector.Match.SemanticDetails.PaymentIdentifier.PaymentSystem : Swift.Hashable {}
