// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -user-module-version 13091.1.14 -module-name TelephonyMessagingKit
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import CoreGraphics
import CoreLocation
import Foundation
import Swift
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct CellularServiceState : Swift.Identifiable, Swift.Codable, Swift.Hashable, Swift.Sendable {
  public let id: TelephonyMessagingKit.CellularServiceID
  public let label: Swift.String
  public static func == (a: TelephonyMessagingKit.CellularServiceState, b: TelephonyMessagingKit.CellularServiceState) -> Swift.Bool
  @available(iOS 26.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias ID = TelephonyMessagingKit.CellularServiceID
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService {
  public struct RemoteCapabilitiesRequest : Swift.Sendable {
    public enum CachePolicy : Swift.Codable, Swift.Sendable, Swift.Equatable {
      case cacheOnly
      case cacheOrRemote
      public static func == (a: TelephonyMessagingKit.RCSService.RemoteCapabilitiesRequest.CachePolicy, b: TelephonyMessagingKit.RCSService.RemoteCapabilitiesRequest.CachePolicy) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public var cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public var handle: TelephonyMessagingKit.RCSHandle
    public var cachePolicy: TelephonyMessagingKit.RCSService.RemoteCapabilitiesRequest.CachePolicy
    public init(cellularServiceID: TelephonyMessagingKit.CellularServiceID, handle: TelephonyMessagingKit.RCSHandle, cachePolicy: TelephonyMessagingKit.RCSService.RemoteCapabilitiesRequest.CachePolicy = .cacheOnly)
  }
  public struct RemoteCapabilities : Swift.Codable, Swift.Sendable, Swift.Equatable {
    public enum Availability : Swift.Codable, Swift.Sendable {
      case available
      case unavailable
      public static func == (a: TelephonyMessagingKit.RCSService.RemoteCapabilities.Availability, b: TelephonyMessagingKit.RCSService.RemoteCapabilities.Availability) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public let alternativeHandles: [TelephonyMessagingKit.RCSHandle]
    public let supportsChat: Swift.Bool
    public let supportsFileTransfer: Swift.Bool
    public let supportsGeolocation: Swift.Bool
    public let isBusinessHandle: Swift.Bool
    public let validUntil: Foundation.Date?
    public let availability: TelephonyMessagingKit.RCSService.RemoteCapabilities.Availability?
    public static func == (a: TelephonyMessagingKit.RCSService.RemoteCapabilities, b: TelephonyMessagingKit.RCSService.RemoteCapabilities) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.RemoteCapabilitiesRequest.CachePolicy : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService {
  @available(iOS 26.0, *)
  public struct ReportSpamRequest : Swift.Sendable {
    @available(iOS 26.0, *)
    public enum Category : Swift.Codable, Swift.Equatable, Swift.Sendable {
      case invalid
      case spam
      case fraud
      case inappropriateContent
      case other
      public static func == (a: TelephonyMessagingKit.RCSService.ReportSpamRequest.Category, b: TelephonyMessagingKit.RCSService.ReportSpamRequest.Category) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public var message: TelephonyMessagingKit.RCSMessage
    public var fileContent: Foundation.Data?
    public var category: TelephonyMessagingKit.RCSService.ReportSpamRequest.Category?
    public var reason: Swift.String?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(message: TelephonyMessagingKit.RCSMessage, fileContent: Foundation.Data? = nil, category: TelephonyMessagingKit.RCSService.ReportSpamRequest.Category? = nil, reason: Swift.String? = nil)
    #endif
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public enum RCSHandle : Swift.Hashable, Swift.Codable, Swift.Sendable, Swift.CustomStringConvertible {
  case uri(TelephonyMessagingKit.RCSHandle.URI)
  case group(TelephonyMessagingKit.RCSHandle.Group)
  #if compiler(>=5.3) && $NonescapableTypes
  public static func phoneNumber(_ phoneNumber: Swift.String) -> TelephonyMessagingKit.RCSHandle?
  #endif
  public var description: Swift.String {
    get
  }
  public static func == (a: TelephonyMessagingKit.RCSHandle, b: TelephonyMessagingKit.RCSHandle) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSHandle {
  public struct URI : Swift.ExpressibleByStringLiteral, Swift.RawRepresentable, Swift.Hashable, Swift.Codable, Swift.Sendable {
    public let rawValue: Swift.String
    public init(rawValue: Swift.String)
    public init(stringLiteral value: Swift.String)
    @available(iOS 26.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    @available(macOS, unavailable)
    public typealias ExtendedGraphemeClusterLiteralType = Swift.String
    @available(iOS 26.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    @available(macOS, unavailable)
    public typealias RawValue = Swift.String
    @available(iOS 26.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    @available(macOS, unavailable)
    public typealias StringLiteralType = Swift.String
    @available(iOS 26.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    @available(macOS, unavailable)
    public typealias UnicodeScalarLiteralType = Swift.String
  }
  public struct Group : Swift.Hashable, Swift.Codable, Swift.Sendable {
    public let focus: Swift.String
    public let conversationID: Swift.String
    public static func == (a: TelephonyMessagingKit.RCSHandle.Group, b: TelephonyMessagingKit.RCSHandle.Group) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business {
  public struct Menu : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public enum Content : Swift.Codable, Swift.Equatable, Swift.Sendable {
      case suggestion(TelephonyMessagingKit.RCSService.Business.Suggestion)
      case submenu(TelephonyMessagingKit.RCSService.Business.Menu)
      public static func == (a: TelephonyMessagingKit.RCSService.Business.Menu.Content, b: TelephonyMessagingKit.RCSService.Business.Menu.Content) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public let title: Swift.String?
    public let contents: [TelephonyMessagingKit.RCSService.Business.Menu.Content]
    public static func == (a: TelephonyMessagingKit.RCSService.Business.Menu, b: TelephonyMessagingKit.RCSService.Business.Menu) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct MMSHandle : Swift.Codable, Swift.Sendable {
  public init(phoneNumber: Swift.String)
  public var phoneNumber: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct MMSPartContent : Swift.Codable, Swift.Sendable {
  public var data: Foundation.Data
  public var disposition: TelephonyMessagingKit.MMSPartContent.MMSDispositionType
  public var filename: Swift.String
  public var contentID: Swift.String
  public var contentType: UniformTypeIdentifiers.UTType?
  public var customHeaders: [TelephonyMessagingKit.MMSPartContent.MMSCustomHeader]
  #if compiler(>=5.3) && $NonescapableTypes
  public init(data: Foundation.Data, contentType: UniformTypeIdentifiers.UTType?, contentID: Swift.String, disposition: TelephonyMessagingKit.MMSPartContent.MMSDispositionType, fileName: Swift.String)
  #endif
  public mutating func addCustomHeader(_ header: TelephonyMessagingKit.MMSPartContent.MMSCustomHeader)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.MMSPartContent {
  @available(iOS 26.0, *)
  public enum MMSDispositionType : Swift.Codable, Swift.Sendable {
    case attachment
    case inline
    public static func == (a: TelephonyMessagingKit.MMSPartContent.MMSDispositionType, b: TelephonyMessagingKit.MMSPartContent.MMSDispositionType) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  @available(iOS 26.0, *)
  public struct MMSCustomHeader : Swift.Codable, Swift.Sendable {
    public let key: Swift.String
    public let value: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct MMSContent : Swift.Codable, Swift.Sendable {
  public var parts: [TelephonyMessagingKit.MMSPartContent]
  public var recipients: [TelephonyMessagingKit.MMSHandle]
  public var subject: Swift.String?
  public var from: TelephonyMessagingKit.MMSHandle?
  public var headers: [Swift.String : Swift.String]
  public init()
  #if compiler(>=5.3) && $NonescapableTypes
  public init(parts: [TelephonyMessagingKit.MMSPartContent], recipients: [TelephonyMessagingKit.MMSHandle], subject: Swift.String? = nil)
  #endif
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct MMSMessageID : Swift.RawRepresentable, Swift.Codable, Swift.Sendable, Swift.Hashable, Swift.CustomStringConvertible {
  public init(rawValue: Swift.UInt32)
  public let rawValue: Swift.UInt32
  public var description: Swift.String {
    get
  }
  @available(iOS 26.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias RawValue = Swift.UInt32
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct MMSMessage : Swift.Equatable, Swift.Codable, Swift.Sendable, Swift.CustomStringConvertible {
  public var cellularServiceID: TelephonyMessagingKit.CellularServiceID
  public var messageID: TelephonyMessagingKit.MMSMessageID
  public var content: TelephonyMessagingKit.MMSContent
  public init(cellularServiceID: TelephonyMessagingKit.CellularServiceID, messageID: TelephonyMessagingKit.MMSMessageID, content: TelephonyMessagingKit.MMSContent)
  public var description: Swift.String {
    get
  }
  public static func == (lhs: TelephonyMessagingKit.MMSMessage, rhs: TelephonyMessagingKit.MMSMessage) -> Swift.Bool
  public var totalSize: Foundation.Measurement<Foundation.UnitInformationStorage> {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.MMSService {
  public struct Configuration : Swift.Codable, Swift.Sendable {
    public var maximumMessageSize: Foundation.Measurement<Foundation.UnitInformationStorage>?
    public var maximumRecipients: Swift.Int?
    public var maximumSubjectSize: Foundation.Measurement<Foundation.UnitInformationStorage>?
    public var maximumImageSize: Foundation.Measurement<Foundation.UnitInformationStorage>?
    public var smsSizeToBeSentAsMMSInstead: Foundation.Measurement<Foundation.UnitInformationStorage>?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService {
  public struct Business : Swift.Codable, Swift.Sendable {
    public let communicationAddress: TelephonyMessagingKit.RCSService.Business.CommunicationAddress?
    public let mediaEntries: [TelephonyMessagingKit.RCSService.Business.MediaEntry]
    public let organizationNames: [TelephonyMessagingKit.RCSService.Business.OrganizationName]
    public let description: Swift.String?
    public let categoryNames: [Swift.String]
    public let version: Swift.String?
    public let providerName: Swift.String?
    public let emailAddress: Swift.String?
    public let backgroundImageURL: Foundation.URL?
    public let websiteURL: Foundation.URL?
    public let termsAndConditionsURL: Foundation.URL?
    public let addressEntries: [TelephonyMessagingKit.RCSService.Business.AddressEntry]
    public let persistentMenu: TelephonyMessagingKit.RCSService.Business.Menu?
    public let styleSheetTemplateURL: Foundation.URL?
    public let verificationDetails: TelephonyMessagingKit.RCSService.Business.VerificationDetails?
    #if compiler(>=5.3) && $NonescapableTypes
    public var themeColor: CoreGraphics.CGColor? {
      get
    }
    #endif
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business {
  public struct TelephoneDetails : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let label: Swift.String
    public let phoneNumber: Swift.String
    public let phoneNumberType: Swift.String
    public static func == (a: TelephonyMessagingKit.RCSService.Business.TelephoneDetails, b: TelephonyMessagingKit.RCSService.Business.TelephoneDetails) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct URIEntry : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public enum URIType : Swift.Codable, Swift.Equatable, Swift.Sendable {
      case sip
      case other
      public static func == (a: TelephonyMessagingKit.RCSService.Business.URIEntry.URIType, b: TelephonyMessagingKit.RCSService.Business.URIEntry.URIType) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public enum Label : Swift.Codable, Swift.Equatable, Swift.Sendable {
      case serviceID
      case sms
      public static func == (a: TelephonyMessagingKit.RCSService.Business.URIEntry.Label, b: TelephonyMessagingKit.RCSService.Business.URIEntry.Label) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public let uri: Foundation.URL
    public let type: TelephonyMessagingKit.RCSService.Business.URIEntry.URIType
    public let label: TelephonyMessagingKit.RCSService.Business.URIEntry.Label
    public static func == (a: TelephonyMessagingKit.RCSService.Business.URIEntry, b: TelephonyMessagingKit.RCSService.Business.URIEntry) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CommunicationAddress : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let telephoneDetails: TelephonyMessagingKit.RCSService.Business.TelephoneDetails
    public let uriEntries: [TelephonyMessagingKit.RCSService.Business.URIEntry]
    public static func == (a: TelephonyMessagingKit.RCSService.Business.CommunicationAddress, b: TelephonyMessagingKit.RCSService.Business.CommunicationAddress) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Media : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let url: Foundation.URL
    public let sha256Digest: Swift.String?
    public static func == (a: TelephonyMessagingKit.RCSService.Business.Media, b: TelephonyMessagingKit.RCSService.Business.Media) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct MediaEntry : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public enum Label : Swift.Codable, Swift.Equatable, Swift.Sendable {
      case icon
      public static func == (a: TelephonyMessagingKit.RCSService.Business.MediaEntry.Label, b: TelephonyMessagingKit.RCSService.Business.MediaEntry.Label) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public enum ContentType : Swift.Codable, Swift.Equatable, Swift.Sendable {
      case logo
      case other
      public static func == (a: TelephonyMessagingKit.RCSService.Business.MediaEntry.ContentType, b: TelephonyMessagingKit.RCSService.Business.MediaEntry.ContentType) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public let label: TelephonyMessagingKit.RCSService.Business.MediaEntry.Label
    public let media: TelephonyMessagingKit.RCSService.Business.Media
    public let contentType: TelephonyMessagingKit.RCSService.Business.MediaEntry.ContentType
    public static func == (a: TelephonyMessagingKit.RCSService.Business.MediaEntry, b: TelephonyMessagingKit.RCSService.Business.MediaEntry) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct OrganizationName : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public enum NameType : Swift.Codable, Swift.Equatable, Swift.Sendable {
      case officialName
      public static func == (a: TelephonyMessagingKit.RCSService.Business.OrganizationName.NameType, b: TelephonyMessagingKit.RCSService.Business.OrganizationName.NameType) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public let displayName: Swift.String
    public let nameType: TelephonyMessagingKit.RCSService.Business.OrganizationName.NameType
    public static func == (a: TelephonyMessagingKit.RCSService.Business.OrganizationName, b: TelephonyMessagingKit.RCSService.Business.OrganizationName) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct AddressEntry : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let address: Swift.String
    public let label: Swift.String
    public static func == (a: TelephonyMessagingKit.RCSService.Business.AddressEntry, b: TelephonyMessagingKit.RCSService.Business.AddressEntry) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct VerificationDetails : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let isVerified: Swift.Bool
    public let verifiedBy: Swift.String?
    public let expirationDate: Foundation.Date?
    public static func == (a: TelephonyMessagingKit.RCSService.Business.VerificationDetails, b: TelephonyMessagingKit.RCSService.Business.VerificationDetails) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct RCSMessageID : Swift.RawRepresentable, Swift.Codable, Swift.Sendable, Swift.Hashable, Swift.CustomStringConvertible {
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public var description: Swift.String {
    get
  }
  @available(iOS 26.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias RawValue = Swift.String
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct RCSMessage : Swift.Identifiable, Swift.Equatable, Swift.Codable, Swift.Sendable {
  public let id: TelephonyMessagingKit.RCSMessageID
  public let cellularServiceID: TelephonyMessagingKit.CellularServiceID
  public let content: TelephonyMessagingKit.RCSMessage.Content
  public let handle: TelephonyMessagingKit.RCSHandle
  public static func == (a: TelephonyMessagingKit.RCSMessage, b: TelephonyMessagingKit.RCSMessage) -> Swift.Bool
  @available(iOS 26.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias ID = TelephonyMessagingKit.RCSMessageID
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSMessage {
  public enum Content : Swift.Equatable, Swift.Codable, Swift.Sendable {
    case text(TelephonyMessagingKit.RCSMessage.Text)
    case fileTransfer(TelephonyMessagingKit.RCSMessage.FileTransfer)
    case geolocationPush(TelephonyMessagingKit.RCSMessage.GeolocationPush)
    case dispositionNotification(TelephonyMessagingKit.RCSMessage.DispositionNotification)
    case composingIndicator(TelephonyMessagingKit.RCSMessage.ComposingIndicator)
    case businessCard(TelephonyMessagingKit.RCSService.Business.Card)
    case businessCardCarousel(TelephonyMessagingKit.RCSService.Business.CardCarousel)
    public static func == (a: TelephonyMessagingKit.RCSMessage.Content, b: TelephonyMessagingKit.RCSMessage.Content) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSMessage {
  public struct Text : Swift.ExpressibleByStringLiteral, Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let body: Swift.String
    public init(body: Swift.String)
    public init(stringLiteral value: Swift.String)
    public static func == (a: TelephonyMessagingKit.RCSMessage.Text, b: TelephonyMessagingKit.RCSMessage.Text) -> Swift.Bool
    @available(iOS 26.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    @available(macOS, unavailable)
    public typealias ExtendedGraphemeClusterLiteralType = Swift.String
    @available(iOS 26.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    @available(macOS, unavailable)
    public typealias StringLiteralType = Swift.String
    @available(iOS 26.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    @available(macOS, unavailable)
    public typealias UnicodeScalarLiteralType = Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct FileTransfer : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let fileMetadata: TelephonyMessagingKit.RCSFileTransferMetadata
    public let thumbnailMetadata: TelephonyMessagingKit.RCSFileTransferMetadata?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(fileMetadata: TelephonyMessagingKit.RCSFileTransferMetadata, thumbnailMetadata: TelephonyMessagingKit.RCSFileTransferMetadata? = nil)
    #endif
    public static func == (a: TelephonyMessagingKit.RCSMessage.FileTransfer, b: TelephonyMessagingKit.RCSMessage.FileTransfer) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct GeolocationPush : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let latitude: Swift.Double
    public let longitude: Swift.Double
    public let description: Swift.String?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(latitude: Swift.Double, longitude: Swift.Double, description: Swift.String? = nil)
    #endif
    public static func == (a: TelephonyMessagingKit.RCSMessage.GeolocationPush, b: TelephonyMessagingKit.RCSMessage.GeolocationPush) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct DispositionNotification : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public let disposition: TelephonyMessagingKit.RCSMessage.Disposition
    public let disposedMessageID: TelephonyMessagingKit.RCSMessageID
    public init(disposition: TelephonyMessagingKit.RCSMessage.Disposition, disposedMessageID: TelephonyMessagingKit.RCSMessageID)
    public static func == (a: TelephonyMessagingKit.RCSMessage.DispositionNotification, b: TelephonyMessagingKit.RCSMessage.DispositionNotification) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ComposingIndicator : Swift.Equatable, Swift.Codable, Swift.Sendable {
    public enum State : Swift.Equatable, Swift.Codable, Swift.Sendable {
      case idle
      case active
      public static func == (a: TelephonyMessagingKit.RCSMessage.ComposingIndicator.State, b: TelephonyMessagingKit.RCSMessage.ComposingIndicator.State) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public let state: TelephonyMessagingKit.RCSMessage.ComposingIndicator.State
    public let lastActive: Foundation.Date?
    public let contentType: UniformTypeIdentifiers.UTType?
    public let refreshInterval: Swift.Duration?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(state: TelephonyMessagingKit.RCSMessage.ComposingIndicator.State, lastActive: Foundation.Date? = nil, contentType: UniformTypeIdentifiers.UTType? = nil, refreshInterval: Swift.Duration? = nil)
    #endif
    public static func == (a: TelephonyMessagingKit.RCSMessage.ComposingIndicator, b: TelephonyMessagingKit.RCSMessage.ComposingIndicator) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct RCSFileTransferMetadata : Swift.Equatable, Swift.Codable, Swift.Sendable {
  public enum Disposition : Swift.Equatable, Swift.Codable, Swift.Sendable {
    case attachment
    case render
    public static func == (a: TelephonyMessagingKit.RCSFileTransferMetadata.Disposition, b: TelephonyMessagingKit.RCSFileTransferMetadata.Disposition) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public let url: Foundation.URL
  public let fileName: Swift.String?
  public let fileSize: Swift.Int
  public let contentType: UniformTypeIdentifiers.UTType?
  public let expirationDate: Foundation.Date
  public var disposition: TelephonyMessagingKit.RCSFileTransferMetadata.Disposition?
  public var playbackLength: Swift.Duration?
  public static func == (a: TelephonyMessagingKit.RCSFileTransferMetadata, b: TelephonyMessagingKit.RCSFileTransferMetadata) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
final public class MMSService : Swift.Sendable {
  public enum Error : Foundation.LocalizedError, Swift.Codable, Swift.Sendable {
    case unknown
    case notSupported
    case invalidRecipient
    case invalidMessageParts
    case internalError
    case mmsNotReady
    case mmsNotConfiguredForCarrier
    case maximumSizeExceeded
    public static func == (a: TelephonyMessagingKit.MMSService.Error, b: TelephonyMessagingKit.MMSService.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct IncomingMessageNotification : Swift.Equatable, Swift.Sendable {
    public let cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public let messageID: TelephonyMessagingKit.MMSMessageID
    public static func == (a: TelephonyMessagingKit.MMSService.IncomingMessageNotification, b: TelephonyMessagingKit.MMSService.IncomingMessageNotification) -> Swift.Bool
  }
  public struct ViabilityNotification : Swift.Equatable, Swift.Sendable {
    public let cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public let isViable: Swift.Bool
    public static func == (a: TelephonyMessagingKit.MMSService.ViabilityNotification, b: TelephonyMessagingKit.MMSService.ViabilityNotification) -> Swift.Bool
  }
  final public func sendMessage(_ message: TelephonyMessagingKit.MMSMessage) async throws
  final public func isViable(for cellularServiceID: TelephonyMessagingKit.CellularServiceID) -> Swift.Bool
  final public func receiveMessage(using cellularServiceID: TelephonyMessagingKit.CellularServiceID, messageID: TelephonyMessagingKit.MMSMessageID) async throws -> TelephonyMessagingKit.MMSMessage
  final public func reportSpam(_ message: TelephonyMessagingKit.MMSMessage) async throws
  final public func configuration(for cellularServiceID: TelephonyMessagingKit.CellularServiceID) async throws -> TelephonyMessagingKit.MMSService.Configuration
  final public var viabilityNotifications: some _Concurrency.AsyncSequence<TelephonyMessagingKit.MMSService.ViabilityNotification, Swift.Never> {
    get throws
  }
  final public var incomingMessageNotifications: some _Concurrency.AsyncSequence<TelephonyMessagingKit.MMSService.IncomingMessageNotification, Swift.Never> {
    get throws
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
final public class TelephonyMessagingSession : Swift.Identifiable, Swift.Sendable {
  public enum Error : Foundation.LocalizedError, Swift.Sendable {
    case serviceUnavailable
    case invalidSession
    case invalidArgument
    case internalError
    public static func == (a: TelephonyMessagingKit.TelephonyMessagingSession.Error, b: TelephonyMessagingKit.TelephonyMessagingSession.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let id: Foundation.UUID
  public static let shared: TelephonyMessagingKit.TelephonyMessagingSession
  final public var cellularServices: [TelephonyMessagingKit.CellularServiceState] {
    get throws
  }
  final public var cellularServiceStateUpdates: some _Concurrency.AsyncSequence<TelephonyMessagingKit.CellularServiceState, Swift.Never> {
    get
  }
  final public var smsService: TelephonyMessagingKit.SMSService {
    get
  }
  final public var mmsService: TelephonyMessagingKit.MMSService {
    get
  }
  final public var rcsService: TelephonyMessagingKit.RCSService {
    get
  }
  final public var isConfiguredForCarrierMessaging: Swift.Bool {
    get
  }
  @available(iOS 26.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias ID = Foundation.UUID
  @objc deinit
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.TelephonyMessagingSession.Error {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService {
  public struct FileDownloadRequest : Swift.Sendable {
    public var cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public var fileURL: Foundation.URL
    public var destinationFileURL: Foundation.URL
    public init(cellularServiceID: TelephonyMessagingKit.CellularServiceID, fileURL: Foundation.URL, destinationFileURL: Foundation.URL)
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.FileDownloadRequest {
  public struct Metadata : Swift.Sendable {
    public let suggestedFileName: Swift.String?
    public let contentType: UniformTypeIdentifiers.UTType?
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService {
  public struct SuggestionResponse : Swift.Sendable {
    public var cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public var destination: TelephonyMessagingKit.RCSHandle
    public var messageID: TelephonyMessagingKit.RCSMessageID
    public var originatingMessageID: TelephonyMessagingKit.RCSMessageID
    public var suggestion: TelephonyMessagingKit.RCSService.Business.Suggestion
    public init(cellularServiceID: TelephonyMessagingKit.CellularServiceID, destination: TelephonyMessagingKit.RCSHandle, messageID: TelephonyMessagingKit.RCSMessageID, originatingMessageID: TelephonyMessagingKit.RCSMessageID, suggestion: TelephonyMessagingKit.RCSService.Business.Suggestion)
  }
  public struct BusinessInformationRequest : Swift.Sendable {
    public enum CachePolicy : Swift.Codable, Swift.Sendable, Swift.Equatable {
      case cacheOnly
      case remoteOnly
      case cacheOrRemote
      public static func == (a: TelephonyMessagingKit.RCSService.BusinessInformationRequest.CachePolicy, b: TelephonyMessagingKit.RCSService.BusinessInformationRequest.CachePolicy) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public var cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public var handle: TelephonyMessagingKit.RCSHandle.URI
    public var cachePolicy: TelephonyMessagingKit.RCSService.BusinessInformationRequest.CachePolicy
    public init(cellularServiceID: TelephonyMessagingKit.CellularServiceID, handle: TelephonyMessagingKit.RCSHandle.URI, cachePolicy: TelephonyMessagingKit.RCSService.BusinessInformationRequest.CachePolicy = .cacheOrRemote)
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business {
  public struct SuggestedReply : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let displayText: Swift.String
    public static func == (a: TelephonyMessagingKit.RCSService.Business.SuggestedReply, b: TelephonyMessagingKit.RCSService.Business.SuggestedReply) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct OpenURLAction : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public enum Detent : Swift.Codable, Swift.Sendable {
      case large
      case medium
      case mediumLarge
      public static func == (a: TelephonyMessagingKit.RCSService.Business.OpenURLAction.Detent, b: TelephonyMessagingKit.RCSService.Business.OpenURLAction.Detent) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public enum Target : Swift.Codable, Swift.Equatable, Swift.Sendable {
      case defaultBrowser
      case inApp(detent: TelephonyMessagingKit.RCSService.Business.OpenURLAction.Detent)
      public static func == (a: TelephonyMessagingKit.RCSService.Business.OpenURLAction.Target, b: TelephonyMessagingKit.RCSService.Business.OpenURLAction.Target) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public let url: Foundation.URL
    public let target: TelephonyMessagingKit.RCSService.Business.OpenURLAction.Target
    public static func == (a: TelephonyMessagingKit.RCSService.Business.OpenURLAction, b: TelephonyMessagingKit.RCSService.Business.OpenURLAction) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct DialPhoneNumberAction : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let phoneNumber: Swift.String
    public let fallbackURL: Foundation.URL?
    public static func == (a: TelephonyMessagingKit.RCSService.Business.DialPhoneNumberAction, b: TelephonyMessagingKit.RCSService.Business.DialPhoneNumberAction) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ShowLocationAction : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public enum Method : Swift.Sendable {
      case coordinates(_LocationEssentials.CLLocationCoordinate2D)
      case query(Swift.String)
    }
    public let method: TelephonyMessagingKit.RCSService.Business.ShowLocationAction.Method
    public let label: Swift.String?
    public let fallbackURL: Foundation.URL?
    public static func == (a: TelephonyMessagingKit.RCSService.Business.ShowLocationAction, b: TelephonyMessagingKit.RCSService.Business.ShowLocationAction) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CreateCalendarEventAction : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let startTime: Foundation.Date
    public let endTime: Foundation.Date
    public let title: Swift.String
    public let description: Swift.String?
    public let fallbackURL: Foundation.URL?
    public static func == (a: TelephonyMessagingKit.RCSService.Business.CreateCalendarEventAction, b: TelephonyMessagingKit.RCSService.Business.CreateCalendarEventAction) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ComposeTextAction : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let phoneNumber: Swift.String
    public let text: Swift.String
    public static func == (a: TelephonyMessagingKit.RCSService.Business.ComposeTextAction, b: TelephonyMessagingKit.RCSService.Business.ComposeTextAction) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct ComposeRecordingAction : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public enum MediaType : Swift.Codable, Swift.Equatable, Swift.Sendable {
      case audio
      case video
      public static func == (a: TelephonyMessagingKit.RCSService.Business.ComposeRecordingAction.MediaType, b: TelephonyMessagingKit.RCSService.Business.ComposeRecordingAction.MediaType) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public let phoneNumber: Swift.String
    public let mediaType: TelephonyMessagingKit.RCSService.Business.ComposeRecordingAction.MediaType
    public static func == (a: TelephonyMessagingKit.RCSService.Business.ComposeRecordingAction, b: TelephonyMessagingKit.RCSService.Business.ComposeRecordingAction) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct SuggestedAction : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public enum Action : Swift.Codable, Swift.Equatable, Swift.Sendable {
      case openURL(TelephonyMessagingKit.RCSService.Business.OpenURLAction)
      case dialPhoneNumber(TelephonyMessagingKit.RCSService.Business.DialPhoneNumberAction)
      case showLocation(TelephonyMessagingKit.RCSService.Business.ShowLocationAction)
      case sendLocation
      case createCalendarEvent(TelephonyMessagingKit.RCSService.Business.CreateCalendarEventAction)
      case composeRecording(TelephonyMessagingKit.RCSService.Business.ComposeRecordingAction)
      case composeText(TelephonyMessagingKit.RCSService.Business.ComposeTextAction)
      case sendDeviceSpecifics
      case enableDisplayedNotifications
      public static func == (a: TelephonyMessagingKit.RCSService.Business.SuggestedAction.Action, b: TelephonyMessagingKit.RCSService.Business.SuggestedAction.Action) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public let displayText: Swift.String
    public let action: TelephonyMessagingKit.RCSService.Business.SuggestedAction.Action
    public static func == (a: TelephonyMessagingKit.RCSService.Business.SuggestedAction, b: TelephonyMessagingKit.RCSService.Business.SuggestedAction) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Card : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let orientation: TelephonyMessagingKit.RCSService.Business.Card.Orientation
    public let titleFontStyle: TelephonyMessagingKit.RCSService.Business.Card.FontStyle
    public let descriptionFontStyle: TelephonyMessagingKit.RCSService.Business.Card.FontStyle
    public let styleSheetURL: Foundation.URL?
    public let imageAlignment: TelephonyMessagingKit.RCSService.Business.Card.ImageAlignment?
    public let content: TelephonyMessagingKit.RCSService.Business.Card.Content
    public static func == (a: TelephonyMessagingKit.RCSService.Business.Card, b: TelephonyMessagingKit.RCSService.Business.Card) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct CardCarousel : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let width: TelephonyMessagingKit.RCSService.Business.Card.Width
    public let titleFontStyle: TelephonyMessagingKit.RCSService.Business.Card.FontStyle
    public let descriptionFontStyle: TelephonyMessagingKit.RCSService.Business.Card.FontStyle
    public let styleSheetURL: Foundation.URL?
    public let contents: [TelephonyMessagingKit.RCSService.Business.Card.Content]
    public static func == (a: TelephonyMessagingKit.RCSService.Business.CardCarousel, b: TelephonyMessagingKit.RCSService.Business.CardCarousel) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Suggestion : Swift.Codable, Swift.Equatable, Swift.Sendable {
    case reply(TelephonyMessagingKit.RCSService.Business.SuggestedReply)
    case action(TelephonyMessagingKit.RCSService.Business.SuggestedAction)
    public static func == (a: TelephonyMessagingKit.RCSService.Business.Suggestion, b: TelephonyMessagingKit.RCSService.Business.Suggestion) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business.Card {
  public enum Orientation : Swift.Codable, Swift.Equatable, Swift.Sendable {
    case vertical
    case horizontal
    public static func == (a: TelephonyMessagingKit.RCSService.Business.Card.Orientation, b: TelephonyMessagingKit.RCSService.Business.Card.Orientation) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct FontStyle : Swift.OptionSet, Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let italics: TelephonyMessagingKit.RCSService.Business.Card.FontStyle
    public static let bold: TelephonyMessagingKit.RCSService.Business.Card.FontStyle
    public static let underline: TelephonyMessagingKit.RCSService.Business.Card.FontStyle
    @available(iOS 26.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    @available(macOS, unavailable)
    public typealias ArrayLiteralElement = TelephonyMessagingKit.RCSService.Business.Card.FontStyle
    @available(iOS 26.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    @available(macOS, unavailable)
    public typealias Element = TelephonyMessagingKit.RCSService.Business.Card.FontStyle
    @available(iOS 26.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    @available(macOS, unavailable)
    public typealias RawValue = Swift.Int
  }
  public struct Media : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public enum Height : Swift.Codable, Swift.Equatable, Swift.Sendable {
      case short
      case medium
      case tall
      public static func == (a: TelephonyMessagingKit.RCSService.Business.Card.Media.Height, b: TelephonyMessagingKit.RCSService.Business.Card.Media.Height) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public let url: Foundation.URL
    public let contentType: UniformTypeIdentifiers.UTType?
    public let fileSize: Foundation.Measurement<Foundation.UnitInformationStorage>
    public let thumbnailURL: Foundation.URL?
    public let thumbnailContentType: UniformTypeIdentifiers.UTType?
    public let thumbnailFileSize: Foundation.Measurement<Foundation.UnitInformationStorage>?
    public let displayHeight: TelephonyMessagingKit.RCSService.Business.Card.Media.Height
    public let description: Swift.String?
    public static func == (a: TelephonyMessagingKit.RCSService.Business.Card.Media, b: TelephonyMessagingKit.RCSService.Business.Card.Media) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum ImageAlignment : Swift.Codable, Swift.Equatable, Swift.Sendable {
    case left
    case right
    public static func == (a: TelephonyMessagingKit.RCSService.Business.Card.ImageAlignment, b: TelephonyMessagingKit.RCSService.Business.Card.ImageAlignment) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Content : Swift.Codable, Swift.Equatable, Swift.Sendable {
    public let media: TelephonyMessagingKit.RCSService.Business.Card.Media?
    public let title: Swift.String?
    public let description: Swift.String?
    public let suggestions: [TelephonyMessagingKit.RCSService.Business.Suggestion]
    public static func == (a: TelephonyMessagingKit.RCSService.Business.Card.Content, b: TelephonyMessagingKit.RCSService.Business.Card.Content) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Width : Swift.Codable, Swift.Equatable, Swift.Sendable {
    case small
    case medium
    public static func == (a: TelephonyMessagingKit.RCSService.Business.Card.Width, b: TelephonyMessagingKit.RCSService.Business.Card.Width) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business.ShowLocationAction.Method : Swift.Equatable, Swift.Codable {
  public static func == (lhs: TelephonyMessagingKit.RCSService.Business.ShowLocationAction.Method, rhs: TelephonyMessagingKit.RCSService.Business.ShowLocationAction.Method) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService {
  public struct AddGroupChatParticipantsRequest : Swift.Sendable {
    public struct Result : Swift.Sendable {
      public let added: [TelephonyMessagingKit.RCSHandle.URI]
    }
    public var cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public var groupHandle: TelephonyMessagingKit.RCSHandle.Group
    public var participants: [TelephonyMessagingKit.RCSHandle.URI]
    public init(cellularServiceID: TelephonyMessagingKit.CellularServiceID, groupHandle: TelephonyMessagingKit.RCSHandle.Group, participants: [TelephonyMessagingKit.RCSHandle.URI])
  }
  public struct RemoveGroupChatParticipantsRequest : Swift.Sendable {
    public struct Result : Swift.Sendable {
      public let removed: [TelephonyMessagingKit.RCSHandle.URI]
    }
    public var cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public var groupHandle: TelephonyMessagingKit.RCSHandle.Group
    public var participants: [TelephonyMessagingKit.RCSHandle.URI]
    public init(cellularServiceID: TelephonyMessagingKit.CellularServiceID, groupHandle: TelephonyMessagingKit.RCSHandle.Group, participants: [TelephonyMessagingKit.RCSHandle.URI])
  }
  public struct ChangeGroupChatSubjectRequest : Swift.Sendable {
    public var cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public var groupHandle: TelephonyMessagingKit.RCSHandle.Group
    public var newSubject: Swift.String
    public init(cellularServiceID: TelephonyMessagingKit.CellularServiceID, groupHandle: TelephonyMessagingKit.RCSHandle.Group, newSubject: Swift.String)
  }
  public struct LeaveGroupChatRequest : Swift.Sendable {
    public var cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public var groupHandle: TelephonyMessagingKit.RCSHandle.Group
    public init(cellularServiceID: TelephonyMessagingKit.CellularServiceID, groupHandle: TelephonyMessagingKit.RCSHandle.Group)
  }
  public struct CreateGroupChatRequest : Swift.Sendable {
    public struct Result : Swift.Sendable {
      public let groupHandle: TelephonyMessagingKit.RCSHandle.Group
      public let participants: [TelephonyMessagingKit.RCSHandle.URI]
      public let subject: Swift.String?
    }
    public var cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public var participants: [TelephonyMessagingKit.RCSHandle.URI]
    public var subject: Swift.String
    public init(cellularServiceID: TelephonyMessagingKit.CellularServiceID, participants: [TelephonyMessagingKit.RCSHandle.URI], subject: Swift.String)
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct RCSGroupContext : Swift.Equatable, Swift.Codable, Swift.Sendable {
  public let handle: TelephonyMessagingKit.RCSHandle.Group
  public static func == (a: TelephonyMessagingKit.RCSGroupContext, b: TelephonyMessagingKit.RCSGroupContext) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService {
  public struct Configuration : Swift.Sendable {
    public let chatRevokeTimeout: Swift.Duration?
    #if compiler(>=5.3) && $NonescapableTypes
    public var maximumTextMessageSize: Foundation.Measurement<Foundation.UnitInformationStorage>? {
      get
    }
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public var maximumGroupSize: Swift.Int? {
      get
    }
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public var maximumFileTransferSize: Foundation.Measurement<Foundation.UnitInformationStorage>? {
      get
    }
    #endif
    public let fileTransferWarningSize: Foundation.Measurement<Foundation.UnitInformationStorage>?
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSMessage {
  public enum Disposition : Swift.Equatable, Swift.Codable, Swift.Sendable {
    case delivered
    case deliveryFailed
    case displayed
    case interworkingDelivered
    case interworkingFailed
    public static func == (a: TelephonyMessagingKit.RCSMessage.Disposition, b: TelephonyMessagingKit.RCSMessage.Disposition) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct CellularServiceID : Swift.Codable, Swift.Sendable, Swift.Hashable {
  public static func == (a: TelephonyMessagingKit.CellularServiceID, b: TelephonyMessagingKit.CellularServiceID) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.CellularServiceID : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct SMSHandle : Swift.Codable, Swift.Sendable {
  public init(phoneNumber: Swift.String)
  public let phoneNumber: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct SMSContent : Swift.Codable, Swift.Sendable {
  public init(body: Swift.String)
  public let body: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct SMSMessageID : Swift.RawRepresentable, Swift.Codable, Swift.Sendable, Swift.Hashable, Swift.CustomStringConvertible {
  public init(rawValue: Swift.UInt32)
  public let rawValue: Swift.UInt32
  public var description: Swift.String {
    get
  }
  @available(iOS 26.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  public typealias RawValue = Swift.UInt32
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
public struct SMSMessage : Swift.Codable, Swift.Sendable {
  public let cellularServiceID: TelephonyMessagingKit.CellularServiceID
  public let handle: TelephonyMessagingKit.SMSHandle
  public let messageID: TelephonyMessagingKit.SMSMessageID
  public let content: TelephonyMessagingKit.SMSContent
  public init(cellularServiceID: TelephonyMessagingKit.CellularServiceID, handle: TelephonyMessagingKit.SMSHandle, messageID: TelephonyMessagingKit.SMSMessageID, content: TelephonyMessagingKit.SMSContent)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService {
  public struct RevokeMessageRequest : Swift.Sendable {
    public var cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public var handle: TelephonyMessagingKit.RCSHandle
    public var messageID: TelephonyMessagingKit.RCSMessageID
    public init(cellularServiceID: TelephonyMessagingKit.CellularServiceID, handle: TelephonyMessagingKit.RCSHandle, messageID: TelephonyMessagingKit.RCSMessageID)
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService {
  public struct FileUploadRequest : Swift.Sendable {
    public var cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public var fileURL: Foundation.URL
    public var contentType: UniformTypeIdentifiers.UTType?
    public var thumbnailURL: Foundation.URL?
    public var thumbnailContentType: UniformTypeIdentifiers.UTType?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(cellularServiceID: TelephonyMessagingKit.CellularServiceID, fileURL: Foundation.URL, contentType: UniformTypeIdentifiers.UTType? = nil, thumbnailURL: Foundation.URL? = nil, thumbnailContentType: UniformTypeIdentifiers.UTType? = nil)
    #endif
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.FileUploadRequest {
  public struct Metadata : Swift.Sendable {
    public let transactionID: Foundation.UUID
    public let fileMetadata: TelephonyMessagingKit.RCSFileTransferMetadata
    public let thumbnailMetadata: TelephonyMessagingKit.RCSFileTransferMetadata?
  }
}
@_hasMissingDesignatedInitializers @available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
final public class SMSService : Swift.Sendable {
  public enum Error : Foundation.LocalizedError, Swift.Codable, Swift.Sendable {
    case temporaryFailure
    case permanentFailure
    case notSupported
    case unknown
    public static func == (a: TelephonyMessagingKit.SMSService.Error, b: TelephonyMessagingKit.SMSService.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct IncomingMessageNotification : Swift.Sendable {
    public let message: TelephonyMessagingKit.SMSMessage
  }
  public struct ViabilityNotification : Swift.Equatable, Swift.Sendable {
    public let cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public let isViable: Swift.Bool
    public static func == (a: TelephonyMessagingKit.SMSService.ViabilityNotification, b: TelephonyMessagingKit.SMSService.ViabilityNotification) -> Swift.Bool
  }
  public struct CriticalMessageStateNotification : Swift.Equatable, Swift.Sendable {
    public enum State : Swift.Equatable, Swift.Sendable {
      case sent
      public static func == (a: TelephonyMessagingKit.SMSService.CriticalMessageStateNotification.State, b: TelephonyMessagingKit.SMSService.CriticalMessageStateNotification.State) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public let cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public let messageID: TelephonyMessagingKit.SMSMessageID
    public let state: TelephonyMessagingKit.SMSService.CriticalMessageStateNotification.State
    public static func == (a: TelephonyMessagingKit.SMSService.CriticalMessageStateNotification, b: TelephonyMessagingKit.SMSService.CriticalMessageStateNotification) -> Swift.Bool
  }
  final public func isViable(for cellularServiceID: TelephonyMessagingKit.CellularServiceID) -> Swift.Bool
  final public var viabilityNotifications: some _Concurrency.AsyncSequence<TelephonyMessagingKit.SMSService.ViabilityNotification, Swift.Never> {
    get throws
  }
  final public func sendMessage(_ message: TelephonyMessagingKit.SMSMessage) async throws
  final public func reportSpam(_ message: TelephonyMessagingKit.SMSMessage) async throws
  final public var incomingMessageNotifications: some _Concurrency.AsyncSequence<TelephonyMessagingKit.SMSService.IncomingMessageNotification, Swift.Never> {
    get throws
  }
  final public var criticalMessageStateNotifications: some _Concurrency.AsyncSequence<TelephonyMessagingKit.SMSService.CriticalMessageStateNotification, Swift.Never> {
    get throws
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
final public class RCSService : Swift.Sendable {
  public enum Error : Foundation.LocalizedError, Swift.Sendable, Swift.Codable {
    case serviceUnavailable
    case invalidArgument
    case decodingFailed
    case notSupported
    case unknown
    case temporaryError
    case permanentError
    case internalError
    case notFound
    case maximumSizeExceeded
    public static func == (a: TelephonyMessagingKit.RCSService.Error, b: TelephonyMessagingKit.RCSService.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct IncomingMessageNotification : Swift.Equatable, Swift.Sendable {
    public let message: TelephonyMessagingKit.RCSMessage
    public let groupContext: TelephonyMessagingKit.RCSGroupContext?
    public let suggestions: [TelephonyMessagingKit.RCSService.Business.Suggestion]
    public static func == (a: TelephonyMessagingKit.RCSService.IncomingMessageNotification, b: TelephonyMessagingKit.RCSService.IncomingMessageNotification) -> Swift.Bool
  }
  public struct ViabilityNotification : Swift.Equatable, Swift.Sendable {
    public let cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public let isViable: Swift.Bool
    public static func == (a: TelephonyMessagingKit.RCSService.ViabilityNotification, b: TelephonyMessagingKit.RCSService.ViabilityNotification) -> Swift.Bool
  }
  public enum GroupChatEvent : Swift.Sendable {
    case started(TelephonyMessagingKit.RCSService.GroupChatStartedEvent)
    case ended(TelephonyMessagingKit.RCSService.GroupChatEndedEvent)
    case participantsAdded(TelephonyMessagingKit.RCSService.GroupChatParticipantsAddedEvent)
    case participantsRemoved(TelephonyMessagingKit.RCSService.GroupChatParticipantsRemovedEvent)
    case subjectUpdated(TelephonyMessagingKit.RCSService.GroupChatSubjectUpdatedEvent)
  }
  public struct RemoteHandleUpdate : Swift.Sendable {
    public let cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public let handle: TelephonyMessagingKit.RCSHandle
    public let newHandle: TelephonyMessagingKit.RCSHandle?
    public let isBusinessHandle: Swift.Bool
    public let capabilities: TelephonyMessagingKit.RCSService.RemoteCapabilities?
  }
  final public func isViable(for cellularServiceID: TelephonyMessagingKit.CellularServiceID) -> Swift.Bool
  final public var viabilityNotifications: some _Concurrency.AsyncSequence<TelephonyMessagingKit.RCSService.ViabilityNotification, Swift.Never> {
    get throws
  }
  final public func configuration(for cellularServiceID: TelephonyMessagingKit.CellularServiceID) throws -> TelephonyMessagingKit.RCSService.Configuration
  final public func upload(_ uploadRequest: TelephonyMessagingKit.RCSService.FileUploadRequest) async throws -> TelephonyMessagingKit.RCSService.FileUploadRequest.Metadata
  final public func download(_ downloadRequest: TelephonyMessagingKit.RCSService.FileDownloadRequest) async throws -> TelephonyMessagingKit.RCSService.FileDownloadRequest.Metadata
  final public func sendMessage(_ content: TelephonyMessagingKit.RCSMessage.Text, to destination: TelephonyMessagingKit.RCSHandle, using cellularServiceID: TelephonyMessagingKit.CellularServiceID, messageID: TelephonyMessagingKit.RCSMessageID) async throws
  final public func sendMessage(_ content: TelephonyMessagingKit.RCSMessage.FileTransfer, to destination: TelephonyMessagingKit.RCSHandle, using cellularServiceID: TelephonyMessagingKit.CellularServiceID, messageID: TelephonyMessagingKit.RCSMessageID) async throws
  final public func sendMessage(_ content: TelephonyMessagingKit.RCSMessage.GeolocationPush, to destination: TelephonyMessagingKit.RCSHandle, using cellularServiceID: TelephonyMessagingKit.CellularServiceID, messageID: TelephonyMessagingKit.RCSMessageID) async throws
  final public func sendMessage(_ content: TelephonyMessagingKit.RCSMessage.ComposingIndicator, to destination: TelephonyMessagingKit.RCSHandle, using cellularServiceID: TelephonyMessagingKit.CellularServiceID, messageID: TelephonyMessagingKit.RCSMessageID) async throws
  #if compiler(>=5.3) && $NonescapableTypes
  final public func sendMessage(_ content: TelephonyMessagingKit.RCSMessage.DispositionNotification, to destination: TelephonyMessagingKit.RCSHandle.URI, using cellularServiceID: TelephonyMessagingKit.CellularServiceID, messageID: TelephonyMessagingKit.RCSMessageID, group: TelephonyMessagingKit.RCSHandle.Group? = nil) async throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public func remoteCapabilities(for request: TelephonyMessagingKit.RCSService.RemoteCapabilitiesRequest) async throws -> TelephonyMessagingKit.RCSService.RemoteCapabilities?
  #endif
  final public var remoteHandleUpdates: some _Concurrency.AsyncSequence<TelephonyMessagingKit.RCSService.RemoteHandleUpdate, Swift.Never> {
    get throws
  }
  final public func sendSuggestionResponse(_ response: TelephonyMessagingKit.RCSService.SuggestionResponse) async throws
  final public func sendDeviceSpecifics(to destination: TelephonyMessagingKit.RCSHandle.URI, using cellularServiceID: TelephonyMessagingKit.CellularServiceID, messageID: TelephonyMessagingKit.RCSMessageID) async throws
  #if compiler(>=5.3) && $NonescapableTypes
  final public func businessInformation(for request: TelephonyMessagingKit.RCSService.BusinessInformationRequest) async throws -> TelephonyMessagingKit.RCSService.Business?
  #endif
  final public func createGroupChat(_ request: TelephonyMessagingKit.RCSService.CreateGroupChatRequest) async throws -> TelephonyMessagingKit.RCSService.CreateGroupChatRequest.Result
  final public func leaveGroupChat(_ request: TelephonyMessagingKit.RCSService.LeaveGroupChatRequest) async throws
  final public func addGroupChatParticipants(_ request: TelephonyMessagingKit.RCSService.AddGroupChatParticipantsRequest) async throws -> TelephonyMessagingKit.RCSService.AddGroupChatParticipantsRequest.Result
  final public func removeGroupChatParticipants(_ request: TelephonyMessagingKit.RCSService.RemoveGroupChatParticipantsRequest) async throws -> TelephonyMessagingKit.RCSService.RemoveGroupChatParticipantsRequest.Result
  final public func changeGroupChatSubject(_ request: TelephonyMessagingKit.RCSService.ChangeGroupChatSubjectRequest) async throws
  final public var incomingMessageNotifications: some _Concurrency.AsyncSequence<TelephonyMessagingKit.RCSService.IncomingMessageNotification, Swift.Never> {
    get throws
  }
  final public var groupChatEvents: some _Concurrency.AsyncSequence<TelephonyMessagingKit.RCSService.GroupChatEvent, Swift.Never> {
    get throws
  }
  final public func reportSpam(_ request: TelephonyMessagingKit.RCSService.ReportSpamRequest) async throws
  final public func revokeMessage(_ request: TelephonyMessagingKit.RCSService.RevokeMessageRequest) async throws -> Swift.Bool
  @objc deinit
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService {
  public struct GroupChatEndedEvent : Swift.Sendable {
    public let cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public let groupHandle: TelephonyMessagingKit.RCSHandle.Group
    public let endedBy: TelephonyMessagingKit.RCSHandle.URI
  }
  public struct GroupChatParticipantsAddedEvent : Swift.Sendable {
    public let cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public let groupHandle: TelephonyMessagingKit.RCSHandle.Group
    public let addedParticipants: [TelephonyMessagingKit.RCSHandle.URI]
    public let addedBy: TelephonyMessagingKit.RCSHandle.URI
  }
  public struct GroupChatParticipantsRemovedEvent : Swift.Sendable {
    public let cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public let groupHandle: TelephonyMessagingKit.RCSHandle.Group
    public let removedParticipants: [TelephonyMessagingKit.RCSHandle.URI]
    public let removedBy: TelephonyMessagingKit.RCSHandle.URI
    public let removedCurrentUser: Swift.Bool
  }
  public struct GroupChatSubjectUpdatedEvent : Swift.Sendable {
    public let cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public let groupHandle: TelephonyMessagingKit.RCSHandle.Group
    public let newSubject: Swift.String
    public let changedBy: TelephonyMessagingKit.RCSHandle.URI
  }
  public struct GroupChatStartedEvent : Swift.Sendable {
    public let cellularServiceID: TelephonyMessagingKit.CellularServiceID
    public let groupHandle: TelephonyMessagingKit.RCSHandle.Group
    public let participants: [TelephonyMessagingKit.RCSHandle.URI]
    public let subject: Swift.String
    public let creator: TelephonyMessagingKit.RCSHandle.URI
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.RemoteCapabilitiesRequest.CachePolicy : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.RemoteCapabilities.Availability : Swift.Equatable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.RemoteCapabilities.Availability : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.ReportSpamRequest.Category : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.MMSPartContent.MMSDispositionType : Swift.Equatable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.MMSPartContent.MMSDispositionType : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business.URIEntry.URIType : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business.URIEntry.Label : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business.MediaEntry.Label : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business.MediaEntry.ContentType : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business.OrganizationName.NameType : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSMessage.ComposingIndicator.State : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSFileTransferMetadata.Disposition : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.MMSService.Error : Swift.Equatable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.MMSService.Error : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.TelephonyMessagingSession.Error : Swift.Equatable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.TelephonyMessagingSession.Error : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.TelephonyMessagingSession.Error : Swift.Encodable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.TelephonyMessagingSession.Error : Swift.Decodable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.BusinessInformationRequest.CachePolicy : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business.OpenURLAction.Detent : Swift.Equatable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business.OpenURLAction.Detent : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business.ComposeRecordingAction.MediaType : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business.Card.Orientation : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business.Card.Media.Height : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business.Card.ImageAlignment : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Business.Card.Width : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSMessage.Disposition : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.SMSService.Error : Swift.Equatable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.SMSService.Error : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.SMSService.CriticalMessageStateNotification.State : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Error : Swift.Equatable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension TelephonyMessagingKit.RCSService.Error : Swift.Hashable {}
