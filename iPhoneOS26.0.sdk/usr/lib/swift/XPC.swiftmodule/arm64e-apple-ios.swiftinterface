// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -autolink-force-load -enable-library-evolution -module-link-name swiftXPC -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-upcoming-feature StrictConcurrency -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 105.0.14 -module-name XPC -package-name XPC
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import Darwin
import Swift
@_exported import XPC
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers @available(macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
public class XPCSession {
  public struct InitializationOptions : Swift.OptionSet, Swift.Sendable {
    public let rawValue: Swift.UInt64
    public init(rawValue: Swift.UInt64)
    public static let none: XPC.XPCSession.InitializationOptions
    public static let inactive: XPC.XPCSession.InitializationOptions
    public static let privileged: XPC.XPCSession.InitializationOptions
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias ArrayLiteralElement = XPC.XPCSession.InitializationOptions
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias Element = XPC.XPCSession.InitializationOptions
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, *)
    public typealias RawValue = Swift.UInt64
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @available(macOS 14.0, macCatalyst 17.0, *)
  @available(iOS, unavailable)
  @preconcurrency convenience public init(xpcService: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(macOS 14.0, macCatalyst 17.0, *)
  @available(iOS, unavailable)
  @preconcurrency convenience public init(xpcService: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, incomingMessageHandler: (@Sendable (XPC.XPCDictionary) -> XPC.XPCDictionary?)? = nil, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(macOS 14.0, macCatalyst 17.0, *)
  @available(iOS, unavailable)
  @preconcurrency convenience public init<Message>(xpcService: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, incomingMessageHandler: (@Sendable (Message) -> (any Swift.Encodable)?)? = nil, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws where Message : Swift.Decodable
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(macOS 14.0, macCatalyst 17.0, *)
  @available(iOS, unavailable)
  @preconcurrency convenience public init(xpcService: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, incomingMessageHandler: (@Sendable (XPC.XPCReceivedMessage) -> (any Swift.Encodable)?)? = nil, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(macOS 14.0, macCatalyst 17.0, *)
  @available(iOS, unavailable)
  @preconcurrency convenience public init(machService: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(macOS 14.0, macCatalyst 17.0, *)
  @available(iOS, unavailable)
  @preconcurrency convenience public init(machService: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, incomingMessageHandler: (@Sendable (XPC.XPCDictionary) -> XPC.XPCDictionary?)? = nil, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(macOS 14.0, macCatalyst 17.0, *)
  @available(iOS, unavailable)
  @preconcurrency convenience public init<Message>(machService: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, incomingMessageHandler: (@Sendable (Message) -> (any Swift.Encodable)?)? = nil, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws where Message : Swift.Decodable
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(macOS 14.0, macCatalyst 17.0, *)
  @available(iOS, unavailable)
  @preconcurrency convenience public init(machService: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, incomingMessageHandler: (@Sendable (XPC.XPCReceivedMessage) -> (any Swift.Encodable)?)? = nil, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency public func setIncomingMessageHandler(_ incomingMessageHandler: @escaping @Sendable (XPC.XPCDictionary) -> XPC.XPCDictionary?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency public func setIncomingMessageHandler<Message>(_ incomingMessageHandler: @escaping @Sendable (Message) -> (any Swift.Encodable)?) where Message : Swift.Decodable
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency public func setIncomingMessageHandler(_ incomingMessageHandler: @escaping @Sendable (XPC.XPCReceivedMessage) -> (any Swift.Encodable)?)
  #endif
  @preconcurrency public func setCancellationHandler(_ cancellationHandler: @escaping @Sendable (XPC.XPCRichError) -> Swift.Void)
  public func setTargetQueue(_ targetQueue: Dispatch.DispatchQueue)
  public func activate() throws
  public func cancel(reason: Swift.String)
  public func send(message: XPC.XPCDictionary) throws
  public func send<Message>(_ message: Message) throws where Message : Swift.Encodable
  public func sendSync(message: XPC.XPCDictionary) throws -> XPC.XPCDictionary
  public func sendSync<Message, Reply>(_ message: Message) throws -> Reply where Message : Swift.Encodable, Reply : Swift.Decodable
  public func sendSync<Message>(_ message: Message) throws -> XPC.XPCReceivedMessage where Message : Swift.Encodable
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency public func send(message: XPC.XPCDictionary, replyHandler: @escaping @Sendable (Swift.Result<XPC.XPCDictionary, XPC.XPCRichError>) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency public func send<Message, Reply>(_ message: Message, replyHandler: @escaping @Sendable (Swift.Result<Reply, any Swift.Error>) -> Swift.Void) throws where Message : Swift.Encodable, Reply : Swift.Decodable
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency public func send<Message>(_ message: Message, replyHandler: @escaping @Sendable (Swift.Result<XPC.XPCReceivedMessage, XPC.XPCRichError>) -> Swift.Void) throws where Message : Swift.Encodable
  #endif
  @objc deinit
}
@available(macOS 15.0, macCatalyst 18.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension XPC.XPCSession {
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency convenience public init(endpoint: XPC.XPCEndpoint, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency convenience public init(endpoint: XPC.XPCEndpoint, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, incomingMessageHandler: (@Sendable (XPC.XPCDictionary) -> XPC.XPCDictionary?)? = nil, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency convenience public init<Message>(endpoint: XPC.XPCEndpoint, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, incomingMessageHandler: (@Sendable (Message) -> (any Swift.Encodable)?)? = nil, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws where Message : Swift.Decodable
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency convenience public init(endpoint: XPC.XPCEndpoint, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, incomingMessageHandler: (@Sendable (XPC.XPCReceivedMessage) -> (any Swift.Encodable)?)? = nil, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws
  #endif
}
@available(macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension XPC.XPCSession : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 26.0, macCatalyst 26.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension XPC.XPCSession {
  public func setPeerRequirement(_ requirement: XPC.XPCPeerRequirement)
}
@available(macOS 26.0, macCatalyst 26.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension XPC.XPCSession {
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency convenience public init(xpcService: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, requirement: XPC.XPCPeerRequirement, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency convenience public init(xpcService: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, requirement: XPC.XPCPeerRequirement, incomingMessageHandler: (@Sendable (XPC.XPCDictionary) -> XPC.XPCDictionary?)? = nil, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency convenience public init<Message>(xpcService: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, requirement: XPC.XPCPeerRequirement, incomingMessageHandler: (@Sendable (Message) -> (any Swift.Encodable)?)? = nil, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws where Message : Swift.Decodable
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency convenience public init(xpcService: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, requirement: XPC.XPCPeerRequirement, incomingMessageHandler: (@Sendable (XPC.XPCReceivedMessage) -> (any Swift.Encodable)?)? = nil, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency convenience public init(machService: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, requirement: XPC.XPCPeerRequirement, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency convenience public init(machService: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, requirement: XPC.XPCPeerRequirement, incomingMessageHandler: (@Sendable (XPC.XPCDictionary) -> XPC.XPCDictionary?)? = nil, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency convenience public init<Message>(machService: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, requirement: XPC.XPCPeerRequirement, incomingMessageHandler: (@Sendable (Message) -> (any Swift.Encodable)?)? = nil, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws where Message : Swift.Decodable
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency convenience public init(machService: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCSession.InitializationOptions = .none, requirement: XPC.XPCPeerRequirement, incomingMessageHandler: (@Sendable (XPC.XPCReceivedMessage) -> (any Swift.Encodable)?)? = nil, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) throws
  #endif
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, *)
extension XPC.XPCSession : @unchecked Swift.Sendable {
}
@available(macOS 26.0, macCatalyst 26.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct XPCPeerRequirement {
}
@available(macOS 26.0, macCatalyst 26.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension XPC.XPCPeerRequirement {
  public static func hasEntitlement(_ entitlement: Swift.String) -> XPC.XPCPeerRequirement
  public static func entitlement(_ entitlement: Swift.String, matches value: Swift.Bool) -> XPC.XPCPeerRequirement
  public static func entitlement(_ entitlement: Swift.String, matches value: Swift.String) -> XPC.XPCPeerRequirement
  public static func entitlement(_ entitlement: Swift.String, matches value: Swift.Int) -> XPC.XPCPeerRequirement
  #if compiler(>=5.3) && $NonescapableTypes
  public static func isFromSameTeam(andMatchesSigningIdentifier: Swift.String? = nil) -> XPC.XPCPeerRequirement
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func isPlatformCode(andMatchesSigningIdentifier: Swift.String? = nil) -> XPC.XPCPeerRequirement
  #endif
}
@available(macOS 26.0, macCatalyst 26.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension XPC.XPCPeerRequirement {
  public init(lightweightCodeRequirements dictionary: XPC.XPCDictionary)
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
public struct XPCArray {
  public init(_ value: XPC.xpc_object_t)
  public init()
  public func withUnsafeUnderlyingArray<ReturnType>(_ closure: (XPC.xpc_object_t) throws -> ReturnType) rethrows -> ReturnType
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCArray {
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript<T>(index: Swift.Int, as type: T.Type = T.self) -> T? where T : Swift.BinaryInteger {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript<T>(index: Swift.Int) -> T? where T : Swift.SignedInteger {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript<T>(index: Swift.Int) -> T? where T : Swift.UnsignedInteger {
    get
    set
  }
  #endif
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCArray {
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript<T>(index: Swift.Int, as type: T.Type = T.self) -> T? where T : Swift.BinaryFloatingPoint {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript<T>(index: Swift.Int) -> T? where T : Swift.BinaryFloatingPoint {
    get
    set
  }
  #endif
  public subscript<T>(index: Swift.Int, as type: T.Type = T.self, default defaultValue: @autoclosure () -> T) -> T where T : Swift.BinaryFloatingPoint {
    get
  }
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCArray {
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(index: Swift.Int, as type: Swift.Bool.Type = Bool.self) -> Swift.Bool? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(index: Swift.Int) -> Swift.Bool? {
    get
    set
  }
  #endif
  public subscript(index: Swift.Int, as type: Swift.Bool.Type = Bool.self, default defaultValue: @autoclosure () -> Swift.Bool) -> Swift.Bool {
    get
  }
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCArray {
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(index: Swift.Int, as type: XPC.XPCDictionary.Type = XPCDictionary.self) -> XPC.XPCDictionary? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(index: Swift.Int) -> XPC.XPCDictionary? {
    get
    set
  }
  #endif
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCArray {
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(index: Swift.Int, as type: any XPC.OS_xpc_object.Type = xpc_object_t.self) -> XPC.xpc_object_t? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(index: Swift.Int, as type: XPC.xpc_type_t) -> XPC.xpc_object_t? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(index: Swift.Int) -> XPC.xpc_object_t? {
    get
    set
  }
  #endif
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCArray {
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(index: Swift.Int, as type: Swift.String.Type = String.self) -> Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(index: Swift.Int) -> Swift.String? {
    get
    set
  }
  #endif
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCArray {
  public func copy(into destination: XPC.XPCArray)
  public var isEmpty: Swift.Bool {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func forEach(_ body: (_ index: Swift.Int, _ value: XPC.xpc_object_t) throws -> Swift.Void) rethrows
  public typealias IndexValuePair = (index: Swift.Int, value: XPC.xpc_object_t)
  public func forEach(_ body: (XPC.XPCArray.IndexValuePair) throws -> Swift.Void) rethrows
  public func map<ReturnType>(_ transform: (XPC.XPCArray.IndexValuePair) throws -> ReturnType) rethrows -> [ReturnType]
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCArray : Swift.Equatable {
  public static func == (lhs: XPC.XPCArray, rhs: XPC.XPCArray) -> Swift.Bool
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCArray : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCArray : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 15.0, macCatalyst 18.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct XPCEndpoint {
}
@available(macOS 15.0, macCatalyst 18.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension XPC.XPCEndpoint : Swift.Equatable, Swift.Hashable {
  public static func == (a: XPC.XPCEndpoint, b: XPC.XPCEndpoint) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 15.0, macCatalyst 18.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension XPC.XPCEndpoint : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 15.0, macCatalyst 18.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension XPC.XPCEndpoint : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
public struct XPCRichError : Swift.Error, Swift.Sendable {
  public var canRetry: Swift.Bool {
    get
  }
}
@available(macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension XPC.XPCRichError : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_CONNECTION: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_ENDPOINT: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_NULL: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_BOOL: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_INT64: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_UINT64: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_DOUBLE: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_DATE: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_DATA: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_STRING: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_UUID: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_FD: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_SHMEM: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_ARRAY: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_DICTIONARY: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_ERROR: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_TYPE_ACTIVITY: XPC.xpc_type_t {
  get
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
public var XPC_TYPE_RICH_ERROR: XPC.xpc_type_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
nonisolated(unsafe) public let XPC_ERROR_KEY_DESCRIPTION: Swift.UnsafePointer<Swift.CChar>
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
nonisolated(unsafe) public let XPC_EVENT_KEY_NAME: Swift.UnsafePointer<Swift.CChar>
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_BOOL_TRUE: XPC.xpc_object_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_BOOL_FALSE: XPC.xpc_object_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_ARRAY_APPEND: _Builtin_stddef.size_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_ERROR_CONNECTION_INTERRUPTED: XPC.xpc_object_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_ERROR_CONNECTION_INVALID: XPC.xpc_object_t {
  get
}
@available(macOS 10.10, iOS 8.0, watchOS 2.0, tvOS 9.0, *)
public var XPC_ERROR_TERMINATION_IMMINENT: XPC.xpc_object_t {
  get
}
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, *)
public var XPC_ERROR_PEER_CODE_SIGNING_REQUIREMENT: XPC.xpc_object_t {
  get
}
@available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "XPCSession")
@available(macCatalyst, introduced: 16.0, deprecated: 17.0, renamed: "XPCSession")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public typealias xpc_session_t = XPC.OS_xpc_object
#if compiler(>=5.3) && $NonescapableTypes
@available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "debugDescription")
@available(macCatalyst, introduced: 16.0, deprecated: 17.0, renamed: "debugDescription")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public func xpc_session_copy_description(_ session: any XPC.OS_xpc_object) -> Swift.UnsafeMutablePointer<Swift.CChar>?
#endif
@available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "XPCSession.InitializationOptions")
@available(macCatalyst, introduced: 16.0, deprecated: 17.0, renamed: "XPCSession.InitializationOptions")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct xpc_session_create_flags_t : Swift.OptionSet, @unchecked Swift.Sendable {
  public var rawValue: Swift.UInt64 {
    get
  }
  public init(rawValue: Swift.UInt64)
  public static let none: XPC.xpc_session_create_flags_t
  public static let privileged: XPC.xpc_session_create_flags_t
  public static let inactive: XPC.xpc_session_create_flags_t
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "XPCSession.InitializationOptions")
  @available(macCatalyst, introduced: 16.0, deprecated: 17.0, renamed: "XPCSession.InitializationOptions")
  public typealias ArrayLiteralElement = XPC.xpc_session_create_flags_t
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "XPCSession.InitializationOptions")
  @available(macCatalyst, introduced: 16.0, deprecated: 17.0, renamed: "XPCSession.InitializationOptions")
  public typealias Element = XPC.xpc_session_create_flags_t
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "XPCSession.InitializationOptions")
  @available(macCatalyst, introduced: 16.0, deprecated: 17.0, renamed: "XPCSession.InitializationOptions")
  public typealias RawValue = Swift.UInt64
}
@available(macOS, introduced: 13.0, deprecated: 14.0, message: "See XPCSession initializer")
@available(macCatalyst, introduced: 16.0, deprecated: 17.0, message: "See XPCSession initializer")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public typealias xpc_session_cancel_handler_t = (XPC.xpc_rich_error_t) -> Swift.Void
@available(macOS, introduced: 13.0, deprecated: 14.0, message: "See XPCSession initializer")
@available(macCatalyst, introduced: 16.0, deprecated: 17.0, message: "See XPCSession initializer")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public typealias xpc_session_incoming_message_handler_t = (XPC.xpc_object_t) -> Swift.Void
@available(macOS, introduced: 13.0, deprecated: 14.0, message: "See XPCSession.send(_:replyHandler)")
@available(macCatalyst, introduced: 16.0, deprecated: 17.0, message: "See XPCSession.send(_:replyHandler)")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public typealias xpc_session_reply_handler_t = (XPC.xpc_object_t?, XPC.xpc_rich_error_t?) -> Swift.Void
#if compiler(>=5.3) && $NonescapableTypes
@available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "XPCSession(xpcService:)")
@available(macCatalyst, introduced: 16.0, deprecated: 17.0, renamed: "XPCSession(xpcService:)")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public func xpc_session_create_xpc_service(_ name: Swift.UnsafePointer<Swift.CChar>, _ target_queue: Dispatch.dispatch_queue_t?, _ flags: XPC.xpc_session_create_flags_t, _ error_out: Swift.AutoreleasingUnsafeMutablePointer<XPC.xpc_rich_error_t?>?) -> (any XPC.OS_xpc_object)?
#endif
#if compiler(>=5.3) && $NonescapableTypes
@available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "XPCSession(machService:)")
@available(macCatalyst, introduced: 16.0, deprecated: 17.0, renamed: "XPCSession(machService:)")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public func xpc_session_create_mach_service(_ mach_service: Swift.UnsafePointer<Swift.CChar>, _ target_queue: Dispatch.dispatch_queue_t?, _ flags: XPC.xpc_session_create_flags_t, _ error_out: Swift.AutoreleasingUnsafeMutablePointer<XPC.xpc_rich_error_t?>?) -> (any XPC.OS_xpc_object)?
#endif
@available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "setIncomingMessageHandler()")
@available(macCatalyst, introduced: 16.0, deprecated: 17.0, renamed: "setIncomingMessageHandler()")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public func xpc_session_set_incoming_message_handler(_ session: any XPC.OS_xpc_object, _ handler: @escaping XPC.xpc_session_incoming_message_handler_t)
@available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "setCancellationHandler()")
@available(macCatalyst, introduced: 16.0, deprecated: 17.0, renamed: "setCancellationHandler()")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public func xpc_session_set_cancel_handler(_ session: any XPC.OS_xpc_object, _ cancel_handler: @escaping XPC.xpc_session_cancel_handler_t)
#if compiler(>=5.3) && $NonescapableTypes
@available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "setTargetQueue()")
@available(macCatalyst, introduced: 16.0, deprecated: 17.0, renamed: "setTargetQueue()")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public func xpc_session_set_target_queue(_ session: any XPC.OS_xpc_object, _ target_queue: Dispatch.dispatch_queue_t?)
#endif
#if compiler(>=5.3) && $NonescapableTypes
@available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "activate()")
@available(macCatalyst, introduced: 16.0, deprecated: 17.0, renamed: "activate()")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public func xpc_session_activate(_ session: any XPC.OS_xpc_object, _ error_out: Swift.AutoreleasingUnsafeMutablePointer<XPC.xpc_rich_error_t?>?) -> Swift.Bool
#endif
@available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "cancel(reason:)")
@available(macCatalyst, introduced: 16.0, deprecated: 17.0, renamed: "cancel(reason:)")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public func xpc_session_cancel(_ session: any XPC.OS_xpc_object)
#if compiler(>=5.3) && $NonescapableTypes
@available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "send(message:)")
@available(macCatalyst, introduced: 16.0, deprecated: 17.0, renamed: "send(message:)")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public func xpc_session_send_message(_ session: any XPC.OS_xpc_object, _ message: XPC.xpc_object_t) -> XPC.xpc_rich_error_t?
#endif
#if compiler(>=5.3) && $NonescapableTypes
@available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "sendSync(message:)")
@available(macCatalyst, introduced: 16.0, deprecated: 17.0, renamed: "sendSync(message:)")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public func xpc_session_send_message_with_reply_sync(_ session: any XPC.OS_xpc_object, _ message: XPC.xpc_object_t, _ error_out: Swift.AutoreleasingUnsafeMutablePointer<XPC.xpc_rich_error_t?>?) -> XPC.xpc_object_t?
#endif
@available(macOS, introduced: 13.0, deprecated: 14.0, renamed: "send(message:replyHandler:)")
@available(macCatalyst, introduced: 16.0, deprecated: 17.0, renamed: "send(message:replyHandler:)")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public func xpc_session_send_message_with_reply_async(_ session: any XPC.OS_xpc_object, _ message: XPC.xpc_object_t, _ reply_handler: @escaping XPC.xpc_session_reply_handler_t)
@available(*, unavailable, renamed: "XPCListener")
public typealias xpc_listener_t = XPC.OS_xpc_listener
@available(*, unavailable, renamed: "XPCListener.InitializationOptions")
public struct xpc_listener_create_flags_t {
}
@available(*, unavailable, message: "see XPCListener(service:) and XPCListener.XPCPeerHandler")
public typealias xpc_listener_incoming_session_handler_t = (any XPC.OS_xpc_object) -> Swift.Void
#if compiler(>=5.3) && $NonescapableTypes
@available(*, unavailable, renamed: "debugDescription")
public func xpc_listener_copy_description(_ listener: XPC.xpc_listener_t) -> Swift.UnsafeMutablePointer<Swift.CChar>?
#endif
#if compiler(>=5.3) && $NonescapableTypes
@available(*, unavailable, renamed: "XPCListener(service:)")
public func xpc_listener_create(_ service: Swift.UnsafePointer<Swift.CChar>, _ target_queue: Dispatch.dispatch_queue_t?, _ flags: XPC.xpc_listener_create_flags_t, _ incoming_session_handler: @escaping XPC.xpc_listener_incoming_session_handler_t, _ error_out: Swift.AutoreleasingUnsafeMutablePointer<XPC.xpc_rich_error_t?>?) -> XPC.xpc_listener_t?
#endif
#if compiler(>=5.3) && $NonescapableTypes
@available(*, unavailable, renamed: "activate()")
public func xpc_listener_activate(_ listener: XPC.xpc_listener_t, _ error_out: Swift.AutoreleasingUnsafeMutablePointer<XPC.xpc_rich_error_t?>?) -> Swift.Bool
#endif
@available(*, unavailable, renamed: "cancel()")
public func xpc_listener_cancel(_ listener: XPC.xpc_listener_t)
@available(*, unavailable, renamed: "XPCListener.IncomingSessionRequest.reject(reason:)")
public func xpc_listener_reject_peer(_ peer: any XPC.OS_xpc_object, _ reason: Swift.UnsafePointer<Swift.CChar>)
@available(macOS, introduced: 10.7, deprecated: 14.4, message: "Use Swift's automatic reference counting to manage the lifetime of XPC objects")
@available(macCatalyst, introduced: 4.0, deprecated: 17.4, message: "Use Swift's automatic reference counting to manage the lifetime of XPC objects")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public func xpc_retain(_ object: XPC.xpc_object_t) -> XPC.xpc_object_t
@available(macOS, introduced: 10.7, deprecated: 14.4, message: "Use Swift's automatic reference counting to manage the lifetime of XPC objects")
@available(macCatalyst, introduced: 4.0, deprecated: 17.4, message: "Use Swift's automatic reference counting to manage the lifetime of XPC objects")
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public func xpc_release(_ object: XPC.xpc_object_t)
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
public struct XPCDictionary {
  public init(_ value: XPC.xpc_object_t)
  public init()
  public func withUnsafeUnderlyingDictionary<ReturnType>(_ closure: (XPC.xpc_object_t) throws -> ReturnType) rethrows -> ReturnType
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCDictionary {
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript<T>(key: Swift.String, as type: T.Type = T.self) -> T? where T : Swift.BinaryInteger {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript<T>(key: Swift.String) -> T? where T : Swift.SignedInteger {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript<T>(key: Swift.String) -> T? where T : Swift.UnsignedInteger {
    get
    set
  }
  #endif
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCDictionary {
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript<T>(key: Swift.String, as type: T.Type = T.self) -> T? where T : Swift.BinaryFloatingPoint {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript<T>(key: Swift.String) -> T? where T : Swift.BinaryFloatingPoint {
    get
    set
  }
  #endif
  public subscript<T>(key: Swift.String, as type: T.Type = T.self, default defaultValue: @autoclosure () -> T) -> T where T : Swift.BinaryFloatingPoint {
    get
  }
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCDictionary {
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(key: Swift.String, as type: Swift.Bool.Type = Bool.self) -> Swift.Bool? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(key: Swift.String) -> Swift.Bool? {
    get
    set
  }
  #endif
  public subscript(key: Swift.String, as type: Swift.Bool.Type = Bool.self, default defaultValue: @autoclosure () -> Swift.Bool) -> Swift.Bool {
    get
  }
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCDictionary {
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(key: Swift.String, as type: XPC.XPCDictionary.Type = XPCDictionary.self) -> XPC.XPCDictionary? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(key: Swift.String) -> XPC.XPCDictionary? {
    get
    set
  }
  #endif
}
@available(macOS, unavailable)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension XPC.XPCDictionary {
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(key: Swift.String, as type: XPC.XPCArray.Type = XPCArray.self) -> XPC.XPCArray? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(key: Swift.String) -> XPC.XPCArray? {
    get
    set
  }
  #endif
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCDictionary {
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(key: Swift.String, as type: any XPC.OS_xpc_object.Type = xpc_object_t.self) -> XPC.xpc_object_t? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(key: Swift.String, as type: XPC.xpc_type_t) -> XPC.xpc_object_t? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(key: Swift.String) -> XPC.xpc_object_t? {
    get
    set
  }
  #endif
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCDictionary {
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(key: Swift.String, as type: Swift.String.Type = String.self) -> Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(key: Swift.String) -> Swift.String? {
    get
    set
  }
  #endif
}
@available(macOS 15.0, macCatalyst 18.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension XPC.XPCDictionary {
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(key: Swift.String, as type: XPC.XPCEndpoint.Type = XPCEndpoint.self) -> XPC.XPCEndpoint? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(key: Swift.String) -> XPC.XPCEndpoint? {
    get
    set
  }
  #endif
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCDictionary {
  public func copy(into destination: XPC.XPCDictionary)
  #if compiler(>=5.3) && $NonescapableTypes
  @discardableResult
  public func removeValue(forKey key: Swift.String) -> XPC.xpc_object_t?
  #endif
  public var isEmpty: Swift.Bool {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func forEach(_ body: (_ key: Swift.String, _ value: XPC.xpc_object_t) throws -> Swift.Void) rethrows
  public typealias KeyValuePair = (key: Swift.String, value: XPC.xpc_object_t)
  public func forEach(_ body: (XPC.XPCDictionary.KeyValuePair) throws -> Swift.Void) rethrows
  public func map<ReturnType>(_ transform: (XPC.XPCDictionary.KeyValuePair) throws -> ReturnType) rethrows -> [ReturnType]
  public var keys: [Swift.String] {
    get
  }
  public var values: [XPC.xpc_object_t] {
    get
  }
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCDictionary {
  public func reply(_ reply: XPC.XPCDictionary)
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCDictionary : Swift.Equatable {
  public static func == (lhs: XPC.XPCDictionary, rhs: XPC.XPCDictionary) -> Swift.Bool
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCDictionary : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, tvOS 16.0, watchOS 9.0, *)
extension XPC.XPCDictionary : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
public class XPCListener {
  @available(macOS 14.0, macCatalyst 17.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public struct InitializationOptions : Swift.OptionSet, Swift.Sendable {
    public let rawValue: Swift.UInt64
    public init(rawValue: Swift.UInt64)
    public static let none: XPC.XPCListener.InitializationOptions
    public static let inactive: XPC.XPCListener.InitializationOptions
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, macCatalyst 17.0, *)
    public typealias ArrayLiteralElement = XPC.XPCListener.InitializationOptions
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, macCatalyst 17.0, *)
    public typealias Element = XPC.XPCListener.InitializationOptions
    @available(iOS 17.0, tvOS 17.0, watchOS 10.0, macOS 14.0, macCatalyst 17.0, *)
    public typealias RawValue = Swift.UInt64
  }
  @_hasMissingDesignatedInitializers public class IncomingSessionRequest {
    public struct Decision {
    }
    #if compiler(>=5.3) && $NonescapableTypes
    @preconcurrency public func accept(incomingMessageHandler: @escaping @Sendable (XPC.XPCDictionary) -> XPC.XPCDictionary?, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) -> XPC.XPCListener.IncomingSessionRequest.Decision
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    @preconcurrency public func accept<Message>(incomingMessageHandler: @escaping @Sendable (Message) -> (any Swift.Encodable)?, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) -> XPC.XPCListener.IncomingSessionRequest.Decision where Message : Swift.Decodable
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    @preconcurrency public func accept(incomingMessageHandler: @escaping @Sendable (XPC.XPCReceivedMessage) -> (any Swift.Encodable)?, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) -> XPC.XPCListener.IncomingSessionRequest.Decision
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    @preconcurrency public func accept(incomingMessageHandler: @escaping @Sendable (XPC.XPCDictionary) -> XPC.XPCDictionary?, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) -> (XPC.XPCListener.IncomingSessionRequest.Decision, XPC.XPCSession)
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    @preconcurrency public func accept<Message>(incomingMessageHandler: @escaping @Sendable (Message) -> (any Swift.Encodable)?, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) -> (XPC.XPCListener.IncomingSessionRequest.Decision, XPC.XPCSession) where Message : Swift.Decodable
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    @preconcurrency public func accept(incomingMessageHandler: @escaping @Sendable (XPC.XPCReceivedMessage) -> (any Swift.Encodable)?, cancellationHandler: (@Sendable (XPC.XPCRichError) -> Swift.Void)? = nil) -> (XPC.XPCListener.IncomingSessionRequest.Decision, XPC.XPCSession)
    #endif
    public func accept<Handler>(_ inactiveSessionHandler: (XPC.XPCSession) -> Handler) -> XPC.XPCListener.IncomingSessionRequest.Decision where Handler : XPC.XPCPeerHandler, Handler.Input == XPC.XPCDictionary, Handler.Output == XPC.XPCDictionary
    public func accept<Handler>(_ inactiveSessionHandler: (XPC.XPCSession) -> Handler) -> XPC.XPCListener.IncomingSessionRequest.Decision where Handler : XPC.XPCPeerHandler, Handler.Input : Swift.Decodable, Handler.Output == any Swift.Encodable
    public func accept<Handler>(_ inactiveSessionHandler: (XPC.XPCSession) -> Handler) -> XPC.XPCListener.IncomingSessionRequest.Decision where Handler : XPC.XPCPeerHandler, Handler.Input == XPC.XPCReceivedMessage, Handler.Output == any Swift.Encodable
    public func reject(reason: Swift.String) -> XPC.XPCListener.IncomingSessionRequest.Decision
    @objc deinit
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @available(macOS 14.0, macCatalyst 17.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @preconcurrency public init(service: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCListener.InitializationOptions = .none, incomingSessionHandler: @escaping @Sendable (XPC.XPCListener.IncomingSessionRequest) -> XPC.XPCListener.IncomingSessionRequest.Decision) throws
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(macOS 15.0, macCatalyst 18.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @preconcurrency public init(targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCListener.InitializationOptions = .none, incomingSessionHandler: @escaping @Sendable (XPC.XPCListener.IncomingSessionRequest) -> XPC.XPCListener.IncomingSessionRequest.Decision)
  #endif
  @available(macOS 14.0, macCatalyst 17.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func activate() throws
  @available(macOS 14.0, macCatalyst 17.0, *)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public func cancel()
  @objc deinit
}
@available(macOS 15.0, macCatalyst 18.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension XPC.XPCListener {
  public var endpoint: XPC.XPCEndpoint {
    get
  }
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
@preconcurrency public protocol XPCPeerHandler : Swift.Sendable {
  associatedtype Input
  associatedtype Output
  #if compiler(>=5.3) && $NonescapableTypes
  func handleIncomingRequest(_: Self.Input) -> Self.Output?
  #endif
  func handleCancellation(error: XPC.XPCRichError)
}
@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
extension XPC.XPCPeerHandler {
  public func handleCancellation(error: XPC.XPCRichError)
}
@available(macOS 14.0, macCatalyst 17.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension XPC.XPCListener : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@available(macOS 26.0, macCatalyst 26.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension XPC.XPCListener {
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency convenience public init(service: Swift.String, targetQueue: Dispatch.DispatchQueue? = nil, options: XPC.XPCListener.InitializationOptions = .none, requirement: XPC.XPCPeerRequirement, incomingSessionHandler: @escaping @Sendable (XPC.XPCListener.IncomingSessionRequest) -> XPC.XPCListener.IncomingSessionRequest.Decision) throws
  #endif
}
@available(macOS 26.0, macCatalyst 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, *)
extension XPC.XPCListener : @unchecked Swift.Sendable {
}
@available(macOS 14.0, iOS 17.0, tvOS 17.0, watchOS 10.0, *)
public struct XPCReceivedMessage {
  public func decode<T>(as type: T.Type = T.self) throws -> T where T : Swift.Decodable
  public func reply<Message>(_ object: Message) where Message : Swift.Encodable
  #if compiler(>=5.3) && $NonescapableTypes
  @preconcurrency public func handoffReply(to queue: Dispatch.DispatchQueue, _ continuation: @escaping @Sendable () -> Swift.Void) -> (any Swift.Encodable)?
  #endif
  public var expectsReply: Swift.Bool {
    get
  }
  public var isSync: Swift.Bool {
    get
  }
}
@available(macOS 26.0, macCatalyst 26.0, *)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension XPC.XPCReceivedMessage {
  public func senderSatisfies(_ requirement: XPC.XPCPeerRequirement) -> Swift.Bool
}
