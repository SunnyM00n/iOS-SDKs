// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 876 -module-name CoreText
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
@_exported import CoreText
import Foundation
import Swift
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Foundation.AttributeScopes.CoreTextAttributes {
  @available(iOS 26.0, macOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
  @frozen public enum LineHeightAttribute : Foundation.AttributedStringKey {
    public typealias Value = Foundation.AttributedString.LineHeight
    public static let name: Swift.String
    public static let runBoundaries: Foundation.AttributedString.AttributeRunBoundaries?
  }
}
@available(*, unavailable)
extension Foundation.AttributeScopes.CoreTextAttributes.LineHeightAttribute : Swift.Sendable {
}
extension Foundation.AttributedString {
  @available(iOS 26.0, macOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
  public struct LineHeight : Swift.Codable, Swift.Hashable, Swift.Sendable {
    public static var variable: Foundation.AttributedString.LineHeight {
      get
    }
    public static var normal: Foundation.AttributedString.LineHeight {
      get
    }
    public static var tight: Foundation.AttributedString.LineHeight {
      get
    }
    public static var loose: Foundation.AttributedString.LineHeight {
      get
    }
    public static func multiple(factor: CoreFoundation.CGFloat) -> Foundation.AttributedString.LineHeight
    public static func leading(increase: CoreFoundation.CGFloat) -> Foundation.AttributedString.LineHeight
    public static func exact(points: CoreFoundation.CGFloat) -> Foundation.AttributedString.LineHeight
    public static func == (a: Foundation.AttributedString.LineHeight, b: Foundation.AttributedString.LineHeight) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
@available(macOS 15.0, iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, *)
extension Foundation.AttributedString {
  public struct AdaptiveImageGlyph : Swift.Codable, Swift.Hashable, Swift.Equatable, Swift.Sendable {
    public init(imageContent: Foundation.Data)
    public let imageContent: Foundation.Data
    public let contentIdentifier: Swift.String
    public let contentDescription: Swift.String
    public static var contentType: UniformTypeIdentifiers.UTType {
      get
    }
    public static func == (a: Foundation.AttributedString.AdaptiveImageGlyph, b: Foundation.AttributedString.AdaptiveImageGlyph) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
@available(iOS 26.0, macOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
extension Foundation.AttributeScopes {
  public struct CoreTextAttributes {
  }
}
@available(*, unavailable)
extension Foundation.AttributeScopes.CoreTextAttributes : Swift.Sendable {
}
@available(iOS 26.0, macOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
extension Foundation.AttributeScopes.CoreTextAttributes {
  @available(iOS 26.0, macOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
  @frozen public enum TextAlignmentAttribute : Foundation.CodableAttributedStringKey {
    public typealias Value = Foundation.AttributedString.TextAlignment
    public static let name: Swift.String
    public static let runBoundaries: Foundation.AttributedString.AttributeRunBoundaries?
  }
}
@available(*, unavailable)
extension Foundation.AttributeScopes.CoreTextAttributes.TextAlignmentAttribute : Swift.Sendable {
}
extension Foundation.AttributedString {
  @available(iOS 26.0, macOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
  public enum TextAlignment : Swift.CaseIterable, Swift.Codable, Swift.Hashable, Swift.Sendable {
    case left
    case center
    case right
    public static func == (a: Foundation.AttributedString.TextAlignment, b: Foundation.AttributedString.TextAlignment) -> Swift.Bool
    @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias AllCases = [Foundation.AttributedString.TextAlignment]
    nonisolated public static var allCases: [Foundation.AttributedString.TextAlignment] {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
@available(iOS 26.0, macOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
extension Foundation.AttributeScopes.CoreTextAttributes.LineHeightAttribute : Swift.BitwiseCopyable {}
@available(iOS 26.0, macOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
extension Foundation.AttributeScopes.CoreTextAttributes.TextAlignmentAttribute : Swift.BitwiseCopyable {}
