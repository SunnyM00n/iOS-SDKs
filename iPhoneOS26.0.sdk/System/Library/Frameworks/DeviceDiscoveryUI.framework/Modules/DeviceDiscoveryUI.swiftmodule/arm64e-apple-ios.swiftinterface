// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-upcoming-feature InternalImportsByDefault -enable-upcoming-feature MemberImportVisibility -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 2093.10.1.2.17 -module-name DeviceDiscoveryUI
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
public import Combine
@_exported public import DeviceDiscoveryUI
public import ExtensionKit
public import Network
public import Swift
public import SwiftUI
public import _Concurrency
public import _StringProcessing
public import _SwiftConcurrencyShims
prefix operator >>
@objc @_hasMissingDesignatedInitializers @available(iOS 26.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency final public class DDDevicePairingViewController : UIKit.UIViewController, Swift.Sendable {
  @_Concurrency.MainActor @preconcurrency public static func isSupported(_ listenerProvider: any Network.ListenerProvider) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public init(listenerProvider: any Network.ListenerProvider, access: DeviceDiscoveryUI.DDDevicePairingAccess)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @objc deinit
}
@available(tvOS 16.0, iOS 26.0, *)
extension DeviceDiscoveryUI.DDDevicePickerViewController {
  #if compiler(>=5.3) && $NonescapableTypes
  @available(tvOS 16.0, *)
  @_Concurrency.MainActor @preconcurrency public static func isSupported(_ browseDescriptor: Network.NWBrowser.Descriptor, using: Network.NWParameters? = nil) -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(tvOS 16.0, iOS 26.0, *)
  @_Concurrency.MainActor @preconcurrency convenience public init?(browseDescriptor: Network.NWBrowser.Descriptor, parameters: Network.NWParameters? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(iOS 26.0, *)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @_Concurrency.MainActor @preconcurrency convenience public init?(browseDescriptor: Network.NWBrowser.Descriptor, parameters: Network.NWParameters? = nil, access: DeviceDiscoveryUI.DDDevicePairingAccess = .default)
  #endif
  @available(tvOS 16.0, iOS 26.0, *)
  @_Concurrency.MainActor @preconcurrency public var endpoint: Network.NWEndpoint {
    get async throws
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct DDDevicePairingAccess {
  public static var `default`: DeviceDiscoveryUI.DDDevicePairingAccess {
    get
  }
  public static var permanent: DeviceDiscoveryUI.DDDevicePairingAccess {
    get
  }
}
