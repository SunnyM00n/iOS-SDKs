// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=unchecked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -user-module-version 101.0.24 -module-name GameSave
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import Foundation
@_exported import GameSave
import OSLog
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers.UTType
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension SwiftUICore.View {
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public func gameSaveSyncingAlert(directory: SwiftUICore.Binding<GameSave.GameSaveSyncedDirectory?>, finishedLoading: @escaping @_Concurrency.MainActor @Sendable () -> Swift.Void) -> some SwiftUICore.View
  
  #endif
}
@_hasMissingDesignatedInitializers @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public class GameSaveSyncedDirectory : Swift.Identifiable, Swift.Equatable, @unchecked Swift.Sendable {
  public var id: Swift.String {
    get
  }
  public static func == (lhs: GameSave.GameSaveSyncedDirectory, rhs: GameSave.GameSaveSyncedDirectory) -> Swift.Bool
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public enum State : Swift.CustomStringConvertible {
    case ready(Foundation.URL)
    case offline(Foundation.URL)
    case local(Foundation.URL)
    case syncing
    case conflicted(versions: [GameSave.GameSaveSyncedDirectory.Version])
    case error(any Swift.Error)
    case closed
    public var description: Swift.String {
      get
    }
  }
  @_hasMissingDesignatedInitializers @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public class Version : Swift.Identifiable, Swift.CustomStringConvertible {
    public typealias ID = Foundation.URL
    public var id: Foundation.URL {
      get
    }
    public var isLocal: Swift.Bool {
      get
    }
    public var localizedNameOfSavingComputer: Swift.String {
      get
    }
    public var modifiedDate: Foundation.Date
    public var url: Foundation.URL {
      get
    }
    public var description: Swift.String {
      get
    }
    @objc deinit
  }
  public var state: GameSave.GameSaveSyncedDirectory.State {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public class func openDirectory(containerIdentifier: Swift.String? = nil) -> GameSave.GameSaveSyncedDirectory
  #endif
  public func triggerPendingUpload() async -> Swift.Bool
  public func resolveConflicts(with version: GameSave.GameSaveSyncedDirectory.Version)
  @available(iOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public func finishSyncing(statusDisplay window: UIKit.UIWindow) async
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public func finishSyncing() async
  public func close()
  @available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias ID = Swift.String
  @objc deinit
}
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension GameSave.GameSaveSyncedDirectory : nonisolated Observation.Observable {
}
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public let GameSaveErrorDomain: Swift.String
