// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -library-level spi -enable-experimental-feature DebugDescriptionMacro -user-module-version 320.40 -module-name AccessorySetupKit
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -project-name DeviceAccess -interface-compiler-version 6.2
@_exported import AccessorySetupKit
import CoreBluetooth
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@_spi(Private) @_inheritsConvenienceInitializers @available(iOS 18.0, *)
@available(watchOS, unavailable)
@available(macCatalyst, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@objc public class ASUIClientManager : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @_spi(Private) @objc public static let shared: AccessorySetupKit.ASUIClientManager
  #if compiler(>=5.3) && $NonescapableTypes
  @_spi(Private) @objc public func activateConnection(session: AccessorySetupKit.ASAccessorySession, with displayItems: [AccessorySetupKit.ASPickerDisplayItem], pickerSettings: AccessorySetupKit.ASPickerDisplaySettings, for overrideBundleID: Swift.String? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @_spi(Private) @objc public func fail(accessory: AccessorySetupKit.ASAccessory, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @_spi(Private) @objc public func update(accessory: AccessorySetupKit.ASAccessory, options: AccessorySetupKit.ASAccessory.RenameOptions, for overrideBundleID: Swift.String? = nil, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  @_spi(Private) @objc deinit
  @_spi(Private) @objc override dynamic public init()
}
