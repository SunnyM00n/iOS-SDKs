// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-upcoming-feature InternalImportsByDefault -enable-upcoming-feature MemberImportVisibility -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 2205 -module-name NetworkExtension
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
public import ExtensionFoundation
public import Network
@_exported public import NetworkExtension
public import Swift
public import _Concurrency
public import _StringProcessing
public import _SwiftConcurrencyShims
@available(iOS 26.0, visionOS 26.0, macCatalyst 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol NEHotspotEvaluationProvider : ExtensionFoundation.AppExtension {
  var localizedDisplayName: Swift.String { get }
  func start() async -> Swift.Bool
  func stop(reason: NetworkExtension.NEProviderStopReason) async
  func handleCommand(_ command: NetworkExtension.NEHotspotHelperCommand) async -> NetworkExtension.NEHotspotHelperResponse
}
@available(iOS 26.0, visionOS 26.0, macCatalyst 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEHotspotEvaluationProvider {
  public var configuration: some NetworkExtension.NEAppExtensionConfiguration {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 26.0, visionOS 26.0, macCatalyst 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public class NEHotspotEvaluationProviderConfiguration : NetworkExtension.NEAppExtensionConfiguration {
  @objc deinit
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension NetworkExtension.NENetworkRule {
  convenience public init(destinationNetworkEndpoint networkEndpoint: Network.NWEndpoint, prefix destinationPrefix: Swift.Int, protocol: NetworkExtension.NENetworkRule.`Protocol`)
  convenience public init(destinationHostEndpoint hostEndpoint: Network.NWEndpoint, protocol: NetworkExtension.NENetworkRule.`Protocol`)
  #if compiler(>=5.3) && $NonescapableTypes
  convenience public init(remoteNetworkEndpoint: Network.NWEndpoint?, remotePrefix: Swift.Int, localNetworkEndpoint: Network.NWEndpoint?, localPrefix: Swift.Int, protocol: NetworkExtension.NENetworkRule.`Protocol`, direction: NetworkExtension.NETrafficDirection)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var matchRemoteHostOrNetworkEndpoint: Network.NWEndpoint? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var matchLocalNetworkEndpoint: Network.NWEndpoint? {
    get
  }
  #endif
}
@available(iOS 18.0, visionOS 2.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEHotspotHelperCommand {
  public var interface: Network.NWInterface {
    get
  }
}
@available(macOS 15.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension NetworkExtension.NEFilterPacketProvider {
  #if compiler(>=5.3) && $NonescapableTypes
  public var handler: ((NetworkExtension.NEFilterPacketContext, Network.NWInterface, NetworkExtension.NETrafficDirection, Swift.UnsafeRawBufferPointer) -> NetworkExtension.NEFilterPacketProvider.Verdict)? {
    get
    set
  }
  #endif
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEAppProxyTCPFlow {
  public var remoteFlowEndpoint: Network.NWEndpoint {
    get
  }
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEFilterSocketFlow {
  #if compiler(>=5.3) && $NonescapableTypes
  public var remoteFlowEndpoint: Network.NWEndpoint? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var localFlowEndpoint: Network.NWEndpoint? {
    get
  }
  #endif
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEAppProxyUDPFlow {
  #if compiler(>=5.3) && $NonescapableTypes
  public func readDatagrams(completionHandler: @escaping ([(Foundation.Data, Network.NWEndpoint)]?, (any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func readDatagrams() async -> ([(Foundation.Data, Network.NWEndpoint)]?, (any Swift.Error)?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func writeDatagrams(_ array: [(Foundation.Data, Network.NWEndpoint)], completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  public func writeDatagrams(_ array: [(Foundation.Data, Network.NWEndpoint)]) async throws
  #if compiler(>=5.3) && $NonescapableTypes
  public var localFlowEndpoint: Network.NWEndpoint? {
    get
  }
  #endif
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol NEAppProxyUDPFlowHandling {
  func handleNewUDPFlow(_ flow: NetworkExtension.NEAppProxyUDPFlow, initialRemoteFlowEndpoint remoteEndpoint: Network.NWEndpoint) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @available(iOS 26.0, visionOS 26.0, macCatalyst 26.0, macOS 26.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public class NEAppExtensionConfiguration : ExtensionFoundation.AppExtensionConfiguration {
  nonisolated public func accept(connection: Foundation.NSXPCConnection) -> Swift.Bool
  @objc deinit
}
prefix operator >>
@available(iOS 26.0, macCatalyst 26.0, macOS 26.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEURLFilter {
  public class func verdict(for url: Foundation.URL) async -> NetworkExtension.NEURLFilter.Verdict
}
@available(iOS 26.0, macCatalyst 26.0, macOS 26.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(tvOS, unavailable)
public struct NEURLFilterPrefilter {
  public enum PrefilterData {
    case smallFilter(Foundation.Data)
    case temporaryFilepath(Foundation.URL)
  }
  public let tag: Swift.String
  public let data: NetworkExtension.NEURLFilterPrefilter.PrefilterData
  public let bitCount: Swift.Int
  public let hashCount: Swift.Int
  public let murmurSeed: Swift.UInt32
  public init(data: NetworkExtension.NEURLFilterPrefilter.PrefilterData, tag: Swift.String, bitCount: Swift.Int, hashCount: Swift.Int, murmurSeed: Swift.UInt32)
}
@available(iOS 26.0, macCatalyst 26.0, macOS 26.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(tvOS, unavailable)
public protocol NEURLFilterControlProvider : ExtensionFoundation.AppExtension {
  func start() async throws
  func stop(reason: NetworkExtension.NEProviderStopReason) async throws
  #if compiler(>=5.3) && $NonescapableTypes
  func fetchPrefilter(existingPrefilterTag: Swift.String?) async throws -> NetworkExtension.NEURLFilterPrefilter?
  #endif
}
@available(iOS 26.0, macCatalyst 26.0, macOS 26.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEURLFilterControlProvider {
  public var configuration: some NetworkExtension.NEAppExtensionConfiguration {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 26.0, macCatalyst 26.0, macOS 26.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public class NEURLFilterControlProviderConfiguration : NetworkExtension.NEAppExtensionConfiguration {
  @objc deinit
}
@available(iOS 26.0, macCatalyst 26.0, macOS 26.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(tvOS, unavailable)
extension Foundation.NSNotification.Name {
  public static let NEURLFilterConfigurationDidChange: Foundation.Notification.Name
  public static let NEURLFilterStatusDidChange: Foundation.Notification.Name
}
@_hasMissingDesignatedInitializers @available(iOS 26.0, macCatalyst 26.0, macOS 26.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(tvOS, unavailable)
public class NEURLFilterManager : @unchecked Swift.Sendable {
  public enum Status : Swift.Int, @unchecked Swift.Sendable {
    case invalid
    case stopped
    case starting
    case running
    case stopping
    #if compiler(>=5.3) && $NonescapableTypes
    public init?(rawValue: Swift.Int)
    #endif
    @available(iOS 26.0, macOS 26.0, macCatalyst 26.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Error : Swift.Int, Foundation.LocalizedError {
    case configurationUnchanged
    case configurationInvalid
    case configurationDisabled
    case configurationStale
    case configurationCannotBeRemoved
    case configurationPermissionDenied
    case configurationInternalError
    case configurationNotLoaded
    case serverSetupIncomplete
    case internalError
    case extensionCancelled
    case extensionNotFound
    case extensionFailedToLoad
    case unknown
    #if compiler(>=5.3) && $NonescapableTypes
    public init?(rawValue: Swift.Int)
    #endif
    @available(iOS 26.0, macOS 26.0, macCatalyst 26.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static var shared: NetworkExtension.NEURLFilterManager {
    get
  }
  @objc deinit
  public var isEnabled: Swift.Bool {
    get
    set
  }
  public var shouldFailClosed: Swift.Bool {
    get
    set
  }
  public var prefilterFetchInterval: Foundation.TimeInterval {
    get
    set
  }
  public var localizedDescription: Foundation.LocalizedStringResource?
  #if compiler(>=5.3) && $NonescapableTypes
  public var appBundleIdentifier: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var controlProviderBundleIdentifier: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var pirServerURL: Foundation.URL? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var pirPrivacyPassIssuerURL: Foundation.URL? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var pirAuthenticationToken: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func setConfiguration(pirServerURL: Foundation.URL, pirPrivacyPassIssuerURL: Foundation.URL?, pirAuthenticationToken: Swift.String, controlProviderBundleIdentifier: Swift.String) throws
  #endif
  public func loadFromPreferences() async throws
  public func saveToPreferences() async throws
  public func removeFromPreferences() async throws
  public func resetPIRCache() async throws
  public func refreshPIRParameters() async throws
  public var status: NetworkExtension.NEURLFilterManager.Status {
    get async
  }
  public func handleStatusChange() -> any _Concurrency.AsyncSequence<NetworkExtension.NEURLFilterManager.Status, Swift.Never>
  public func handleConfigChange() -> any _Concurrency.AsyncSequence<Swift.Bool, Swift.Never>
  #if compiler(>=5.3) && $NonescapableTypes
  public var lastDisconnectError: NetworkExtension.NEURLFilterManager.Error? {
    get async
  }
  #endif
}
@available(iOS 26.0, visionOS 26.0, macCatalyst 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public protocol NEHotspotAuthenticationProvider : ExtensionFoundation.AppExtension {
  func start() async -> Swift.Bool
  func stop(reason: NetworkExtension.NEProviderStopReason) async
  func handleCommand(_ command: NetworkExtension.NEHotspotHelperCommand) async -> NetworkExtension.NEHotspotHelperResponse
}
@available(iOS 26.0, visionOS 26.0, macCatalyst 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEHotspotAuthenticationProvider {
  public var configuration: some NetworkExtension.NEAppExtensionConfiguration {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 26.0, visionOS 26.0, macCatalyst 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public class NEHotspotAuthenticationProviderConfiguration : NetworkExtension.NEAppExtensionConfiguration {
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 26.0, visionOS 26.0, macCatalyst 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
final public class NEHotspotManager : @unchecked Swift.Sendable {
  public static var shared: NetworkExtension.NEHotspotManager {
    get
  }
  public enum Error : Swift.Error {
    case internalError
    case configurationNotLoaded
    case configurationInvalid
    public static func == (a: NetworkExtension.NEHotspotManager.Error, b: NetworkExtension.NEHotspotManager.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public var isEnabled: Swift.Bool {
    get
    set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  final public var evaluationProviderBundleIdentifier: Swift.String? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  final public var authenticationProviderBundleIdentifier: Swift.String? {
    get
    set
  }
  #endif
  final public var safariDomains: [Swift.String] {
    get
    set
  }
  final public var evaluatedSSIDs: [Swift.String] {
    get
    set
  }
  final public func loadFromPreferences() async throws
  final public func saveToPreferences() async throws
  final public func removeFromPreferences() async throws
  @objc deinit
}
@available(macOS 15.0, iOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEAppProxyFlow {
  #if compiler(>=5.3) && $NonescapableTypes
  public func open(withLocalFlowEndpoint localEndpoint: Network.NWEndpoint?, completionHandler: @escaping ((any Swift.Error)?) -> Swift.Void)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func open(withLocalFlowEndpoint localEndpoint: Network.NWEndpoint?) async throws
  #endif
  public func setMetadata(on parameters: Network.NWParameters)
  #if compiler(>=5.3) && $NonescapableTypes
  public var interface: Network.NWInterface? {
    get
    set
  }
  #endif
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, visionOS 26.0, *)
@available(watchOS, unavailable)
extension NetworkExtension.NEVPNIKEv2SecurityAssociationParameters {
  public var postQuantumKeyExchangeMethods: [NetworkExtension.NEVPNIKEv2PostQuantumKeyExchangeMethod] {
    get
    set(postQuantumKeyExchangeMethods)
  }
}
@available(macOS 15.0, iOS 18.0, tvOS 18.0, visionOS 2.0, *)
@available(watchOS, unavailable)
extension NetworkExtension.NEPacketTunnelProvider {
  #if compiler(>=5.3) && $NonescapableTypes
  public var virtualInterface: Network.NWInterface? {
    get
  }
  #endif
}
@available(iOS 26.0, macCatalyst 26.0, macOS 26.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEURLFilterManager.Status : Swift.Equatable {}
@available(iOS 26.0, macCatalyst 26.0, macOS 26.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEURLFilterManager.Status : Swift.Hashable {}
@available(iOS 26.0, macCatalyst 26.0, macOS 26.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEURLFilterManager.Status : Swift.RawRepresentable {}
@available(iOS 26.0, macCatalyst 26.0, macOS 26.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEURLFilterManager.Error : Swift.Equatable {}
@available(iOS 26.0, macCatalyst 26.0, macOS 26.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEURLFilterManager.Error : Swift.Hashable {}
@available(iOS 26.0, macCatalyst 26.0, macOS 26.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEURLFilterManager.Error : Swift.RawRepresentable {}
@available(iOS 26.0, visionOS 26.0, macCatalyst 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEHotspotManager.Error : Swift.Equatable {}
@available(iOS 26.0, visionOS 26.0, macCatalyst 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension NetworkExtension.NEHotspotManager.Error : Swift.Hashable {}
