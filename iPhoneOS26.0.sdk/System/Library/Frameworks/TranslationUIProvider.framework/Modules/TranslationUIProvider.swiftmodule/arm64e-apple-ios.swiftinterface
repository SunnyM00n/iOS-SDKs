// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 350.1 -module-name TranslationUIProvider
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import ExtensionKit
import Foundation
import Swift
import SwiftUI
@_exported import TranslationUIProvider
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@available(iOS 18.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(macCatalyst, unavailable)
public protocol TranslationUIProviderExtensionScene : ExtensionKit.AppExtensionScene {
}
@available(iOS 18.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(macCatalyst, unavailable)
@_Concurrency.MainActor @preconcurrency public struct TranslationUIProviderSelectedTextScene<Content> : TranslationUIProvider.TranslationUIProviderExtensionScene where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(content: @escaping (any TranslationUIProvider.TranslationUIProviderContext) -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some ExtensionKit.AppExtensionScene {
    get
  }
  @available(iOS 18.4, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s21TranslationUIProvider0aB17SelectedTextSceneV4bodyQrvp", 0) __<Content>
}
@available(iOS 18.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(macCatalyst, unavailable)
public protocol TranslationUIProviderContext : Observation.Observable {
  #if compiler(>=5.3) && $NonescapableTypes
  var inputText: Foundation.AttributedString? { get }
  #endif
  var allowsReplacement: Swift.Bool { get }
  #if compiler(>=5.3) && $NonescapableTypes
  func finish(translation: Foundation.AttributedString?)
  #endif
  func expandSheet()
}
@available(iOS 18.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(macCatalyst, unavailable)
public protocol TranslationUIProviderExtension : ExtensionFoundation.AppExtension {
  associatedtype Body : TranslationUIProvider.TranslationUIProviderExtensionScene
  var body: Self.Body { get }
}
@available(iOS 18.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(macCatalyst, unavailable)
extension TranslationUIProvider.TranslationUIProviderExtension {
  public var configuration: ExtensionKit.AppExtensionSceneConfiguration {
    get
  }
}
@available(iOS 18.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(macCatalyst, unavailable)
@_Concurrency.MainActor @preconcurrency public struct TranslationProviderUIExtensionConfiguration : ExtensionFoundation.AppExtensionConfiguration {
  @_Concurrency.MainActor @preconcurrency public init(_ appExtension: any TranslationUIProvider.TranslationUIProviderExtension)
}
@available(iOS 18.4, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(macCatalyst, unavailable)
extension TranslationUIProvider.TranslationUIProviderSelectedTextScene : Swift.Sendable {}
