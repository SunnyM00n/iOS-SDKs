// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -library-level api -target-min-inlining-version min -enable-upcoming-feature InternalImportsByDefault -enable-upcoming-feature MemberImportVisibility -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 300.0.4.102 -module-name _AppIntents_UIKit
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
@_exported public import AppIntents
public import Swift
public import UIKit
public import _AppIntents_SwiftUI
public import _Concurrency
public import _StringProcessing
public import _SwiftConcurrencyShims
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension AppIntents.DisplayRepresentation.Image {
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(systemName name: Swift.String, tintColor: UIKit.UIColor? = nil, symbolConfiguration: UIKit.UIImage.SymbolConfiguration? = nil)
  #endif
}
@objc @_hasMissingDesignatedInitializers @available(iOS 16.0, *)
@_Concurrency.MainActor @preconcurrency final public class ShortcutsUIButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency final public var style: _AppIntents_SwiftUI.ShortcutsLinkStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(style: _AppIntents_SwiftUI.ShortcutsLinkStyle = .automatic)
  @_Concurrency.MainActor @preconcurrency @objc override final public func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency @objc override final public func addTarget(_ target: Any?, action: ObjectiveC.Selector, for controlEvents: UIKit.UIControl.Event)
  #endif
  @objc deinit
}
@available(iOS 26.0, tvOS 26.0, visionOS 26.0, macCatalyst 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public protocol AppIntentSceneDelegate : UIKit.UISceneDelegate {
  func scene(_ scene: UIKit.UIScene, willPerformAppIntent appIntent: any _AppIntents_UIKit.UISceneAppIntent)
}
@available(iOS 26.0, tvOS 26.0, visionOS 26.0, macCatalyst 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension UIKit.UIScene.ConnectionOptions {
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public var appIntent: (any _AppIntents_UIKit.UISceneAppIntent)? {
    get
  }
  #endif
}
@available(iOS 26.0, tvOS 26.0, visionOS 26.0, macCatalyst 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public protocol UISceneAppIntent : AppIntents.TargetContentProvidingIntent {
  func performNavigation(forScene scene: UIKit.UIScene)
}
@available(iOS 26.0, tvOS 26.0, visionOS 26.0, macCatalyst 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension _AppIntents_UIKit.UISceneAppIntent {
  #if compiler(>=5.3) && $NonescapableTypes
  public var uiScene: UIKit.UIScene? {
    get
  }
  #endif
  public func performNavigation(forScene scene: UIKit.UIScene)
  public func perform() async throws -> some AppIntents.IntentResult
  
}
@available(iOS 26.0, tvOS 26.0, visionOS 26.0, macCatalyst 26.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
extension _AppIntents_UIKit.UISceneAppIntent where Self : AppIntents.OpenIntent {
  public var contentIdentifier: Swift.String {
    get
  }
  public func perform() async throws -> some AppIntents.IntentResult
  
}
@objc @_hasMissingDesignatedInitializers @available(iOS 16.0, *)
@available(macCatalyst, unavailable)
@_Concurrency.MainActor @preconcurrency final public class SiriTipUIView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public var style: _AppIntents_SwiftUI.SiriTipViewStyle {
    get
    set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic final public var isPresented: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency final public var allowsDismissal: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(style: _AppIntents_SwiftUI.SiriTipViewStyle = .automatic)
  @_Concurrency.MainActor @preconcurrency @objc override final public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc override final public func didMoveToWindow()
  @_Concurrency.MainActor @preconcurrency final public func setIntent<Intent>(intent: Intent) where Intent : AppIntents.AppIntent
  @objc deinit
}
