// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature LifetimeDependence -enable-experimental-feature NonescapableTypes -enable-upcoming-feature InternalImportsByDefault -enable-upcoming-feature MemberImportVisibility -enable-upcoming-feature ExistentialAny -enable-experimental-feature DebugDescriptionMacro -user-module-version 227.0.9 -module-name BackgroundAssets
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
@_exported public import BackgroundAssets
public import ExtensionFoundation
public import Foundation
public import Swift
public import System
public import _Concurrency
public import _StringProcessing
public import _SwiftConcurrencyShims
@available(iOS 26.0, macOS 26.0, tvOS 26.0, visionOS 26.0, *)
@available(watchOS, unavailable)
public protocol ManagedDownloaderExtension : BackgroundAssets.BADownloaderExtension where Self.Configuration : BackgroundAssets.ManagedDownloaderExtensionConfiguration {
  func shouldDownload(_ assetPack: BackgroundAssets.AssetPack) -> Swift.Bool
}
extension BackgroundAssets.ManagedDownloaderExtension {
  @available(iOS 26.0, macOS 26.0, tvOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  public var configuration: some BackgroundAssets.ManagedDownloaderExtensionConfiguration {
    get
  }
  @available(iOS 26.0, macOS 26.0, tvOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  public func shouldDownload(_ assetPack: BackgroundAssets.AssetPack) -> Swift.Bool
  @available(iOS 26.0, macOS 26.0, tvOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  public func downloads(for request: BackgroundAssets.BAContentRequest, manifestURL: Foundation.URL, extensionInfo: BackgroundAssets.BAAppExtensionInfo) -> Swift.Set<BackgroundAssets.BADownload>
  #if compiler(>=5.3) && $NonescapableTypes
  @available(iOS 26.0, macOS 26.0, tvOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  public func backgroundDownload(_ download: BackgroundAssets.BADownload, didReceive challenge: Foundation.URLAuthenticationChallenge) async -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?)
  #endif
  @available(iOS 26.0, macOS 26.0, tvOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  public func backgroundDownload(_ failedDownload: BackgroundAssets.BADownload, failedWithError error: any Swift.Error)
  @available(iOS 26.0, macOS 26.0, tvOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  public func backgroundDownload(_ finishedDownload: BackgroundAssets.BADownload, finishedWithFileURL fileURL: Foundation.URL)
}
@available(iOS 16.1, macOS 13.0, visionOS 2.4, tvOS 18.4, *)
@available(watchOS, unavailable)
public protocol BADownloaderExtension : ExtensionFoundation.AppExtension {
  func downloads(for request: BackgroundAssets.BAContentRequest, manifestURL: Foundation.URL, extensionInfo: BackgroundAssets.BAAppExtensionInfo) -> Swift.Set<BackgroundAssets.BADownload>
  #if compiler(>=5.3) && $NonescapableTypes
  func backgroundDownload(_ download: BackgroundAssets.BADownload, didReceive challenge: Foundation.URLAuthenticationChallenge) async -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?)
  #endif
  func backgroundDownload(_ failedDownload: BackgroundAssets.BADownload, failedWithError error: any Swift.Error)
  func backgroundDownload(_ finishedDownload: BackgroundAssets.BADownload, finishedWithFileURL fileURL: Foundation.URL)
  @available(iOS, introduced: 16.1, deprecated: 16.4, message: "extensionWillTerminate will not be invoked in all applicable circumstances and should not be relied upon.")
  @available(macOS, introduced: 13.0, deprecated: 13.3, message: "extensionWillTerminate will not be invoked in all applicable circumstances and should not be relied upon.")
  @available(visionOS, introduced: 2.4, deprecated: 2.4, message: "extensionWillTerminate will not be invoked in all applicable circumstances and should not be relied upon.")
  func extensionWillTerminate()
}
@available(iOS 16.1, macOS 13.0, visionOS 2.4, tvOS 18.4, *)
@available(watchOS, unavailable)
@_Concurrency.MainActor @preconcurrency public protocol BADownloaderExtensionConfiguration : ExtensionFoundation.AppExtensionConfiguration {
}
@available(iOS 16.1, macOS 13.0, visionOS 2.4, tvOS 18.4, *)
extension BackgroundAssets.BADownloaderExtension {
  public func downloads(for request: BackgroundAssets.BAContentRequest, manifestURL: Foundation.URL, extensionInfo: BackgroundAssets.BAAppExtensionInfo) -> Swift.Set<BackgroundAssets.BADownload>
  #if compiler(>=5.3) && $NonescapableTypes
  public func backgroundDownload(_ download: BackgroundAssets.BADownload, didReceive challenge: Foundation.URLAuthenticationChallenge) async -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?)
  #endif
  public func backgroundDownload(_ failedDownload: BackgroundAssets.BADownload, failedWithError error: any Swift.Error)
  public func backgroundDownload(_ finishedDownload: BackgroundAssets.BADownload, finishedWithFileURL fileURL: Foundation.URL)
  public func extensionWillTerminate()
}
@available(iOS 16.1, macOS 13.0, visionOS 2.4, tvOS 18.4, *)
extension BackgroundAssets.BADownloaderExtension {
  public var configuration: some BackgroundAssets.BADownloaderExtensionConfiguration {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 26.0, macOS 26.0, tvOS 26.0, visionOS 26.0, *)
@available(watchOS, unavailable)
public actor AssetPackManager {
  public enum DownloadStatusUpdate : Swift.CustomStringConvertible, Swift.Sendable {
    case began(BackgroundAssets.AssetPack)
    case paused(BackgroundAssets.AssetPack)
    case downloading(BackgroundAssets.AssetPack, Foundation.Progress)
    case finished(BackgroundAssets.AssetPack)
    case failed(BackgroundAssets.AssetPack, any Swift.Error)
    public var description: Swift.String {
      get
    }
  }
  public static let shared: BackgroundAssets.AssetPackManager
  final public let statusUpdates: some Swift.Sendable & _Concurrency.AsyncSequence<BackgroundAssets.AssetPackManager.DownloadStatusUpdate, Swift.Never>
  public var allAssetPacks: Swift.Set<BackgroundAssets.AssetPack> {
    get async throws
  }
  public func assetPack(withID assetPackID: Swift.String) async throws -> BackgroundAssets.AssetPack
  public func status(ofAssetPackWithID assetPackID: Swift.String) async throws -> BackgroundAssets.AssetPack.Status
  public func ensureLocalAvailability(of assetPack: BackgroundAssets.AssetPack) async throws
  @discardableResult
  public func checkForUpdates() async throws -> (updatingIDs: Swift.Set<Swift.String>, removedIDs: Swift.Set<Swift.String>)
  nonisolated public func statusUpdates(forAssetPackWithID assetPackID: Swift.String) -> some Swift.Sendable & _Concurrency.AsyncSequence<BackgroundAssets.AssetPackManager.DownloadStatusUpdate, Swift.Never>
  
  #if compiler(>=5.3) && $NonescapableTypes
  nonisolated public func contents(at path: System.FilePath, searchingInAssetPackWithID assetPackID: Swift.String? = nil, options: Foundation.Data.ReadingOptions = .mappedIfSafe) throws -> Foundation.Data
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  nonisolated public func descriptor(for path: System.FilePath, searchingInAssetPackWithID assetPackID: Swift.String? = nil) throws -> System.FileDescriptor
  #endif
  nonisolated public func url(for path: System.FilePath) throws -> Foundation.URL
  public func remove(assetPackWithID assetPackID: Swift.String) async throws
  @objc deinit
  @available(iOS 26.0, tvOS 26.0, visionOS 26.0, macOS 26.0, *)
  @available(watchOS, unavailable, introduced: 6.0)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
@available(iOS 26.0, macOS 26.0, tvOS 26.0, visionOS 26.0, *)
@available(watchOS, unavailable)
public enum ManagedBackgroundAssetsError : Swift.CustomStringConvertible, Foundation.LocalizedError {
  case assetPackNotFound(withID: Swift.String)
  case fileNotFound(at: System.FilePath)
  public var description: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public var errorDescription: Swift.String? {
    get
  }
  #endif
}
@available(iOS 26.0, macOS 26.0, tvOS 26.0, visionOS 26.0, *)
@available(watchOS, unavailable)
@_documentation(visibility: internal) @_Concurrency.MainActor @preconcurrency public protocol ManagedDownloaderExtensionConfiguration : BackgroundAssets.BADownloaderExtensionConfiguration {
  associatedtype DownloadManagerDelegateType : BackgroundAssets.BADownloadManagerDelegate, Swift.Sendable
  nonisolated static var downloadManagerDelegate: Self.DownloadManagerDelegateType { get }
}
@available(iOS 16.1, macOS 13.0, visionOS 2.4, tvOS 18.4, *)
@available(watchOS, unavailable)
extension BackgroundAssets.BAAppExtensionInfo {
  #if compiler(>=5.3) && $NonescapableTypes
  @available(iOS 16.4, macOS 13.3, visionOS 2.4, tvOS 18.4, *)
  public var restrictedEssentialDownloadSizeRemaining: Swift.Int? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var restrictedDownloadSizeRemaining: Swift.Int? {
    get
  }
  #endif
}
@available(iOS 26.0, macOS 26.0, tvOS 26.0, visionOS 26.0, *)
@available(watchOS, unavailable)
public struct AssetPack : Swift.CustomStringConvertible, Foundation.DecodableWithConfiguration, Swift.Encodable, Swift.Hashable, Swift.Identifiable, Swift.Sendable {
  public struct Status : Swift.OptionSet, Swift.Sendable {
    public static let downloadAvailable: BackgroundAssets.AssetPack.Status
    public static let updateAvailable: BackgroundAssets.AssetPack.Status
    public static let upToDate: BackgroundAssets.AssetPack.Status
    public static let outOfDate: BackgroundAssets.AssetPack.Status
    public static let obsolete: BackgroundAssets.AssetPack.Status
    public static let downloading: BackgroundAssets.AssetPack.Status
    public static let downloaded: BackgroundAssets.AssetPack.Status
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    @available(iOS 26.0, tvOS 26.0, visionOS 26.0, macOS 26.0, *)
    @available(watchOS, unavailable)
    public typealias ArrayLiteralElement = BackgroundAssets.AssetPack.Status
    @available(iOS 26.0, tvOS 26.0, visionOS 26.0, macOS 26.0, *)
    @available(watchOS, unavailable)
    public typealias Element = BackgroundAssets.AssetPack.Status
    @available(iOS 26.0, tvOS 26.0, visionOS 26.0, macOS 26.0, *)
    @available(watchOS, unavailable)
    public typealias RawValue = Swift.Int
  }
  public typealias DecodingConfiguration = BackgroundAssets.AssetPackManifest.DecodingConfiguration
  public let id: Swift.String
  public let downloadSize: Swift.Int
  public let version: Swift.Int
  public let userInfo: Foundation.Data?
  public var description: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder, configuration: BackgroundAssets.AssetPack.DecodingConfiguration) throws
  #if compiler(>=5.3) && $NonescapableTypes
  public func download(for contentRequest: BackgroundAssets.BAContentRequest?) -> BackgroundAssets.BADownload
  #endif
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: BackgroundAssets.AssetPack, rhs: BackgroundAssets.AssetPack) -> Swift.Bool
  @available(iOS 26.0, tvOS 26.0, visionOS 26.0, macOS 26.0, *)
  @available(watchOS, unavailable)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 26.0, macOS 26.0, tvOS 26.0, visionOS 26.0, *)
@available(watchOS, unavailable)
public struct AssetPackManifest : Swift.CustomStringConvertible, Foundation.DecodableWithConfiguration, Swift.Encodable, Swift.Sendable {
  public struct DecodingConfiguration : Swift.CustomStringConvertible {
    public var description: Swift.String {
      get
    }
  }
  public let assetPacks: Swift.Set<BackgroundAssets.AssetPack>
  public var description: Swift.String {
    get
  }
  public init(contentsOf url: Foundation.URL, appGroupID: Swift.String) throws
  public init(from data: Foundation.Data, appGroupID: Swift.String) throws
  public init(from decoder: any Swift.Decoder, configuration: BackgroundAssets.AssetPackManifest.DecodingConfiguration) throws
  #if compiler(>=5.3) && $NonescapableTypes
  public func allDownloads(for contentRequest: BackgroundAssets.BAContentRequest?) -> Swift.Set<BackgroundAssets.BADownload>
  #endif
  public func encode(to encoder: any Swift.Encoder) throws
}
