// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 260 -module-name ExtensionFoundation
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import Combine
@_exported import ExtensionFoundation
import Foundation
import Network
import OSLog
import Observation
import Swift
import XPC
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
public protocol AppExtension {
  associatedtype Configuration : ExtensionFoundation.AppExtensionConfiguration
  @preconcurrency @_Concurrency.MainActor var configuration: Self.Configuration { get }
  @preconcurrency @_Concurrency.MainActor init()
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
extension ExtensionFoundation.AppExtension {
  @preconcurrency @_Concurrency.MainActor public static func main() throws
}
@available(macOS 26.0, iOS 26.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct ConnectionHandler : ExtensionFoundation.AppExtensionConfiguration {
  @_Concurrency.MainActor @preconcurrency public init(onSessionRequest requestHandler: @escaping @Sendable (XPC.XPCListener.IncomingSessionRequest) -> XPC.XPCListener.IncomingSessionRequest.Decision)
  @_Concurrency.MainActor @preconcurrency public init(onConnection connectionHandler: @escaping @Sendable (Foundation.NSXPCConnection) -> Swift.Bool)
  nonisolated public func accept(connection: Foundation.NSXPCConnection) -> Swift.Bool
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, *)
extension ExtensionFoundation.AppExtensionPoint {
  @available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, *)
  final public class Monitor : @unchecked Swift.Sendable {
    public init()
    convenience public init(appExtensionPoint: ExtensionFoundation.AppExtensionPoint) async throws
    final public func addAppExtensionPoint(_ appExtensionPoint: ExtensionFoundation.AppExtensionPoint) async throws
    final public func removeAppExtensionPoint(_ appExtensionPoint: ExtensionFoundation.AppExtensionPoint) async throws
    final public var state: ExtensionFoundation.AppExtensionPoint.Monitor.State {
      get
    }
    final public var identities: [ExtensionFoundation.AppExtensionIdentity] {
      get
    }
    public struct State : Swift.Equatable, Swift.Sendable {
      public var identities: [ExtensionFoundation.AppExtensionIdentity] {
        get
      }
      public var unapprovedCount: Swift.Int {
        get
      }
      public var disabledCount: Swift.Int {
        get
      }
      public static func == (a: ExtensionFoundation.AppExtensionPoint.Monitor.State, b: ExtensionFoundation.AppExtensionPoint.Monitor.State) -> Swift.Bool
    }
    @objc deinit
  }
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, *)
extension ExtensionFoundation.AppExtensionPoint.Monitor : nonisolated Observation.Observable {
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, *)
public struct AppExtensionPoint : Swift.Sendable, Swift.Identifiable, Swift.Hashable, Swift.Equatable {
  public enum Error : Swift.Error {
    case unspecifiedAppExtensionPointName
    case hostMustBeApplicationOrAppExtension
    case hostMustHaveBundleIdentifier
    case hostMustDefineAppExtensionPoint(Swift.String)
    case invalidAppExtensionPoint
  }
  public protocol Attribute {
  }
  @_functionBuilder public struct Definition {
    public static func buildBlock<each T>(_ name: ExtensionFoundation.AppExtensionPoint.Name, _ attributes: repeat each T) -> ExtensionFoundation.AppExtensionPoint where repeat each T : ExtensionFoundation.AppExtensionPoint.Attribute
  }
  @_functionBuilder public struct Bind {
    public static func buildBlock(_ identifier: ExtensionFoundation.AppExtensionPoint.Identifier) -> ExtensionFoundation.AppExtensionPoint
  }
  public var id: Swift.String {
    get
  }
  public static func == (lhs: ExtensionFoundation.AppExtensionPoint, rhs: ExtensionFoundation.AppExtensionPoint) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public init(identifier: Swift.StaticString) throws
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, macOS 26.0, *)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, *)
public protocol ExtensionPointDefining {
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, *)
extension ExtensionFoundation.AppExtensionPoint : ExtensionFoundation.ExtensionPointDefining {
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, *)
extension ExtensionFoundation.AppExtensionPoint {
  public struct Name {
    public init(_ value: Swift.StaticString)
  }
  public struct Identifier {
    public init(_ value: Swift.StaticString)
    public init(host bundleIdentifier: Swift.StaticString, name: Swift.StaticString)
  }
  public struct Scope : ExtensionFoundation.AppExtensionPoint.Attribute {
    public enum Restriction {
      case application
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      case none
    }
    public init(restriction: ExtensionFoundation.AppExtensionPoint.Scope.Restriction = .application)
  }
  @available(macOS 26.0, iOS 26.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public struct UserInterface : ExtensionFoundation.AppExtensionPoint.Attribute {
    public let value: Swift.Bool
    public init(_ value: Swift.Bool = true)
  }
  @available(macOS 26.0, iOS 26.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  public struct EnhancedSecurity : ExtensionFoundation.AppExtensionPoint.Attribute {
    public init(_ value: Swift.Bool = true)
  }
}
@available(macOS 13.0, iOS 16.0, watchOS 9.0, tvOS 16.0, *)
@preconcurrency @_Concurrency.MainActor public protocol AppExtensionConfiguration : Swift.Sendable {
  nonisolated func accept(connection: Foundation.NSXPCConnection) -> Swift.Bool
}
@available(macOS 13.0, iOS 26.0, tvOS 26.0, watchOS 26.0, *)
public struct AppExtensionIdentity : Swift.Identifiable, Swift.Hashable, Swift.Sendable {
  public var id: Swift.String {
    get
  }
  public var extensionPointIdentifier: Swift.String {
    get
  }
  public var bundleIdentifier: Swift.String {
    get
  }
  public var localizedName: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: ExtensionFoundation.AppExtensionIdentity, rhs: ExtensionFoundation.AppExtensionIdentity) -> Swift.Bool
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, macOS 13.0, *)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS, introduced: 13.0, deprecated: 26.0, message: "Replaced with AppExtensionPoint.Monitor")
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension ExtensionFoundation.AppExtensionIdentity {
  public static func matching(appExtensionPointIDs: Swift.String...) throws -> ExtensionFoundation.AppExtensionIdentity.Identities
}
@available(macOS, introduced: 13.0, deprecated: 26.0, message: "Replaced with AppExtensionPoint.Monitor")
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension ExtensionFoundation.AppExtensionIdentity {
  public struct Identities : _Concurrency.AsyncSequence {
    public typealias Element = [ExtensionFoundation.AppExtensionIdentity]
    public struct AsyncIterator : _Concurrency.AsyncIteratorProtocol {
      #if compiler(>=5.3) && $NonescapableTypes
      public mutating func next() async -> [ExtensionFoundation.AppExtensionIdentity]?
      #endif
      @available(iOS 26.0, tvOS 26.0, watchOS 26.0, *)
      @available(visionOS, unavailable)
      @available(macOS, introduced: 13.0, deprecated: 26.0, message: "Replaced with AppExtensionPoint.Monitor")
      public typealias Element = [ExtensionFoundation.AppExtensionIdentity]
      @available(iOS 26.0, tvOS 26.0, watchOS 26.0, *)
      @available(visionOS, unavailable)
      @available(macOS, introduced: 15.0, deprecated: 26.0, message: "Replaced with AppExtensionPoint.Monitor")
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
    }
    public func makeAsyncIterator() -> ExtensionFoundation.AppExtensionIdentity.Identities.AsyncIterator
    @available(iOS 26.0, tvOS 26.0, watchOS 26.0, *)
    @available(visionOS, unavailable)
    @available(macOS, introduced: 15.0, deprecated: 26.0, message: "Replaced with AppExtensionPoint.Monitor")
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  }
}
@available(macOS, introduced: 13.0, deprecated: 26.0, message: "Replaced with AppExtensionPoint.Monitor")
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
extension ExtensionFoundation.AppExtensionIdentity {
  public struct Availability : Swift.CustomStringConvertible, Swift.Sendable {
    public init()
    public let enabledCount: Swift.Int
    public let disabledCount: Swift.Int
    public let unapprovedCount: Swift.Int
    public var totalCount: Swift.Int {
      get
    }
    public var description: Swift.String {
      get
    }
  }
  public static var availabilityUpdates: _Concurrency.AsyncStream<ExtensionFoundation.AppExtensionIdentity.Availability> {
    get
  }
}
@available(macOS 13.0, iOS 26.0, tvOS 26.0, watchOS 26.0, *)
public struct AppExtensionProcess {
  public init(configuration: ExtensionFoundation.AppExtensionProcess.Configuration) async throws
  public init(configuration: ExtensionFoundation.AppExtensionProcess.Configuration) throws
  public func makeXPCConnection() throws -> Foundation.NSXPCConnection
  @available(macOS 26.0, iOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public func makeXPCSession() throws -> XPC.XPCSession
  public func invalidate()
}
@available(macOS 13.0, iOS 26.0, tvOS 26.0, watchOS 26.0, *)
extension ExtensionFoundation.AppExtensionProcess {
  public struct Configuration {
    public var appExtensionIdentity: ExtensionFoundation.AppExtensionIdentity
    public var onInterruption: () -> Swift.Void
    public init(appExtensionIdentity: ExtensionFoundation.AppExtensionIdentity, onInterruption: @escaping () -> Swift.Void = {})
  }
}
