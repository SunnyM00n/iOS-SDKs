// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -library-level api -enable-upcoming-feature MemberImportVisibility -enable-experimental-feature DebugDescriptionMacro -user-module-version 706.46.1.1 -module-name CoreVideo -module-alias Module___CoreVideo=CoreVideo -module-alias Module____StringProcessing=_StringProcessing -module-alias Module____SwiftConcurrencyShims=_SwiftConcurrencyShims -module-alias Module____Concurrency=_Concurrency -module-alias Module___CoreGraphics=CoreGraphics -module-alias Module___IOSurface=IOSurface
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import Module___CoreGraphics
@_exported import Module___CoreVideo
import Foundation
import Module___IOSurface
import Swift
import Module____Concurrency
import Module____StringProcessing
import Module____SwiftConcurrencyShims
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
public protocol CVImageBufferRepresentable : Module___CoreVideo.CVBufferRepresentable, ~Copyable {
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
extension Module___CoreVideo.CVImageBufferRepresentable where Self : ~Copyable {
  public var encodedSize: CoreFoundation.CGSize {
    get
  }
  public var displaySize: CoreFoundation.CGSize {
    get
  }
  public var cleanRect: CoreFoundation.CGRect {
    get
  }
  public var originPosition: Module___CoreVideo.CVImageBufferOriginPosition {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public var colorSpace: Module___CoreGraphics.CGColorSpace? {
    get
  }
  #endif
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
public enum CVImageBufferOriginPosition : Swift.Hashable, Swift.Sendable {
  case topLeft
  case bottomLeft
  public static func == (a: Module___CoreVideo.CVImageBufferOriginPosition, b: Module___CoreVideo.CVImageBufferOriginPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
public struct CVImageSize : Swift.Hashable, Swift.Sendable {
  public var width: Swift.Int
  public var height: Swift.Int
  public init(width: Swift.Int, height: Swift.Int)
  public static let zero: Module___CoreVideo.CVImageSize
  public static func == (a: Module___CoreVideo.CVImageSize, b: Module___CoreVideo.CVImageSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
extension Module___CoreVideo.CVBuffer {
  @available(*, deprecated, renamed: "CVImageBufferOriginPosition")
  public typealias OriginPosition = Module___CoreVideo.CVImageBufferOriginPosition
  @available(*, deprecated, renamed: "CVImageSize")
  public typealias Size = Module___CoreVideo.CVImageSize
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
extension CoreFoundation.CGSize {
  public init(_ size: Module___CoreVideo.CVImageSize)
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
extension Module___CoreVideo.CVImageSize {
  public init(_ size: CoreFoundation.CGSize, rounded rule: Swift.FloatingPointRoundingRule = .down)
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
extension Module___CoreVideo.CVMutablePixelBuffer {
  final public class Pool : Swift.Sendable {
    public struct Configuration : Swift.Equatable, Swift.Sendable {
      public var ageOutDuration: Foundation.TimeInterval
      public var minimumBufferCount: Swift.Int
      public init(ageOutDuration: Foundation.TimeInterval = 1, minimumBufferCount: Swift.Int = 0)
      public static func == (a: Module___CoreVideo.CVMutablePixelBuffer.Pool.Configuration, b: Module___CoreVideo.CVMutablePixelBuffer.Pool.Configuration) -> Swift.Bool
    }
    public struct AllocationAttributes : Swift.Equatable, Swift.Sendable {
      public var allocationThreshold: Swift.Int?
      #if compiler(>=5.3) && $NonescapableTypes
      public init(allocationThreshold: Swift.Int? = nil)
      #endif
      public static func == (a: Module___CoreVideo.CVMutablePixelBuffer.Pool.AllocationAttributes, b: Module___CoreVideo.CVMutablePixelBuffer.Pool.AllocationAttributes) -> Swift.Bool
    }
    #if compiler(>=5.3) && $SendingArgsAndResults
    public init(unsafePool: sending Module___CoreVideo.CVPixelBufferPool)
    #else
    public init(unsafePool: __owned Module___CoreVideo.CVPixelBufferPool)
    #endif
    public init(pixelBufferAttributes attributes: Module___CoreVideo.CVPixelBufferCreationAttributes, configuration: Module___CoreVideo.CVMutablePixelBuffer.Pool.Configuration = .init()) throws
    final public var pixelBufferAttributes: Module___CoreVideo.CVPixelBufferCreationAttributes {
      get
    }
    final public func makeMutablePixelBuffer(_ attributes: Module___CoreVideo.CVMutablePixelBuffer.Pool.AllocationAttributes = .init()) throws -> Module___CoreVideo.CVMutablePixelBuffer
    final public func flush(agedOutOnly: Swift.Bool = true)
    @objc deinit
  }
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
public protocol CVBufferRepresentable<Buffer> : ~Copyable {
  associatedtype Buffer : Module___CoreVideo.CVBuffer
  #if compiler(>=5.3) && $SendingArgsAndResults
  @inlinable func withUnsafeBuffer<R>(_ body: (Self.Buffer) throws -> sending R) rethrows -> sending R where R : ~Copyable
  #else
  @inlinable func withUnsafeBuffer<R>(_ body: (Self.Buffer) throws -> R) rethrows -> R where R : ~Copyable
  #endif
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
extension Module___CoreVideo.CVBufferRepresentable where Self : ~Copyable {
  @inlinable @inline(__always) internal var unsafeBuffer: Self.Buffer {
    get {
		 
		 
		self.withUnsafeBuffer(\.self)
	}
  }
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
@frozen public struct CVError : Swift.Error, Swift.RawRepresentable, Swift.Hashable, Swift.CustomStringConvertible {
  public var rawValue: Module___CoreVideo.CVReturn
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Module___CoreVideo.CVReturn)
  #endif
  public static func check(_ status: Module___CoreVideo.CVReturn) throws(Module___CoreVideo.CVError)
  public var description: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public var errorDescription: Swift.String? {
    get
  }
  #endif
  public static let internalError: Module___CoreVideo.CVError
  public static let invalidArgument: Module___CoreVideo.CVError
  public static let allocationFailed: Module___CoreVideo.CVError
  public static let unsupported: Module___CoreVideo.CVError
  public static let invalidPixelFormat: Module___CoreVideo.CVError
  public static let invalidSize: Module___CoreVideo.CVError
  public static let invalidPixelBufferAttributes: Module___CoreVideo.CVError
  public static let pixelBufferNotMetalCompatible: Module___CoreVideo.CVError
  public static let wouldExceedAllocationThreshold: Module___CoreVideo.CVError
  public static let poolAllocationFailed: Module___CoreVideo.CVError
  public static let invalidPoolAttributes: Module___CoreVideo.CVError
  public static let retry: Module___CoreVideo.CVError
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias RawValue = Module___CoreVideo.CVReturn
}
extension Module___CoreVideo.CVTime {
  @available(macOS 10.4, iOS 4.0, tvOS 9.0, watchOS 4.0, visionOS 1.0, *)
  @backDeployed(before: macOS 16.0, iOS 19.0, tvOS 19.0, watchOS 12.0, visionOS 3.0)
  public init(timeValue: Swift.Int64, timeScale: Swift.Int32) {
		precondition(timeValue == 0 || timeScale > 0)
		self.init(timeValue: timeValue, timeScale: timeScale, flags: 0)
	}
  @available(macOS 10.4, iOS 4.0, tvOS 9.0, watchOS 4.0, visionOS 1.0, *)
  @backDeployed(before: macOS 16.0, iOS 19.0, tvOS 19.0, watchOS 12.0, visionOS 3.0)
  public var flagOptions: Module___CoreVideo.CVTimeFlags {
    get { .init(rawValue: self.flags) }
    set { self.flags = newValue.rawValue }
  }
  @available(macOS 10.4, iOS 4.0, tvOS 9.0, watchOS 4.0, visionOS 1.0, *)
  @backDeployed(before: macOS 16.0, iOS 19.0, tvOS 19.0, watchOS 12.0, visionOS 3.0)
  public static var zero: Module___CoreVideo.CVTime {
    get { kCVZeroTime }
  }
  @available(macOS 10.4, iOS 4.0, tvOS 9.0, watchOS 4.0, visionOS 1.0, *)
  @backDeployed(before: macOS 16.0, iOS 19.0, tvOS 19.0, watchOS 12.0, visionOS 3.0)
  public static var indefinite: Module___CoreVideo.CVTime {
    get { kCVIndefiniteTime }
  }
}
extension Module___CoreVideo.CVSMPTETime {
  @available(macOS 10.4, iOS 4.0, tvOS 9.0, watchOS 4.0, visionOS 1.0, *)
  @backDeployed(before: macOS 16.0, iOS 19.0, tvOS 19.0, watchOS 12.0, visionOS 3.0)
  public init(subframes: Swift.Int16, subframeDivisor: Swift.Int16, counter: Swift.UInt32, type: Module___CoreVideo.CVSMPTETimeType, flags: Module___CoreVideo.CVSMPTETimeFlags = .valid, hours: Swift.Int16, minutes: Swift.Int16, seconds: Swift.Int16, frames: Swift.Int16) {
		self.init(subframes: subframes, subframeDivisor: subframeDivisor, counter: counter, type: type.rawValue, flags: flags.rawValue, hours: hours, minutes: minutes, seconds: seconds, frames: frames)
	}
  @available(macOS 10.4, iOS 4.0, tvOS 9.0, watchOS 4.0, visionOS 1.0, *)
  @backDeployed(before: macOS 16.0, iOS 19.0, tvOS 19.0, watchOS 12.0, visionOS 3.0)
  public var typeOptions: Module___CoreVideo.CVSMPTETimeType {
    get { .init(rawValue: self.type)! }
    set { self.type = newValue.rawValue }
  }
  @available(macOS 10.4, iOS 4.0, tvOS 9.0, watchOS 4.0, visionOS 1.0, *)
  @backDeployed(before: macOS 16.0, iOS 19.0, tvOS 19.0, watchOS 12.0, visionOS 3.0)
  public var flagOptions: Module___CoreVideo.CVSMPTETimeFlags {
    get { .init(rawValue: self.flags) }
    set { self.flags = newValue.rawValue }
  }
}
extension Module___CoreVideo.CVTimeStamp {
  #if compiler(>=5.3) && $NonescapableTypes
  @available(macOS 10.4, iOS 4.0, tvOS 9.0, watchOS 4.0, visionOS 1.0, *)
  @backDeployed(before: macOS 16.0, iOS 19.0, tvOS 19.0, watchOS 12.0, visionOS 3.0)
  public init(videoTime: Module___CoreVideo.CVTime? = nil, hostTime: Swift.UInt64? = nil, rateScaler: Swift.Double? = nil, videoRefreshPeriod: Swift.Int64? = nil, smpteTime: Module___CoreVideo.CVSMPTETime? = nil, topField: Swift.Bool = false, bottomField: Swift.Bool = false) {
		self.init(version: 0, videoTimeScale: 0, videoTime: 0, hostTime: 0, rateScalar: 0, videoRefreshPeriod: 0, smpteTime: .init(subframes: 0, subframeDivisor: 0, counter: 0, type: 0, flags: 0, hours: 0, minutes: 0, seconds: 0, frames: 0), flags: 0, reserved: 0)
		var flags: CVTimeStampFlags = []
		if let videoTime {
			self.videoTime = videoTime.timeValue
			self.videoTimeScale = videoTime.timeScale
			flags.insert(.videoTimeValid)
		}
		if let hostTime {
			self.hostTime = hostTime
			flags.insert(.hostTimeValid)
		}
		if let rateScaler {
			self.rateScalar = rateScaler
			flags.insert(.rateScalarValid)
		}
		if let videoRefreshPeriod {
			self.videoRefreshPeriod = videoRefreshPeriod
			flags.insert(.videoRefreshPeriodValid)
		}
		if let smpteTime {
			self.smpteTime = smpteTime
			flags.insert(.smpteTimeValid)
		}
		if topField {
			flags.insert(.topField)
		}
		if bottomField {
			flags.insert(.bottomField)
		}
		self.flags = flags.rawValue
	}
  #endif
  @available(macOS 10.4, iOS 4.0, tvOS 9.0, watchOS 4.0, visionOS 1.0, *)
  @backDeployed(before: macOS 16.0, iOS 19.0, tvOS 19.0, watchOS 12.0, visionOS 3.0)
  public var flagOptions: Module___CoreVideo.CVTimeStampFlags {
    get { .init(rawValue: self.flags) }
    set { self.flags = newValue.rawValue }
  }
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
final public class CVReadOnlyPixelBuffer : Module___CoreVideo.CVPixelBufferRepresentable, Swift.Sendable {
  public init(_ mutableBuffer: consuming Module___CoreVideo.CVMutablePixelBuffer)
  #if compiler(>=5.3) && $SendingArgsAndResults
  public init(unsafeBuffer: sending Module___CoreVideo.CVPixelBuffer)
  #else
  public init(unsafeBuffer: __owned Module___CoreVideo.CVPixelBuffer)
  #endif
  #if compiler(>=5.3) && $SendingArgsAndResults
  final public func withUnsafeBuffer<R>(_ body: (Module___CoreVideo.CVPixelBuffer) throws -> sending R) rethrows -> sending R where R : ~Copyable
  #else
  final public func withUnsafeBuffer<R>(_ body: (Module___CoreVideo.CVPixelBuffer) throws -> R) rethrows -> R where R : ~Copyable
  #endif
  #if compiler(>=5.3) && $SendingArgsAndResults
  @_disfavoredOverload final public func withUnsafeBuffer<R>(_ body: (Module___CoreVideo.CVPixelBuffer) throws -> sending R) rethrows -> sending R
  #else
  @_disfavoredOverload final public func withUnsafeBuffer<R>(_ body: (Module___CoreVideo.CVPixelBuffer) throws -> R) rethrows -> R
  #endif
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias Buffer = Module___CoreVideo.CVPixelBuffer
  @objc deinit
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
public struct CVPixelFormatType : Swift.RawRepresentable, Swift.Sendable, Swift.Hashable {
  public var rawValue: Darwin.OSType
  public init(rawValue: Darwin.OSType)
  public var isCompressionAvailable: Swift.Bool {
    get
  }
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias RawValue = Darwin.OSType
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
public struct CVPixelFormatDescription : Swift.Sendable, Swift.Equatable {
  @_hasMissingDesignatedInitializers final public class Registry : Swift.Sendable {
    public static let shared: Module___CoreVideo.CVPixelFormatDescription.Registry
    final public func register(_ formatDescription: Module___CoreVideo.CVPixelFormatDescription)
    final public var formatDescriptions: [Module___CoreVideo.CVPixelFormatDescription] {
      get
    }
    #if compiler(>=5.3) && $NonescapableTypes
    final public subscript(pixelFormatType: Module___CoreVideo.CVPixelFormatType) -> Module___CoreVideo.CVPixelFormatDescription? {
      get
    }
    #endif
    @objc deinit
  }
  public struct Dimensions : Swift.Hashable, Swift.Sendable {
    public var horizontal: Swift.Int
    public var vertical: Swift.Int
    public init(horizontal: Swift.Int, vertical: Swift.Int)
    public static func == (a: Module___CoreVideo.CVPixelFormatDescription.Dimensions, b: Module___CoreVideo.CVPixelFormatDescription.Dimensions) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Components : Swift.OptionSet, Swift.Hashable, Swift.Sendable {
    public var rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let rgb: Module___CoreVideo.CVPixelFormatDescription.Components
    public static let yCbCr: Module___CoreVideo.CVPixelFormatDescription.Components
    public static let grayscale: Module___CoreVideo.CVPixelFormatDescription.Components
    public static let alpha: Module___CoreVideo.CVPixelFormatDescription.Components
    public static let senselArray: Module___CoreVideo.CVPixelFormatDescription.Components
    @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias ArrayLiteralElement = Module___CoreVideo.CVPixelFormatDescription.Components
    @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias Element = Module___CoreVideo.CVPixelFormatDescription.Components
    @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias RawValue = Swift.Int
  }
  public struct Compatibility : Swift.OptionSet, Swift.Hashable, Swift.Sendable {
    public var rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let metalTexture: Module___CoreVideo.CVPixelFormatDescription.Compatibility
    public static let cgBitmapContext: Module___CoreVideo.CVPixelFormatDescription.Compatibility
    public static let cgImage: Module___CoreVideo.CVPixelFormatDescription.Compatibility
    public static let ioSurfaceCoreAnimation: Module___CoreVideo.CVPixelFormatDescription.Compatibility
    @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias ArrayLiteralElement = Module___CoreVideo.CVPixelFormatDescription.Compatibility
    @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias Element = Module___CoreVideo.CVPixelFormatDescription.Compatibility
    @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias RawValue = Swift.Int
  }
  public enum ComponentRange : Swift.Hashable, Swift.Sendable {
    case video
    case full
    case wide
    public static func == (a: Module___CoreVideo.CVPixelFormatDescription.ComponentRange, b: Module___CoreVideo.CVPixelFormatDescription.ComponentRange) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct PixelLayout : Swift.Sendable, Swift.Equatable {
    public var blockSize: Module___CoreVideo.CVImageSize
    public var bitsPerBlock: Swift.Int
    public var bitsPerComponent: Swift.Int?
    public var blockAlignment: Module___CoreVideo.CVPixelFormatDescription.Dimensions
    public var subsampling: Module___CoreVideo.CVPixelFormatDescription.Dimensions
    public var blackBlock: Foundation.Data?
    public var fillExtendedPixels: (@Sendable (inout Module___CoreVideo.CVMutablePixelBuffer) -> Swift.Void)?
    public var cgBitmapInfo: Module___CoreGraphics.CGBitmapInfo?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(blockSize: Module___CoreVideo.CVImageSize = .init(width: 1, height: 1), bitsPerBlock: Swift.Int, bitsPerComponent: Swift.Int? = nil, blockAlignment: Module___CoreVideo.CVPixelFormatDescription.Dimensions = .init(horizontal: 1, vertical: 1), subsampling: Module___CoreVideo.CVPixelFormatDescription.Dimensions = .init(horizontal: 1, vertical: 1), blackBlock: Foundation.Data? = nil, fillExtendedPixels: (@Sendable (inout Module___CoreVideo.CVMutablePixelBuffer) -> Swift.Void)? = nil, cgBitmapInfo: Module___CoreGraphics.CGBitmapInfo? = nil)
    #endif
    public static func == (lhs: Module___CoreVideo.CVPixelFormatDescription.PixelLayout, rhs: Module___CoreVideo.CVPixelFormatDescription.PixelLayout) -> Swift.Bool
  }
  public enum PlaneConfiguration : Swift.Sendable, Swift.Equatable {
    case nonPlanar(Module___CoreVideo.CVPixelFormatDescription.PixelLayout)
    case planar([Module___CoreVideo.CVPixelFormatDescription.PixelLayout])
    public static func == (a: Module___CoreVideo.CVPixelFormatDescription.PlaneConfiguration, b: Module___CoreVideo.CVPixelFormatDescription.PlaneConfiguration) -> Swift.Bool
  }
  public var pixelFormatType: Module___CoreVideo.CVPixelFormatType
  public var name: Swift.String
  public var components: Module___CoreVideo.CVPixelFormatDescription.Components
  public var componentRange: Module___CoreVideo.CVPixelFormatDescription.ComponentRange?
  public var planeConfiguration: Module___CoreVideo.CVPixelFormatDescription.PlaneConfiguration
  #if compiler(>=5.3) && $NonescapableTypes
  public init(pixelFormatType: Module___CoreVideo.CVPixelFormatType, name: Swift.String, components: Module___CoreVideo.CVPixelFormatDescription.Components, componentRange: Module___CoreVideo.CVPixelFormatDescription.ComponentRange? = nil, planeConfiguration: Module___CoreVideo.CVPixelFormatDescription.PlaneConfiguration)
  #endif
  public static func == (a: Module___CoreVideo.CVPixelFormatDescription, b: Module___CoreVideo.CVPixelFormatDescription) -> Swift.Bool
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
public struct CVMutablePixelBuffer : ~Swift.Copyable, Swift.Sendable, Module___CoreVideo.CVPixelBufferRepresentable {
  #if compiler(>=5.3) && $SendingArgsAndResults
  public init(unsafeBuffer: sending Module___CoreVideo.CVPixelBuffer)
  #else
  public init(unsafeBuffer: __owned Module___CoreVideo.CVPixelBuffer)
  #endif
  public init(_ attributes: Module___CoreVideo.CVPixelBufferCreationAttributes) throws
  public init(unsafeBacking ioSurface: Module___IOSurface.IOSurface, matching attributes: Module___CoreVideo.CVPixelBufferCreationAttributes) throws
  #if compiler(>=5.3) && $SendingArgsAndResults
  public func withUnsafeBuffer<R>(_ body: (Module___CoreVideo.CVPixelBuffer) throws -> sending R) rethrows -> sending R where R : ~Copyable
  #else
  public func withUnsafeBuffer<R>(_ body: (Module___CoreVideo.CVPixelBuffer) throws -> R) rethrows -> R where R : ~Copyable
  #endif
  #if compiler(>=5.3) && $SendingArgsAndResults
  @_disfavoredOverload public func withUnsafeBuffer<R>(_ body: (Module___CoreVideo.CVPixelBuffer) throws -> sending R) rethrows -> sending R
  #else
  @_disfavoredOverload public func withUnsafeBuffer<R>(_ body: (Module___CoreVideo.CVPixelBuffer) throws -> R) rethrows -> R
  #endif
  #if compiler(>=5.3) && $SendingArgsAndResults
  public mutating func accessUnsafeMutableRawPlaneBytes<R>(_ block: ([(properties: Module___CoreVideo.CVPixelBufferPlaneProperties, bytes: Swift.UnsafeMutableRawBufferPointer)]) throws -> sending R) rethrows -> sending R
  #else
  public mutating func accessUnsafeMutableRawPlaneBytes<R>(_ block: ([(properties: Module___CoreVideo.CVPixelBufferPlaneProperties, bytes: Swift.UnsafeMutableRawBufferPointer)]) throws -> R) rethrows -> R
  #endif
  @discardableResult
  public mutating func fillExtendedPixels() -> Swift.Bool
  @available(iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, *)
  public typealias Buffer = Module___CoreVideo.CVPixelBuffer
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
public struct CVPixelBufferCreationAttributes : Swift.Sendable, Swift.Equatable {
  public enum Backing : Swift.Sendable, Swift.Equatable {
    case memory
    case ioSurface
    case ioSurfaceWithProperties([Swift.String : any Swift.Sendable])
    public static func == (lhs: Module___CoreVideo.CVPixelBufferCreationAttributes.Backing, rhs: Module___CoreVideo.CVPixelBufferCreationAttributes.Backing) -> Swift.Bool
  }
  public var pixelFormatType: Module___CoreVideo.CVPixelFormatType
  public var size: Module___CoreVideo.CVImageSize
  public var backing: Module___CoreVideo.CVPixelBufferCreationAttributes.Backing
  public var compatibility: Module___CoreVideo.CVPixelFormatDescription.Compatibility
  public var planeAlignment: Swift.Int?
  public var bytesPerRowAlignment: Swift.Int?
  public var extendedPixels: Module___CoreVideo.CVPixelBufferPadding?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(pixelFormatType: Module___CoreVideo.CVPixelFormatType, size: Module___CoreVideo.CVImageSize, compatibility: Module___CoreVideo.CVPixelFormatDescription.Compatibility = [], bytesPerRowAlignment: Swift.Int? = nil, planeAlignment: Swift.Int? = nil, extendedPixels: Module___CoreVideo.CVPixelBufferPadding? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(_ attributes: Module___CoreVideo.CVPixelBufferAttributes)
  #endif
  public static func == (a: Module___CoreVideo.CVPixelBufferCreationAttributes, b: Module___CoreVideo.CVPixelBufferCreationAttributes) -> Swift.Bool
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
@dynamicMemberLookup public struct CVPixelBufferAttributes : Swift.Sendable {
  public var rawAttributes: [Swift.String : any Swift.Sendable] {
    get
  }
  public init(rawAttributes: [Swift.String : any Swift.Sendable])
  public init(_ attributes: Module___CoreVideo.CVPixelBufferCreationAttributes)
  #if compiler(>=5.3) && $NonescapableTypes
  public init(pixelFormatTypes: [Module___CoreVideo.CVPixelFormatType]? = nil, size: Module___CoreVideo.CVImageSize? = nil, compatibility: Module___CoreVideo.CVPixelFormatDescription.Compatibility = [], bytesPerRowAlignment: Swift.Int? = nil, planeAlignment: Swift.Int? = nil, extendedPixels: Module___CoreVideo.CVPixelBufferPadding? = nil)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(merging values: [Module___CoreVideo.CVPixelBufferAttributes])
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var pixelFormatTypes: [Module___CoreVideo.CVPixelFormatType]? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(dynamicMember keyPath: Swift.WritableKeyPath<Module___CoreVideo.CVPixelBufferCreationAttributes, Module___CoreVideo.CVPixelFormatType>) -> Module___CoreVideo.CVPixelFormatType? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(dynamicMember keyPath: Swift.WritableKeyPath<Module___CoreVideo.CVPixelBufferCreationAttributes, Module___CoreVideo.CVImageSize>) -> Module___CoreVideo.CVImageSize? {
    get
    set
  }
  #endif
  public subscript(dynamicMember keyPath: Swift.WritableKeyPath<Module___CoreVideo.CVPixelBufferCreationAttributes, Module___CoreVideo.CVPixelBufferCreationAttributes.Backing>) -> Module___CoreVideo.CVPixelBufferCreationAttributes.Backing {
    get
    set
  }
  public subscript(dynamicMember keyPath: Swift.WritableKeyPath<Module___CoreVideo.CVPixelBufferCreationAttributes, Module___CoreVideo.CVPixelFormatDescription.Compatibility>) -> Module___CoreVideo.CVPixelFormatDescription.Compatibility {
    get
    set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(dynamicMember keyPath: Swift.WritableKeyPath<Module___CoreVideo.CVPixelBufferCreationAttributes, Module___CoreVideo.CVPixelBufferPadding?>) -> Module___CoreVideo.CVPixelBufferPadding? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(dynamicMember keyPath: Swift.WritableKeyPath<Module___CoreVideo.CVPixelBufferCreationAttributes, Module___CoreVideo.CVPixelFormatDescription?>) -> Module___CoreVideo.CVPixelFormatDescription? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(dynamicMember keyPath: Swift.WritableKeyPath<Module___CoreVideo.CVPixelBufferCreationAttributes, Swift.Int?>) -> Swift.Int? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public subscript(dynamicMember keyPath: Swift.WritableKeyPath<Module___CoreVideo.CVPixelBufferCreationAttributes, Swift.Bool>) -> Swift.Bool? {
    get
    set
  }
  #endif
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
extension Module___CoreVideo.CVBuffer {
  @available(*, deprecated, renamed: "CVPixelBufferCreationAttributes")
  public struct CreationAttributes : Swift.Sendable, Swift.Equatable {
    public enum Backing : Swift.Sendable, Swift.Equatable {
      case memory
      case ioSurface
      case ioSurfaceWithProperties([Swift.String : any Swift.Sendable])
      public static func == (lhs: Module___CoreVideo.CVBuffer.CreationAttributes.Backing, rhs: Module___CoreVideo.CVBuffer.CreationAttributes.Backing) -> Swift.Bool
    }
    public var pixelFormatType: Module___CoreVideo.CVPixelFormatType
    public var size: Module___CoreVideo.CVImageSize
    public var backing: Module___CoreVideo.CVBuffer.CreationAttributes.Backing
    public var compatibility: Module___CoreVideo.CVPixelFormatDescription.Compatibility
    public var planeAlignment: Swift.Int?
    public var bytesPerRowAlignment: Swift.Int?
    public var extendedPixels: Module___CoreVideo.CVPixelBufferPadding?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(pixelFormatType: Module___CoreVideo.CVPixelFormatType, size: Module___CoreVideo.CVImageSize, compatibility: Module___CoreVideo.CVPixelFormatDescription.Compatibility = [], bytesPerRowAlignment: Swift.Int? = nil, planeAlignment: Swift.Int? = nil, extendedPixels: Module___CoreVideo.CVPixelBufferPadding? = nil)
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public init?(_ attributes: Module___CoreVideo.CVBuffer.Attributes)
    #endif
    public static func == (a: Module___CoreVideo.CVBuffer.CreationAttributes, b: Module___CoreVideo.CVBuffer.CreationAttributes) -> Swift.Bool
  }
  @available(*, deprecated, renamed: "CVPixelBufferAttributes")
  @dynamicMemberLookup public struct Attributes : Swift.Sendable {
    public var rawAttributes: [Swift.String : any Swift.Sendable] {
      get
    }
    public init(rawAttributes: [Swift.String : any Swift.Sendable])
    public init(_ attributes: Module___CoreVideo.CVBuffer.CreationAttributes)
    #if compiler(>=5.3) && $NonescapableTypes
    public init(pixelFormatTypes: [Module___CoreVideo.CVPixelFormatType]? = nil, size: Module___CoreVideo.CVImageSize? = nil, compatibility: Module___CoreVideo.CVPixelFormatDescription.Compatibility = [], bytesPerRowAlignment: Swift.Int? = nil, planeAlignment: Swift.Int? = nil, extendedPixels: Module___CoreVideo.CVPixelBufferPadding? = nil)
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public init?(merging values: [Module___CoreVideo.CVBuffer.Attributes])
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public var pixelFormatTypes: [Module___CoreVideo.CVPixelFormatType]? {
      get
      set
    }
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public subscript(dynamicMember keyPath: Swift.WritableKeyPath<Module___CoreVideo.CVBuffer.CreationAttributes, Module___CoreVideo.CVPixelFormatType>) -> Module___CoreVideo.CVPixelFormatType? {
      get
      set
    }
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public subscript(dynamicMember keyPath: Swift.WritableKeyPath<Module___CoreVideo.CVBuffer.CreationAttributes, Module___CoreVideo.CVImageSize>) -> Module___CoreVideo.CVImageSize? {
      get
      set
    }
    #endif
    public subscript(dynamicMember keyPath: Swift.WritableKeyPath<Module___CoreVideo.CVBuffer.CreationAttributes, Module___CoreVideo.CVBuffer.CreationAttributes.Backing>) -> Module___CoreVideo.CVBuffer.CreationAttributes.Backing {
      get
      set
    }
    public subscript(dynamicMember keyPath: Swift.WritableKeyPath<Module___CoreVideo.CVBuffer.CreationAttributes, Module___CoreVideo.CVPixelFormatDescription.Compatibility>) -> Module___CoreVideo.CVPixelFormatDescription.Compatibility {
      get
      set
    }
    #if compiler(>=5.3) && $NonescapableTypes
    public subscript(dynamicMember keyPath: Swift.WritableKeyPath<Module___CoreVideo.CVBuffer.CreationAttributes, Module___CoreVideo.CVPixelBufferPadding?>) -> Module___CoreVideo.CVPixelBufferPadding? {
      get
      set
    }
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public subscript(dynamicMember keyPath: Swift.WritableKeyPath<Module___CoreVideo.CVBuffer.CreationAttributes, Module___CoreVideo.CVPixelFormatDescription?>) -> Module___CoreVideo.CVPixelFormatDescription? {
      get
      set
    }
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public subscript(dynamicMember keyPath: Swift.WritableKeyPath<Module___CoreVideo.CVBuffer.CreationAttributes, Swift.Int?>) -> Swift.Int? {
      get
      set
    }
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public subscript(dynamicMember keyPath: Swift.WritableKeyPath<Module___CoreVideo.CVBuffer.CreationAttributes, Swift.Bool>) -> Swift.Bool? {
      get
      set
    }
    #endif
  }
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
public protocol CVPixelBufferRepresentable : Module___CoreVideo.CVImageBufferRepresentable, ~Copyable {
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
@frozen public struct CVPixelBufferPlaneProperties : Swift.Hashable, Swift.Sendable {
  public var size: Module___CoreVideo.CVImageSize
  public var bytesPerRow: Swift.Int
  public init(size: Module___CoreVideo.CVImageSize, bytesPerRow: Swift.Int)
  public static func == (a: Module___CoreVideo.CVPixelBufferPlaneProperties, b: Module___CoreVideo.CVPixelBufferPlaneProperties) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
@frozen public struct CVPixelBufferPadding : Swift.Hashable, Swift.Sendable {
  public var left: Swift.Int
  public var right: Swift.Int
  public var top: Swift.Int
  public var bottom: Swift.Int
  public init(left: Swift.Int = 0, right: Swift.Int = 0, top: Swift.Int = 0, bottom: Swift.Int = 0)
  public static let zero: Module___CoreVideo.CVPixelBufferPadding
  public static func == (a: Module___CoreVideo.CVPixelBufferPadding, b: Module___CoreVideo.CVPixelBufferPadding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
extension Module___CoreVideo.CVPixelBufferRepresentable where Self : ~Copyable {
  public var creationAttributes: Module___CoreVideo.CVPixelBufferCreationAttributes {
    get
  }
  public var pixelFormatType: Module___CoreVideo.CVPixelFormatType {
    get
  }
  public var size: Module___CoreVideo.CVImageSize {
    get
  }
  public var extendedPixels: Module___CoreVideo.CVPixelBufferPadding {
    get
  }
  public var planeCount: Swift.Int {
    get
  }
  public var isPlanar: Swift.Bool {
    get
  }
  public var planeProperties: [Module___CoreVideo.CVPixelBufferPlaneProperties] {
    get
  }
  #if compiler(>=5.3) && $SendingArgsAndResults
  public func accessUnsafeRawPlaneBytes<R>(_ block: ([(properties: Module___CoreVideo.CVPixelBufferPlaneProperties, bytes: Swift.UnsafeRawBufferPointer)]) throws -> sending R) rethrows -> sending R
  #else
  public func accessUnsafeRawPlaneBytes<R>(_ block: ([(properties: Module___CoreVideo.CVPixelBufferPlaneProperties, bytes: Swift.UnsafeRawBufferPointer)]) throws -> R) rethrows -> R
  #endif
  public func isCompatibleWith(_ attributes: Module___CoreVideo.CVPixelBufferCreationAttributes) -> Swift.Bool
  public func isCompatibleWith(_ attributes: Module___CoreVideo.CVPixelBufferAttributes) -> Swift.Bool
  #if compiler(>=5.3) && $NonescapableTypes
  #if compiler(>=5.3) && $SendingArgsAndResults
  public func withUnsafeBackingIOSurfaceIfPresent<R>(_ block: (Module___IOSurface.IOSurface) throws -> sending R) rethrows -> sending R?
  #else
  public func withUnsafeBackingIOSurfaceIfPresent<R>(_ block: (Module___IOSurface.IOSurface) throws -> R) rethrows -> R?
  #endif
  #endif
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
extension Module___CoreVideo.CVBuffer {
  @available(*, deprecated, renamed: "CVPixelBufferPlaneProperties")
  public typealias PlaneProperties = Module___CoreVideo.CVPixelBufferPlaneProperties
  @available(*, deprecated, renamed: "CVPixelBufferPadding")
  public typealias Padding = Module___CoreVideo.CVPixelBufferPadding
}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
extension Module___CoreVideo.CVError : Swift.BitwiseCopyable {}
@available(macOS 26.0, iOS 26.0, tvOS 26.0, watchOS 26.0, visionOS 26.0, *)
extension Module___CoreVideo.CVPixelBufferPadding : Swift.BitwiseCopyable {}
