// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -library-level api -enable-upcoming-feature InternalImportsByDefault -enable-upcoming-feature InternalImportsByDefault -enable-upcoming-feature MemberImportVisibility -enable-upcoming-feature ExistentialAny -enable-experimental-feature DebugDescriptionMacro -user-module-version 3.0.52 -module-name ManagedAppDistribution
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
public import Foundation
public import Swift
public import _Concurrency
public import _StringProcessing
public import _SwiftConcurrencyShims
@available(iOS 17.2, visionOS 2.4, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct ManagedApp : Swift.Sendable {
  public let platform: ManagedAppDistribution.Platform
  public let fileSize: Foundation.Measurement<Foundation.UnitInformationStorage>?
  public let metadataLanguage: Foundation.Locale.Language?
  public let name: Swift.String
  public let subtitle: Swift.String?
  public let seller: Swift.String?
  public let genres: [Swift.String]
  public let description: Swift.String?
  public let languages: [Foundation.Locale.Language]
  public let requirements: Swift.String?
  public let version: Swift.String?
  public let releaseDate: Foundation.Date?
  public let releaseNotes: Swift.String?
  #if compiler(>=5.3) && $NonescapableTypes
  public func iconURL(fitting size: CoreFoundation.CGSize) -> Foundation.URL?
  #endif
  public func screenshotURLs(fitting size: CoreFoundation.CGSize) -> [Foundation.URL]
  public let contentRating: Swift.String?
  public let developerWebsite: Foundation.URL?
  public let privacyPolicy: Foundation.URL?
  #if compiler(>=5.3) && $NonescapableTypes
  public var licenseAgreement: Foundation.URL? {
    get
  }
  #endif
  public let copyright: Swift.String?
}
@available(iOS 17.2, visionOS 2.4, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ManagedAppDistribution.ManagedApp : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  @available(iOS 17.2, visionOS 2.4, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public typealias ID = Swift.String
}
@available(iOS 17.4, visionOS 2.4, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ManagedAppDistribution.ManagedApp : Swift.Hashable {
  @available(iOS 17.4, visionOS 2.4, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public static func == (lhs: ManagedAppDistribution.ManagedApp, rhs: ManagedAppDistribution.ManagedApp) -> Swift.Bool
  @available(iOS 17.4, visionOS 2.4, *)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.2, visionOS 2.4, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct Platform : Swift.Hashable, Swift.Sendable, Swift.CustomStringConvertible {
  public static var macOS: ManagedAppDistribution.Platform {
    get
  }
  public static var iOS: ManagedAppDistribution.Platform {
    get
  }
  public static var visionOS: ManagedAppDistribution.Platform {
    get
  }
  public var description: Swift.String {
    get
  }
  public static func == (a: ManagedAppDistribution.Platform, b: ManagedAppDistribution.Platform) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.2, visionOS 2.4, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ManagedAppDistribution.ManagedApp {
  public struct Platform : Swift.Hashable, Swift.Sendable, Swift.CustomStringConvertible {
    public static var macOS: ManagedAppDistribution.ManagedApp.Platform {
      get
    }
    public static var iOS: ManagedAppDistribution.ManagedApp.Platform {
      get
    }
    public static var visionOS: ManagedAppDistribution.ManagedApp.Platform {
      get
    }
    public var description: Swift.String {
      get
    }
    public static func == (a: ManagedAppDistribution.ManagedApp.Platform, b: ManagedAppDistribution.ManagedApp.Platform) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
extension ManagedAppDistribution.ManagedPackageLibrary {
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  public struct ManagedPackages : _Concurrency.AsyncSequence {
    public typealias Element = ManagedAppDistribution.ManagedPackageLibrary.ManagedPackages.AsyncIterator.Element
    public struct AsyncIterator : _Concurrency.AsyncIteratorProtocol {
      public typealias Element = Swift.Result<[ManagedAppDistribution.ManagedPackage], ManagedAppDistribution.ManagedAppDistributionError>
      public typealias Failure = Swift.Never
      #if compiler(>=5.3) && $NonescapableTypes
      public mutating func next() async throws -> ManagedAppDistribution.ManagedPackageLibrary.ManagedPackages.AsyncIterator.Element?
      #endif
      #if compiler(>=5.3) && $NonescapableTypes
      public func next(isolation actor: isolated (any _Concurrency.Actor)?) async throws(ManagedAppDistribution.ManagedPackageLibrary.ManagedPackages.AsyncIterator.Failure) -> ManagedAppDistribution.ManagedPackageLibrary.ManagedPackages.AsyncIterator.Element?
      #endif
    }
    public func makeAsyncIterator() -> ManagedAppDistribution.ManagedPackageLibrary.ManagedPackages.AsyncIterator
    @available(iOS, unavailable, introduced: 18.0)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @available(visionOS, unavailable, introduced: 2.0)
    @available(macOS, unavailable)
    @available(macCatalyst, unavailable)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = ManagedAppDistribution.ManagedPackageLibrary.ManagedPackages.AsyncIterator.Failure
  }
}
@_hasMissingDesignatedInitializers @available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
final public class ManagedPackageLibrary : Swift.Sendable {
  public static let currentDistributor: ManagedAppDistribution.ManagedPackageLibrary
  final public var availablePackages: ManagedAppDistribution.ManagedPackageLibrary.ManagedPackages {
    get
  }
  @objc deinit
}
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
public struct ManagedPackage : Swift.Sendable {
  public let name: Swift.String
  public let subtitle: Swift.String?
}
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
extension ManagedAppDistribution.ManagedPackage : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  @available(iOS, unavailable)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  @available(macCatalyst, unavailable)
  public typealias ID = Swift.String
}
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(iOS, unavailable)
@available(tvOS, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
extension ManagedAppDistribution.ManagedPackage : Swift.Hashable {
  public static func == (lhs: ManagedAppDistribution.ManagedPackage, rhs: ManagedAppDistribution.ManagedPackage) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.2, visionOS 2.4, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ManagedAppDistribution.ManagedAppLibrary {
  public struct ManagedApps : _Concurrency.AsyncSequence {
    public typealias Element = ManagedAppDistribution.ManagedAppLibrary.ManagedApps.AsyncIterator.Element
    public struct AsyncIterator : _Concurrency.AsyncIteratorProtocol {
      public typealias Element = Swift.Result<[ManagedAppDistribution.ManagedApp], ManagedAppDistribution.ManagedAppDistributionError>
      @available(iOS 18.0, *)
      public typealias Failure = Swift.Never
      #if compiler(>=5.3) && $NonescapableTypes
      public mutating func next() async throws -> ManagedAppDistribution.ManagedAppLibrary.ManagedApps.AsyncIterator.Element?
      #endif
      #if compiler(>=5.3) && $NonescapableTypes
      @available(iOS 18.0, *)
      public func next(isolation actor: isolated (any _Concurrency.Actor)?) async throws(ManagedAppDistribution.ManagedAppLibrary.ManagedApps.AsyncIterator.Failure) -> ManagedAppDistribution.ManagedAppLibrary.ManagedApps.AsyncIterator.Element?
      #endif
    }
    public func makeAsyncIterator() -> ManagedAppDistribution.ManagedAppLibrary.ManagedApps.AsyncIterator
    @available(iOS 18.0, visionOS 2.4, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @available(macOS, unavailable)
    @available(macCatalyst, unavailable)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = ManagedAppDistribution.ManagedAppLibrary.ManagedApps.AsyncIterator.Failure
  }
}
@_hasMissingDesignatedInitializers @available(iOS 17.2, visionOS 2.4, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
final public class ManagedAppLibrary : Swift.Sendable {
  public static let currentDistributor: ManagedAppDistribution.ManagedAppLibrary
  final public var availableApps: ManagedAppDistribution.ManagedAppLibrary.ManagedApps {
    get
  }
  @objc deinit
}
@available(iOS 17.2, visionOS 2.4, macOS 26.0, macCatalyst 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum ManagedAppDistributionError : Foundation.LocalizedError, Foundation.RecoverableError, Foundation.CustomLocalizedStringResourceConvertible, Swift.CustomStringConvertible, Swift.Codable, Swift.Sendable {
  case unrecoverableError
  case networkError
  case deviceNotManaged
  case unsupportedPlatform
  @available(iOS 18.0, visionOS 2.4, macOS 26.0, macCatalyst 26.0, *)
  case licenseNotFound
  @available(iOS 18.0, visionOS 2.4, macOS 26.0, macCatalyst 26.0, *)
  case appNotManaged
  public var localizedStringResource: Foundation.LocalizedStringResource {
    get
  }
  public var description: Swift.String {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public var errorDescription: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var failureReason: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var recoverySuggestion: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var helpAnchor: Swift.String? {
    get
  }
  #endif
  public var recoveryOptions: [Swift.String] {
    get
  }
  public func attemptRecovery(optionIndex recoveryOptionIndex: Swift.Int) -> Swift.Bool
  public func attemptRecovery(optionIndex recoveryOptionIndex: Swift.Int, resultHandler handler: @escaping (Swift.Bool) -> Swift.Void)
  public static func == (a: ManagedAppDistribution.ManagedAppDistributionError, b: ManagedAppDistribution.ManagedAppDistributionError) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 17.2, visionOS 2.4, macOS 26.0, macCatalyst 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ManagedAppDistribution.ManagedAppDistributionError : Swift.Equatable {}
@available(iOS 17.2, visionOS 2.4, macOS 26.0, macCatalyst 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension ManagedAppDistribution.ManagedAppDistributionError : Swift.Hashable {}
