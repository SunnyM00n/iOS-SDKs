// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -module-link-name swiftDarwin -swift-version 6 -enforce-exclusivity=checked -O -library-level api -enable-upcoming-feature MemberImportVisibility -enable-experimental-feature DebugDescriptionMacro -user-module-version 347.0.12 -module-name Darwin
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
@_exported import Darwin
import Swift
@_exported import _Builtin_float
@_exported import _DarwinFoundation1
@_exported import _DarwinFoundation2
@_exported import _DarwinFoundation3
import Darwin.Mach.message
@_exported import sys_types
#if compiler(>=5.3) && $NonescapableTypes
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var environ: Swift.UnsafeMutablePointer<Swift.UnsafeMutablePointer<Swift.CChar>?> {
  get
}
#endif
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public func open(_ path: Swift.UnsafePointer<Swift.CChar>, _ oflag: Swift.Int32) -> Swift.Int32
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public func open(_ path: Swift.UnsafePointer<Swift.CChar>, _ oflag: Swift.Int32, _ mode: _DarwinFoundation2.mode_t) -> Swift.Int32
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public func openat(_ fd: Swift.Int32, _ path: Swift.UnsafePointer<Swift.CChar>, _ oflag: Swift.Int32) -> Swift.Int32
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public func openat(_ fd: Swift.Int32, _ path: Swift.UnsafePointer<Swift.CChar>, _ oflag: Swift.Int32, _ mode: _DarwinFoundation2.mode_t) -> Swift.Int32
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public func fcntl(_ fd: Swift.Int32, _ cmd: Swift.Int32) -> Swift.Int32
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public func fcntl(_ fd: Swift.Int32, _ cmd: Swift.Int32, _ value: Swift.Int32) -> Swift.Int32
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public func fcntl(_ fd: Swift.Int32, _ cmd: Swift.Int32, _ ptr: Swift.UnsafeMutableRawPointer) -> Swift.Int32
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@objc public enum MachErrorCode : Swift.Int32, Swift.Sendable {
  case success = 0
  case invalidAddress = 1
  case protectionFailure = 2
  case noSpace = 3
  case invalidArgument = 4
  case failure = 5
  case resourceShortage = 6
  case notReceiver = 7
  case noAccess = 8
  case memoryFailure = 9
  case memoryError = 10
  case alreadyInSet = 11
  case notInSet = 12
  case nameExists = 13
  case aborted = 14
  case invalidName = 15
  case invalidTask = 16
  case invalidRight = 17
  case invalidValue = 18
  case userReferencesOverflow = 19
  case invalidCapability = 20
  case rightExists = 21
  case invalidHost = 22
  case memoryPresent = 23
  case memoryDataMoved = 24
  case memoryRestartCopy = 25
  case invalidProcessorSet = 26
  case policyLimit = 27
  case invalidPolicy = 28
  case invalidObject = 29
  case alreadyWaiting = 30
  case defaultSet = 31
  case exceptionProtected = 32
  case invalidLedger = 33
  case invalidMemoryControl = 34
  case invalidSecurity = 35
  case notDepressed = 36
  case terminated = 37
  case lockSetDestroyed = 38
  case lockUnstable = 39
  case lockOwned = 40
  case lockOwnedSelf = 41
  case semaphoreDestroyed = 42
  case rpcServerTerminated = 43
  case rpcTerminateOrphan = 44
  case rpcContinueOrphan = 45
  case notSupported = 46
  case nodeDown = 47
  case notWaiting = 48
  case operationTimedOut = 49
  case codesignError = 50
  case policyStatic = 51
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int32)
  #endif
  @available(iOS 7.0, tvOS 9.0, watchOS 2.0, visionOS 1.0, macOS 10.9, *)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension Darwin.audit_token_t : Swift.Codable, Swift.Equatable, Swift.Hashable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
  public static func == (lhs: Darwin.audit_token_t, rhs: Darwin.audit_token_t) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public let INVALID_AUDIT_TOKEN_VALUE: (Swift.UInt32, Swift.UInt32, Swift.UInt32, Swift.UInt32, Swift.UInt32, Swift.UInt32, Swift.UInt32, Swift.UInt32)
@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
public let KERNEL_AUDIT_TOKEN_VALUE: (Swift.UInt32, Swift.UInt32, Swift.UInt32, Swift.UInt32, Swift.UInt32, Swift.UInt32, Swift.UInt32, Swift.UInt32)
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var noErr: Darwin.OSStatus {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@frozen public struct DarwinBoolean : Swift.ExpressibleByBooleanLiteral, Swift.Sendable {
  @usableFromInline
  internal var _value: Swift.UInt8
  @_transparent public init(_ value: Swift.Bool) {
        self._value = value ? 1 : 0
    }
  @_transparent public var boolValue: Swift.Bool {
    @_transparent get {
        return _value != 0
    }
  }
  @_transparent public init(booleanLiteral value: Swift.Bool) {
        self.init(value)
    }
  @available(iOS 7.0, tvOS 9.0, watchOS 2.0, visionOS 1.0, macOS 10.9, *)
  public typealias BooleanLiteralType = Swift.Bool
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
extension Darwin.DarwinBoolean : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
extension Darwin.DarwinBoolean : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
extension Darwin.DarwinBoolean : Swift.Equatable {
  @_transparent public static func == (lhs: Darwin.DarwinBoolean, rhs: Darwin.DarwinBoolean) -> Swift.Bool {
        return lhs.boolValue == rhs.boolValue
    }
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func _convertBoolToDarwinBoolean(_ x: Swift.Bool) -> Darwin.DarwinBoolean {
    return DarwinBoolean(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func _convertDarwinBooleanToBool(_ x: Darwin.DarwinBoolean) -> Swift.Bool {
    return x.boolValue
}
public typealias Semaphore = Swift.UnsafeMutablePointer<Darwin.sem_t>
#if compiler(>=5.3) && $NonescapableTypes
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var SEM_FAILED: Darwin.Semaphore? {
  get
}
#endif
#if compiler(>=5.3) && $NonescapableTypes
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public func sem_open(_ name: Swift.UnsafePointer<Swift.CChar>, _ oflag: Swift.Int32) -> Darwin.Semaphore?
#endif
#if compiler(>=5.3) && $NonescapableTypes
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public func sem_open(_ name: Swift.UnsafePointer<Swift.CChar>, _ oflag: Swift.Int32, _ mode: _DarwinFoundation2.mode_t, _ value: Swift.CUnsignedInt) -> Darwin.Semaphore?
#endif
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public func ioctl(_ fd: Swift.CInt, _ request: Swift.UInt, _ value: Swift.CInt) -> Swift.CInt
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public func ioctl(_ fd: Swift.CInt, _ request: Swift.UInt, _ ptr: Swift.UnsafeMutableRawPointer) -> Swift.CInt
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public func ioctl(_ fd: Swift.CInt, _ request: Swift.UInt) -> Swift.CInt
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCHPCL: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCGETP: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSETP: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSETN: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSETC: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCGETC: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCLBIS: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCLBIC: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCLSET: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCLGET: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSLTC: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCGLTC: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
nonisolated(unsafe) public let MAP_FAILED: Swift.UnsafeMutableRawPointer!
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
extension Darwin.extern_proc {
  @_transparent public var p_starttime: _DarwinFoundation2.timeval {
    @_transparent get { return self.p_un.__p_starttime }
    @_transparent set { self.p_un.__p_starttime = newValue }
  }
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IFMT: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IFIFO: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IFCHR: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IFDIR: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IFBLK: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IFREG: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IFLNK: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IFSOCK: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IFWHT: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IRWXU: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IRUSR: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IWUSR: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IXUSR: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IRWXG: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IRGRP: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IWGRP: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IXGRP: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IRWXO: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IROTH: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IWOTH: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IXOTH: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_ISUID: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_ISGID: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_ISVTX: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_ISTXT: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IREAD: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IWRITE: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var S_IEXEC: _DarwinFoundation2.mode_t {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCMODG: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCMODS: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCEXCL: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCNXCL: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCFLUSH: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCGETA: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSETA: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSETAW: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSETAF: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCGETD: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSETD: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCIXON: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCIXOFF: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSBRK: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCCBRK: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSDTR: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCCDTR: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCGPGRP: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSPGRP: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCOUTQ: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSTI: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCNOTTY: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCPKT: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSTOP: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSTART: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCMSET: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCMBIS: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCMBIC: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCMGET: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCREMOTE: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCGWINSZ: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSWINSZ: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCUCNTL: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSTAT: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSCONS: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCCONS: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSCTTY: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCEXT: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSIG: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCDRAIN: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCMSDTRWAIT: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCMGDTRWAIT: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCTIMESTAMP: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCDCDTIMESTAMP: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCSDRAINWAIT: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCGDRAINWAIT: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCDSIMICROCODE: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCPTYGRANT: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCPTYGNAME: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var TIOCPTYUNLK: Swift.UInt {
  get
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
extension Darwin.MachErrorCode : Swift.Equatable {}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
extension Darwin.MachErrorCode : Swift.Hashable {}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
extension Darwin.MachErrorCode : Swift.RawRepresentable {}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
extension Darwin.DarwinBoolean : Swift.BitwiseCopyable {}
