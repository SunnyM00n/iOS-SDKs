// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 64.1 -module-name PermissionKit
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import CoreGraphics
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CommunicationHandle : Swift.Hashable, Swift.Codable, Swift.Sendable {
  public enum Kind : Swift.Codable {
    case phoneNumber
    case emailAddress
    case custom
    public static func == (a: PermissionKit.CommunicationHandle.Kind, b: PermissionKit.CommunicationHandle.Kind) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public init(value: Swift.String, kind: PermissionKit.CommunicationHandle.Kind)
  public var value: Swift.String {
    get
    set
  }
  public var kind: PermissionKit.CommunicationHandle.Kind {
    get
    set
  }
  public static func == (a: PermissionKit.CommunicationHandle, b: PermissionKit.CommunicationHandle) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
final public class CommunicationLimits {
  public static let current: PermissionKit.CommunicationLimits
  final public var updates: some _Concurrency.AsyncSequence<PermissionKit.PermissionResponse<PermissionKit.CommunicationTopic>, Swift.Never> {
    get
  }
  final public func isKnownHandle(_ handle: PermissionKit.CommunicationHandle) async -> Swift.Bool
  final public func knownHandles(in handles: Swift.Set<PermissionKit.CommunicationHandle>) async -> Swift.Set<PermissionKit.CommunicationHandle>
  @objc deinit
}
@available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PermissionChoice : Swift.Identifiable, Swift.Hashable, Swift.Codable {
  public enum Answer : Swift.Codable {
    case approval
    case denial
    public static func == (a: PermissionKit.PermissionChoice.Answer, b: PermissionKit.PermissionChoice.Answer) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public static let approve: PermissionKit.PermissionChoice
  public static let decline: PermissionKit.PermissionChoice
  public var id: Swift.String {
    get
  }
  public var title: Swift.String {
    get
    set
  }
  public var answer: PermissionKit.PermissionChoice.Answer {
    get
    set
  }
  public static func == (lhs: PermissionKit.PermissionChoice, rhs: PermissionKit.PermissionChoice) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias ID = Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public enum AskError : Foundation.LocalizedError {
  case unknown
  public static func == (a: PermissionKit.AskError, b: PermissionKit.AskError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PermissionKit.CommunicationTopic {
  @available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public enum Action : Swift.Codable {
    case friend
    case follow
    case beFollowed
    case call
    case message
    case videoCall
    case audioCall
    case communicate
    case chat
    case connect
    public static func == (a: PermissionKit.CommunicationTopic.Action, b: PermissionKit.CommunicationTopic.Action) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
@available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct CommunicationTopic : PermissionKit.QuestionTopic {
  public static let id: Swift.String
  public var personInformation: [PermissionKit.CommunicationTopic.PersonInformation]
  public var actions: Swift.Set<PermissionKit.CommunicationTopic.Action>
  public init(personInformation: [PermissionKit.CommunicationTopic.PersonInformation], actions: Swift.Set<PermissionKit.CommunicationTopic.Action>)
  public init(personInformation: [PermissionKit.CommunicationTopic.PersonInformation])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension PermissionKit.CommunicationTopic {
  @available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public struct PersonInformation : Swift.Codable {
    public var handle: PermissionKit.CommunicationHandle
    public var nameComponents: Foundation.PersonNameComponents?
    public var avatarImage: CoreGraphics.CGImage?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(handle: PermissionKit.CommunicationHandle, nameComponents: Foundation.PersonNameComponents? = nil, avatarImage: CoreGraphics.CGImage? = nil)
    #endif
    public init(from decoder: any Swift.Decoder) throws
    public func encode(to encoder: any Swift.Encoder) throws
  }
}
@available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public protocol QuestionTopic : Swift.Decodable, Swift.Encodable {
  static var id: Swift.String { get }
}
@available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
final public class PermissionQuestion<Topic> : Swift.Identifiable, Swift.Codable where Topic : PermissionKit.QuestionTopic {
  final public let id: Foundation.UUID
  final public let topic: Topic
  final public var choices: [PermissionKit.PermissionChoice] {
    get
  }
  final public var defaultChoice: PermissionKit.PermissionChoice {
    get
  }
  final public var expirationDate: Foundation.Date?
  @available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias ID = Foundation.UUID
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension PermissionKit.PermissionQuestion where Topic == PermissionKit.CommunicationTopic {
  convenience public init(communicationTopic: Topic)
  convenience public init(handles: [PermissionKit.CommunicationHandle])
  convenience public init(handle: PermissionKit.CommunicationHandle)
}
@available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
public struct PermissionResponse<Topic> where Topic : PermissionKit.QuestionTopic {
  public let question: PermissionKit.PermissionQuestion<Topic>
  public let choice: PermissionKit.PermissionChoice
}
@available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension PermissionKit.CommunicationHandle.Kind : Swift.Equatable {}
@available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension PermissionKit.CommunicationHandle.Kind : Swift.Hashable {}
@available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension PermissionKit.PermissionChoice.Answer : Swift.Equatable {}
@available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension PermissionKit.PermissionChoice.Answer : Swift.Hashable {}
@available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension PermissionKit.AskError : Swift.Equatable {}
@available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension PermissionKit.AskError : Swift.Hashable {}
@available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension PermissionKit.CommunicationTopic.Action : Swift.Equatable {}
@available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
extension PermissionKit.CommunicationTopic.Action : Swift.Hashable {}
