// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 958 -module-name SensorKit
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import Foundation
@_exported import SensorKit
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 17.4, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SensorKit.SRPhotoplethysmogramOpticalSample {
  @available(iOS 17.4, *)
  @available(watchOS, unavailable)
  @available(visionOS, unavailable)
  @available(macOS, unavailable)
  @available(tvOS, unavailable)
  public struct NoiseTerms {
    public let whiteNoise: Swift.Double
    public let pinkNoise: Swift.Double
    public let backgroundNoise: Swift.Double
    public let backgroundNoiseOffset: Swift.Double
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public var noiseTerms: SensorKit.SRPhotoplethysmogramOpticalSample.NoiseTerms? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var normalizedReflectance: Swift.Double? {
    get
  }
  #endif
}
@available(iOS 17.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(macOS, unavailable)
@available(tvOS, unavailable)
extension SensorKit.SRWristTemperatureSession {
  public var temperatures: some Swift.Sequence<SensorKit.SRWristTemperature> {
    get
  }
}
@available(iOS 26.0, *)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
extension SensorKit.SRAcousticSettings {
  #if compiler(>=5.3) && $NonescapableTypes
  public var headphoneSafetyAudioLevel: Swift.Double? {
    get
  }
  #endif
}
