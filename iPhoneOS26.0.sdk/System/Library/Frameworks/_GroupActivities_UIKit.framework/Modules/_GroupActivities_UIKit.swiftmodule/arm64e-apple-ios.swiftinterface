// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 267.100.2 -module-name _GroupActivities_UIKit
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import Combine
import CoreGraphics
import Foundation
@_exported import GroupActivities
import QuartzCore
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@available(iOS 15.4, macCatalyst 15.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
public enum GroupActivitySharingResult {
  case success
  case cancelled
  public static func == (a: _GroupActivities_UIKit.GroupActivitySharingResult, b: _GroupActivities_UIKit.GroupActivitySharingResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @available(iOS 15.4, macCatalyst 15.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@_Concurrency.MainActor public class GroupActivitySharingController : UIKit.UIViewController {
  @_Concurrency.MainActor @objc override dynamic public var modalPresentationStyle: UIKit.UIModalPresentationStyle {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor public var result: _GroupActivities_UIKit.GroupActivitySharingResult {
    get async
  }
  @_Concurrency.MainActor public init<ActivityType>(_ activity: ActivityType) throws where ActivityType : GroupActivities.GroupActivity
  @_Concurrency.MainActor public init<ActivityType>(preparationHandler: @escaping () async throws -> ActivityType) where ActivityType : GroupActivities.GroupActivity
  @_Concurrency.MainActor @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @objc override dynamic public func viewDidLoad()
  @objc deinit
}
prefix operator >>
@objc @available(visionOS 26.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
@_Concurrency.MainActor public class GroupActivityAssociationInteraction : ObjectiveC.NSObject, UIKit.UIInteraction {
  @_Concurrency.MainActor @preconcurrency @objc weak public var view: UIKit.UIView?
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor public init(associationKind: GroupActivities.GroupActivityAssociationKind?)
  #endif
  @_Concurrency.MainActor public var associationKind: GroupActivities.GroupActivityAssociationKind? {
    get
    set
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency @objc public func willMove(to view: UIKit.UIView?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency @objc public func didMove(to newView: UIKit.UIView?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @objc(_didMoveFromWindow:toWindow:) @_Concurrency.MainActor public func _didMove(from oldWindow: UIKit.UIWindow?, to newWindow: UIKit.UIWindow?)
  #endif
  @objc deinit
}
@available(iOS 15.4, macCatalyst 15.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
extension _GroupActivities_UIKit.GroupActivitySharingResult : Swift.Equatable {}
@available(iOS 15.4, macCatalyst 15.4, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
extension _GroupActivities_UIKit.GroupActivitySharingResult : Swift.Hashable {}
@available(visionOS 26.0, *)
@available(iOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@available(macOS, unavailable)
extension _GroupActivities_UIKit.GroupActivityAssociationInteraction : Swift.Sendable {}
