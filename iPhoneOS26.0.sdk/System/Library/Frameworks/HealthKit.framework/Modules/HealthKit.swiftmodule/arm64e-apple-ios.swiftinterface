// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature AccessLevelOnImport -enable-upcoming-feature InternalImportsByDefault -enable-upcoming-feature MemberImportVisibility -enable-experimental-feature DebugDescriptionMacro -user-module-version 6106.1.2.11 -module-name HealthKit
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
public import CoreLocation
@_exported public import HealthKit
public import Swift
public import _Concurrency
public import _StringProcessing
public import _SwiftConcurrencyShims
public import os.log
public import os
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKSampleQueryDescriptor<Sample> : Swift.Sendable where Sample : HealthKit.HKSample {
  public var predicates: [HealthKit.HKSamplePredicate<Sample>] {
    get
    set
  }
  public var sortDescriptors: [Foundation.SortDescriptor<Sample>]
  public var limit: Swift.Int?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(predicates: [HealthKit.HKSamplePredicate<Sample>], sortDescriptors: [Foundation.SortDescriptor<Sample>], limit: Swift.Int? = nil)
  #endif
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HealthKit.HKSampleQueryDescriptor : HealthKit.HKAsyncQuery {
  public func result(for healthStore: HealthKit.HKHealthStore) async throws -> [Sample]
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Output = [Sample]
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKStatisticsCollectionQueryDescriptor {
  public var predicate: HealthKit.HKSamplePredicate<HealthKit.HKQuantitySample>
  public var options: HealthKit.HKStatisticsOptions
  public var anchorDate: Foundation.Date
  public var intervalComponents: Foundation.DateComponents
  public init(predicate: HealthKit.HKSamplePredicate<HealthKit.HKQuantitySample>, options: HealthKit.HKStatisticsOptions, anchorDate: Foundation.Date, intervalComponents: Foundation.DateComponents)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HealthKit.HKStatisticsCollectionQueryDescriptor : HealthKit.HKAsyncQuery {
  public func result(for healthStore: HealthKit.HKHealthStore) async throws -> HealthKit.HKStatisticsCollection
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Output = HealthKit.HKStatisticsCollection
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HealthKit.HKStatisticsCollectionQueryDescriptor : HealthKit.HKAsyncSequenceQuery {
  public struct Result : Swift.Sendable {
    public let statisticsCollection: HealthKit.HKStatisticsCollection
    public let updatedStatistics: [HealthKit.HKStatistics]?
  }
  public struct Results : _Concurrency.AsyncSequence {
    public typealias Element = HealthKit.HKStatisticsCollectionQueryDescriptor.Result
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      #if compiler(>=5.3) && $NonescapableTypes
      public mutating func next() async throws -> HealthKit.HKStatisticsCollectionQueryDescriptor.Results.Element?
      #endif
      @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
      public typealias Element = HealthKit.HKStatisticsCollectionQueryDescriptor.Results.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> HealthKit.HKStatisticsCollectionQueryDescriptor.Results.Iterator
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias AsyncIterator = HealthKit.HKStatisticsCollectionQueryDescriptor.Results.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func results(for healthStore: HealthKit.HKHealthStore) -> HealthKit.HKStatisticsCollectionQueryDescriptor.Results
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Sequence = HealthKit.HKStatisticsCollectionQueryDescriptor.Results
}
@available(iOS 15.4, macCatalyst 15.4, macOS 13.0, *)
@available(watchOS, unavailable)
public struct HKVerifiableClinicalRecordQueryDescriptor {
  public var recordTypes: [HealthKit.HKVerifiableClinicalRecordCredentialType]
  public var sourceTypes: [HealthKit.HKVerifiableClinicalRecordSourceType]
  public var predicate: Foundation.NSPredicate?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(recordTypes: [HealthKit.HKVerifiableClinicalRecordCredentialType], sourceTypes: [HealthKit.HKVerifiableClinicalRecordSourceType], predicate: Foundation.NSPredicate? = nil)
  #endif
}
@available(iOS 15.4, macCatalyst 15.4, macOS 13.0, *)
@available(watchOS, unavailable)
extension HealthKit.HKVerifiableClinicalRecordQueryDescriptor : HealthKit.HKAsyncQuery {
  public func result(for healthStore: HealthKit.HKHealthStore) async throws -> [HealthKit.HKVerifiableClinicalRecord]
  @available(iOS 15.4, macOS 13.0, macCatalyst 15.4, *)
  @available(watchOS, unavailable)
  public typealias Output = [HealthKit.HKVerifiableClinicalRecord]
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKAttachmentStore {
  #if compiler(>=5.3) && $NonescapableTypes
  public func addAttachment(to object: HealthKit.HKObject, name: Swift.String, contentType: UniformTypeIdentifiers.UTType, url: Foundation.URL, metadata: [Swift.String : Any] = [:], completion: @escaping (HealthKit.HKAttachment?, (any Swift.Error)?) -> Swift.Void)
  #endif
  public func addAttachment(to object: HealthKit.HKObject, name: Swift.String, contentType: UniformTypeIdentifiers.UTType, url: Foundation.URL, metadata: [Swift.String : Any] = [:]) async throws -> HealthKit.HKAttachment
  public func dataReader(for attachment: HealthKit.HKAttachment) -> HealthKit.HKAttachmentDataReader
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKWorkoutRouteQueryDescriptor {
  public var workoutRoute: HealthKit.HKWorkoutRoute
  public init(_ workoutRoute: HealthKit.HKWorkoutRoute)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HealthKit.HKWorkoutRouteQueryDescriptor : HealthKit.HKAsyncSequenceQuery {
  public struct Results : _Concurrency.AsyncSequence {
    public typealias Element = _LocationEssentials.CLLocation
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      @usableFromInline
      internal var locationIterator: Swift.Array<_LocationEssentials.CLLocation>.Iterator?
      #if compiler(>=5.3) && $NonescapableTypes
      @usableFromInline
      internal mutating func nextLocationIterator() async throws -> Swift.Array<_LocationEssentials.CLLocation>.Iterator?
      #endif
      #if compiler(>=5.3) && $NonescapableTypes
      @inlinable public mutating func next() async throws -> HealthKit.HKWorkoutRouteQueryDescriptor.Results.Element? {
                 
                 
                guard let next = locationIterator?.next() else {
                    locationIterator = try await nextLocationIterator()
                    return locationIterator?.next()
                }
                return next
            }
      #endif
      @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
      public typealias Element = HealthKit.HKWorkoutRouteQueryDescriptor.Results.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> HealthKit.HKWorkoutRouteQueryDescriptor.Results.Iterator
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias AsyncIterator = HealthKit.HKWorkoutRouteQueryDescriptor.Results.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func results(for healthStore: HealthKit.HKHealthStore) -> HealthKit.HKWorkoutRouteQueryDescriptor.Results
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Sequence = HealthKit.HKWorkoutRouteQueryDescriptor.Results
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKHeartbeatSeriesQueryDescriptor {
  public var sample: HealthKit.HKHeartbeatSeriesSample
  public init(_ sample: HealthKit.HKHeartbeatSeriesSample)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HealthKit.HKHeartbeatSeriesQueryDescriptor : HealthKit.HKAsyncSequenceQuery {
  public struct Heartbeat : Swift.Equatable, Swift.Hashable {
    public let timeIntervalSinceStart: Foundation.TimeInterval
    public let precededByGap: Swift.Bool
    public static func == (a: HealthKit.HKHeartbeatSeriesQueryDescriptor.Heartbeat, b: HealthKit.HKHeartbeatSeriesQueryDescriptor.Heartbeat) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Results : _Concurrency.AsyncSequence {
    public typealias Element = HealthKit.HKHeartbeatSeriesQueryDescriptor.Heartbeat
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      @usableFromInline
      internal var heartbeatIterator: HealthKit.HKHeartbeatSeriesQueryDescriptor.Results.HeartbeatIterator?
      #if compiler(>=5.3) && $NonescapableTypes
      @usableFromInline
      internal mutating func nextHeartbeatIterator() async throws -> HealthKit.HKHeartbeatSeriesQueryDescriptor.Results.HeartbeatIterator?
      #endif
      #if compiler(>=5.3) && $NonescapableTypes
      @inlinable public mutating func next() async throws -> HealthKit.HKHeartbeatSeriesQueryDescriptor.Results.Element? {
                 
                 
                guard let next = heartbeatIterator?.next() else {
                    heartbeatIterator = try await nextHeartbeatIterator()
                    return heartbeatIterator?.next()
                }
                return next
            }
      #endif
      @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
      public typealias Element = HealthKit.HKHeartbeatSeriesQueryDescriptor.Results.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> HealthKit.HKHeartbeatSeriesQueryDescriptor.Results.Iterator
    @usableFromInline
    internal struct HeartbeatIterator : Swift.IteratorProtocol {
      #if compiler(>=5.3) && $NonescapableTypes
      @usableFromInline
      internal mutating func next() -> HealthKit.HKHeartbeatSeriesQueryDescriptor.Heartbeat?
      #endif
      @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
      @usableFromInline
      internal typealias Element = HealthKit.HKHeartbeatSeriesQueryDescriptor.Heartbeat
    }
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias AsyncIterator = HealthKit.HKHeartbeatSeriesQueryDescriptor.Results.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func results(for healthStore: HealthKit.HKHealthStore) -> HealthKit.HKHeartbeatSeriesQueryDescriptor.Results
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Sequence = HealthKit.HKHeartbeatSeriesQueryDescriptor.Results
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HealthKit.HKSamplePredicate {
  #if compiler(>=5.3) && $NonescapableTypes
  public static func stateOfMind(_ predicate: Foundation.NSPredicate? = nil) -> HealthKit.HKSamplePredicate<HealthKit.HKStateOfMind>
  #endif
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HealthKit.HKStateOfMind.ValenceClassification {
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(valence: Swift.Double)
  #endif
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HealthKit.HKStateOfMind {
  public var labels: [HealthKit.HKStateOfMind.Label] {
    get
  }
  public var associations: [HealthKit.HKStateOfMind.Association] {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  convenience public init(date: Foundation.Date, kind: HealthKit.HKStateOfMind.Kind, valence: Swift.Double, labels: [HealthKit.HKStateOfMind.Label], associations: [HealthKit.HKStateOfMind.Association], metadata: [Swift.String : Any]? = [:])
  #endif
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKStatisticsQueryDescriptor {
  public var predicate: HealthKit.HKSamplePredicate<HealthKit.HKQuantitySample>
  public var options: HealthKit.HKStatisticsOptions
  public init(predicate: HealthKit.HKSamplePredicate<HealthKit.HKQuantitySample>, options: HealthKit.HKStatisticsOptions)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HealthKit.HKStatisticsQueryDescriptor : HealthKit.HKAsyncQuery {
  #if compiler(>=5.3) && $NonescapableTypes
  public func result(for healthStore: HealthKit.HKHealthStore) async throws -> HealthKit.HKStatistics?
  #endif
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Output = HealthKit.HKStatistics?
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKActivitySummaryQueryDescriptor {
  public var predicate: Foundation.NSPredicate?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(predicate: Foundation.NSPredicate?)
  #endif
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HealthKit.HKActivitySummaryQueryDescriptor : HealthKit.HKAsyncQuery {
  public func result(for healthStore: HealthKit.HKHealthStore) async throws -> [HealthKit.HKActivitySummary]
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Output = [HealthKit.HKActivitySummary]
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HealthKit.HKActivitySummaryQueryDescriptor : HealthKit.HKAsyncSequenceQuery {
  public struct Results : _Concurrency.AsyncSequence {
    public typealias Element = [HealthKit.HKActivitySummary]
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      #if compiler(>=5.3) && $NonescapableTypes
      public mutating func next() async throws -> HealthKit.HKActivitySummaryQueryDescriptor.Results.Element?
      #endif
      @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
      public typealias Element = HealthKit.HKActivitySummaryQueryDescriptor.Results.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> HealthKit.HKActivitySummaryQueryDescriptor.Results.Iterator
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias AsyncIterator = HealthKit.HKActivitySummaryQueryDescriptor.Results.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func results(for healthStore: HealthKit.HKHealthStore) -> HealthKit.HKActivitySummaryQueryDescriptor.Results
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Sequence = HealthKit.HKActivitySummaryQueryDescriptor.Results
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKElectrocardiogramQueryDescriptor {
  public var electrocardiogram: HealthKit.HKElectrocardiogram
  public init(_ electrocardiogram: HealthKit.HKElectrocardiogram)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HealthKit.HKElectrocardiogramQueryDescriptor : HealthKit.HKAsyncSequenceQuery {
  public struct Results : _Concurrency.AsyncSequence {
    public typealias Element = HealthKit.HKElectrocardiogram.VoltageMeasurement
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      #if compiler(>=5.3) && $NonescapableTypes
      @inlinable public mutating func next() async throws -> HealthKit.HKElectrocardiogramQueryDescriptor.Results.Element? {
                 
                 
                guard let next = nextMeasurement() else {
                    try await awaitMeasurementEnumerator()
                    return nextMeasurement()
                }
                return next
            }
      #endif
      #if compiler(>=5.3) && $NonescapableTypes
      @usableFromInline
      internal func nextMeasurement() -> HealthKit.HKElectrocardiogram.VoltageMeasurement?
      #endif
      @usableFromInline
      internal mutating func awaitMeasurementEnumerator() async throws
      @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
      public typealias Element = HealthKit.HKElectrocardiogramQueryDescriptor.Results.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> HealthKit.HKElectrocardiogramQueryDescriptor.Results.Iterator
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias AsyncIterator = HealthKit.HKElectrocardiogramQueryDescriptor.Results.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func results(for healthStore: HealthKit.HKHealthStore) -> HealthKit.HKElectrocardiogramQueryDescriptor.Results
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Sequence = HealthKit.HKElectrocardiogramQueryDescriptor.Results
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public protocol HKAsyncQuery {
  associatedtype Output
  func result(for healthStore: HealthKit.HKHealthStore) async throws -> Self.Output
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public protocol HKAsyncSequenceQuery {
  associatedtype Sequence : _Concurrency.AsyncSequence
  func results(for healthStore: HealthKit.HKHealthStore) -> Self.Sequence
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKAnchoredObjectQueryDescriptor<Sample> : Swift.Sendable where Sample : HealthKit.HKSample {
  public var predicates: [HealthKit.HKSamplePredicate<Sample>] {
    get
    set
  }
  public var anchor: HealthKit.HKQueryAnchor?
  public var limit: Swift.Int?
  public struct Result {
    public let addedSamples: [Sample]
    public let deletedObjects: [HealthKit.HKDeletedObject]
    public let newAnchor: HealthKit.HKQueryAnchor
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public init(predicates: [HealthKit.HKSamplePredicate<Sample>], anchor: HealthKit.HKQueryAnchor?, limit: Swift.Int? = nil)
  #endif
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HealthKit.HKAnchoredObjectQueryDescriptor : HealthKit.HKAsyncQuery {
  public func result(for healthStore: HealthKit.HKHealthStore) async throws -> HealthKit.HKAnchoredObjectQueryDescriptor<Sample>.Result
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Output = HealthKit.HKAnchoredObjectQueryDescriptor<Sample>.Result
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HealthKit.HKAnchoredObjectQueryDescriptor : HealthKit.HKAsyncSequenceQuery {
  public struct Results : _Concurrency.AsyncSequence {
    public typealias Element = HealthKit.HKAnchoredObjectQueryDescriptor<Sample>.Result
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      #if compiler(>=5.3) && $NonescapableTypes
      public mutating func next() async throws -> HealthKit.HKAnchoredObjectQueryDescriptor<Sample>.Results.Element?
      #endif
      @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
      public typealias Element = HealthKit.HKAnchoredObjectQueryDescriptor<Sample>.Results.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> HealthKit.HKAnchoredObjectQueryDescriptor<Sample>.Results.Iterator
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias AsyncIterator = HealthKit.HKAnchoredObjectQueryDescriptor<Sample>.Results.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func results(for healthStore: HealthKit.HKHealthStore) -> HealthKit.HKAnchoredObjectQueryDescriptor<Sample>.Results
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Sequence = HealthKit.HKAnchoredObjectQueryDescriptor<Sample>.Results
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKAttachment {
  public struct AsyncBytes : _Concurrency.AsyncSequence {
    public typealias Element = Swift.UInt8
    public func makeAsyncIterator() -> HealthKit.BufferedAsyncByteIterator
    @available(iOS 16.0, watchOS 9.0, macOS 13.0, macCatalyst 16.0, *)
    public typealias AsyncIterator = HealthKit.BufferedAsyncByteIterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 16.0, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
}
extension HealthKit.HKHealthStore {
  @available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
  public func requestAuthorization(toShare typesToShare: Swift.Set<HealthKit.HKSampleType>, read typesToRead: Swift.Set<HealthKit.HKObjectType>) async throws
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, *)
public struct HKWorkoutEffortRelationshipQueryDescriptor {
  public var predicate: Foundation.NSPredicate?
  public var anchor: HealthKit.HKQueryAnchor?
  public var option: HealthKit.HKWorkoutEffortRelationshipQueryOptions
  public struct Result {
    public let relationships: [HealthKit.HKWorkoutEffortRelationship]
    public let newAnchor: HealthKit.HKQueryAnchor
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public init(predicate: Foundation.NSPredicate?, anchor: HealthKit.HKQueryAnchor?, option: HealthKit.HKWorkoutEffortRelationshipQueryOptions)
  #endif
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, *)
extension HealthKit.HKWorkoutEffortRelationshipQueryDescriptor : HealthKit.HKAsyncQuery {
  public func result(for healthStore: HealthKit.HKHealthStore) async throws -> HealthKit.HKWorkoutEffortRelationshipQueryDescriptor.Result
  @available(iOS 18.0, watchOS 11.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Output = HealthKit.HKWorkoutEffortRelationshipQueryDescriptor.Result
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, *)
extension HealthKit.HKWorkoutEffortRelationshipQueryDescriptor : HealthKit.HKAsyncSequenceQuery {
  public struct Results : _Concurrency.AsyncSequence {
    public typealias Element = HealthKit.HKWorkoutEffortRelationshipQueryDescriptor.Result
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      #if compiler(>=5.3) && $NonescapableTypes
      public mutating func next() async throws -> HealthKit.HKWorkoutEffortRelationshipQueryDescriptor.Results.Element?
      #endif
      @available(iOS 18.0, watchOS 11.0, macOS 15.0, macCatalyst 18.0, *)
      public typealias Element = HealthKit.HKWorkoutEffortRelationshipQueryDescriptor.Results.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> HealthKit.HKWorkoutEffortRelationshipQueryDescriptor.Results.Iterator
    @available(iOS 18.0, watchOS 11.0, macOS 15.0, macCatalyst 18.0, *)
    public typealias AsyncIterator = HealthKit.HKWorkoutEffortRelationshipQueryDescriptor.Results.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func results(for healthStore: HealthKit.HKHealthStore) -> HealthKit.HKWorkoutEffortRelationshipQueryDescriptor.Results
  @available(iOS 18.0, watchOS 11.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias Sequence = HealthKit.HKWorkoutEffortRelationshipQueryDescriptor.Results
}
@available(iOS 14.0, watchOS 7.0, macCatalyst 14.0, macOS 13.0, *)
extension HealthKit.HKElectrocardiogramQuery {
  public enum Result {
    case measurement(HealthKit.HKElectrocardiogram.VoltageMeasurement)
    case error(any Swift.Error)
    case done
  }
  convenience public init(_ ecg: HealthKit.HKElectrocardiogram, dataHandler: @escaping (HealthKit.HKElectrocardiogramQuery, HealthKit.HKElectrocardiogramQuery.Result) -> Swift.Void)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKSamplePredicate<Sample> : Swift.Equatable, Swift.Hashable, Swift.Sendable where Sample : HealthKit.HKSample {
  public let sampleType: HealthKit.HKSampleType
  nonisolated(unsafe) public let nsPredicate: Foundation.NSPredicate?
  #if compiler(>=5.3) && $NonescapableTypes
  public static func audiogram(_ predicate: Foundation.NSPredicate? = nil) -> HealthKit.HKSamplePredicate<HealthKit.HKAudiogramSample>
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func categorySample(type categoryType: HealthKit.HKCategoryType, predicate: Foundation.NSPredicate? = nil) -> HealthKit.HKSamplePredicate<HealthKit.HKCategorySample>
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @available(watchOS, unavailable)
  public static func clinicalRecord(type clinicalType: HealthKit.HKClinicalType, predicate: Foundation.NSPredicate? = nil) -> HealthKit.HKSamplePredicate<HealthKit.HKClinicalRecord>
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func correlation(type correlationType: HealthKit.HKCorrelationType, predicate: Foundation.NSPredicate? = nil) -> HealthKit.HKSamplePredicate<HealthKit.HKCorrelation>
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func electrocardiogram(_ predicate: Foundation.NSPredicate? = nil) -> HealthKit.HKSamplePredicate<HealthKit.HKElectrocardiogram>
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func heartbeatSeries(_ predicate: Foundation.NSPredicate? = nil) -> HealthKit.HKSamplePredicate<HealthKit.HKHeartbeatSeriesSample>
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func quantitySample(type quantityType: HealthKit.HKQuantityType, predicate: Foundation.NSPredicate? = nil) -> HealthKit.HKSamplePredicate<HealthKit.HKQuantitySample>
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func sample(type sampleType: HealthKit.HKSampleType, predicate: Foundation.NSPredicate? = nil) -> HealthKit.HKSamplePredicate<HealthKit.HKSample>
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func workout(_ predicate: Foundation.NSPredicate? = nil) -> HealthKit.HKSamplePredicate<HealthKit.HKWorkout>
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func workoutRoute(_ predicate: Foundation.NSPredicate? = nil) -> HealthKit.HKSamplePredicate<HealthKit.HKWorkoutRoute>
  #endif
  public static func == (a: HealthKit.HKSamplePredicate<Sample>, b: HealthKit.HKSamplePredicate<Sample>) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKSamplePredicate {
  #if compiler(>=5.3) && $NonescapableTypes
  public static func visionPrescription(_ predicate: Foundation.NSPredicate? = nil) -> HealthKit.HKSamplePredicate<HealthKit.HKVisionPrescription>
  #endif
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HealthKit.HKAppleSleepingBreathingDisturbancesClassification {
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(classifying appleSleepingBreathingDisturbances: HealthKit.HKQuantity)
  #endif
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HealthKit.HKAppleSleepingBreathingDisturbancesClassification : Swift.CaseIterable {
  public static var allCases: [HealthKit.HKAppleSleepingBreathingDisturbancesClassification] {
    get
  }
  @available(iOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 18.0, *)
  public typealias AllCases = [HealthKit.HKAppleSleepingBreathingDisturbancesClassification]
}
@available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
extension HealthKit.HKAppleWalkingSteadinessClassification {
  public init(for appleWalkingSteadiness: HealthKit.HKQuantity) throws
  public var minimum: HealthKit.HKQuantity {
    get
  }
  public var maximum: HealthKit.HKQuantity {
    get
  }
}
@available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
extension HealthKit.HKAppleWalkingSteadinessClassification : Swift.CaseIterable {
  public static var allCases: [HealthKit.HKAppleWalkingSteadinessClassification] {
    get
  }
  @available(iOS 15.0, watchOS 8.0, macOS 13.0, macCatalyst 15.0, *)
  public typealias AllCases = [HealthKit.HKAppleWalkingSteadinessClassification]
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKQuantitySeriesSampleQueryDescriptor {
  public var predicate: HealthKit.HKSamplePredicate<HealthKit.HKQuantitySample>
  public struct Options : Swift.OptionSet, Swift.Sendable {
    public static let includeSample: HealthKit.HKQuantitySeriesSampleQueryDescriptor.Options
    public static let orderByQuantitySampleStartDate: HealthKit.HKQuantitySeriesSampleQueryDescriptor.Options
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias ArrayLiteralElement = HealthKit.HKQuantitySeriesSampleQueryDescriptor.Options
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias Element = HealthKit.HKQuantitySeriesSampleQueryDescriptor.Options
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias RawValue = Swift.Int
  }
  public var options: HealthKit.HKQuantitySeriesSampleQueryDescriptor.Options
  public init(predicate: HealthKit.HKSamplePredicate<HealthKit.HKQuantitySample>, options: HealthKit.HKQuantitySeriesSampleQueryDescriptor.Options = [])
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HealthKit.HKQuantitySeriesSampleQueryDescriptor : HealthKit.HKAsyncSequenceQuery {
  public struct Result : Swift.Equatable, Swift.Hashable, Swift.Sendable {
    public let quantity: HealthKit.HKQuantity
    public let dateInterval: Foundation.DateInterval
    public let sample: HealthKit.HKQuantitySample?
    public static func == (a: HealthKit.HKQuantitySeriesSampleQueryDescriptor.Result, b: HealthKit.HKQuantitySeriesSampleQueryDescriptor.Result) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Results : _Concurrency.AsyncSequence {
    public typealias Element = HealthKit.HKQuantitySeriesSampleQueryDescriptor.Result
    public struct Iterator : _Concurrency.AsyncIteratorProtocol {
      @usableFromInline
      internal var resultIterator: Swift.Array<HealthKit.HKQuantitySeriesSampleQueryDescriptor.Result>.Iterator?
      #if compiler(>=5.3) && $NonescapableTypes
      @inlinable public mutating func next() async throws -> HealthKit.HKQuantitySeriesSampleQueryDescriptor.Results.Element? {
                 
                 
                guard let next = resultIterator?.next() else {
                    resultIterator = try await nextResultIterator()
                    return resultIterator?.next()
                }
                return next
            }
      #endif
      #if compiler(>=5.3) && $NonescapableTypes
      @usableFromInline
      internal mutating func nextResultIterator() async throws -> Swift.Array<HealthKit.HKQuantitySeriesSampleQueryDescriptor.Result>.Iterator?
      #endif
      @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
      public typealias Element = HealthKit.HKQuantitySeriesSampleQueryDescriptor.Results.Element
      @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    public func makeAsyncIterator() -> HealthKit.HKQuantitySeriesSampleQueryDescriptor.Results.Iterator
    @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
    public typealias AsyncIterator = HealthKit.HKQuantitySeriesSampleQueryDescriptor.Results.Iterator
    @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 15.4, *)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public func results(for healthStore: HealthKit.HKHealthStore) -> HealthKit.HKQuantitySeriesSampleQueryDescriptor.Results
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Sequence = HealthKit.HKQuantitySeriesSampleQueryDescriptor.Results
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
public protocol HKCategoryValuePredicateProviding : Swift.Hashable, Swift.RawRepresentable {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValuePredicateProviding where Self.RawValue == Swift.Int {
  public static func predicateForSamples(_ operatorType: Foundation.NSComparisonPredicate.Operator, value: Self) -> Foundation.NSPredicate
  public static func predicateForSamples(equalTo values: Swift.Set<Self>) -> Foundation.NSPredicate
}
@_hasMissingDesignatedInitializers @available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
public class HKAttachmentDataReader {
  public var attachment: HealthKit.HKAttachment {
    get
  }
  public var progress: Foundation.Progress {
    get
  }
  public var data: Foundation.Data {
    get async throws
  }
  public var bytes: HealthKit.HKAttachment.AsyncBytes {
    get
  }
  @objc deinit
}
extension HealthKit.HKCategoryType {
  @available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
  convenience public init(_ identifier: HealthKit.HKCategoryTypeIdentifier)
}
extension HealthKit.HKCharacteristicType {
  @available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
  convenience public init(_ identifier: HealthKit.HKCharacteristicTypeIdentifier)
}
@available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
extension HealthKit.HKClinicalType {
  @available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
  convenience public init(_ identifier: HealthKit.HKClinicalTypeIdentifier)
}
extension HealthKit.HKCorrelationType {
  @available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
  convenience public init(_ identifier: HealthKit.HKCorrelationTypeIdentifier)
}
extension HealthKit.HKDocumentType {
  @available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
  convenience public init(_ identifier: HealthKit.HKDocumentTypeIdentifier)
}
extension HealthKit.HKQuantityType {
  @available(iOS 15.0, watchOS 8.0, macCatalyst 15.0, macOS 13.0, *)
  convenience public init(_ identifier: HealthKit.HKQuantityTypeIdentifier)
}
extension HealthKit.HKScoredAssessmentType {
  @available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
  convenience public init(_ identifier: HealthKit.HKScoredAssessmentTypeIdentifier)
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
@usableFromInline
@frozen internal struct _AsyncBytesBuffer {
  internal var storage: Swift.AnyObject?
  @usableFromInline
  internal var nextPointer: Swift.UnsafeRawPointer
  @usableFromInline
  internal var endPointer: Swift.UnsafeRawPointer
  internal var totalBytesRead: Swift.Int = 0
  @usableFromInline
  internal init(capacity: Swift.Int, readFunction: @escaping (Swift.UnsafeMutableRawBufferPointer, Swift.Int) async throws -> Swift.Int)
  #if compiler(>=5.3) && $NonescapableTypes
  @usableFromInline
  @inline(never) internal mutating func reloadBufferAndNext() async throws -> Swift.UInt8?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @inlinable @inline(__always) internal mutating func next() async throws -> Swift.UInt8? {
        if _fastPath(nextPointer != endPointer) {
            let byte = nextPointer.load(fromByteOffset: 0, as: UInt8.self)
            nextPointer += 1
            return byte
        }
        return try await reloadBufferAndNext()
    }
  #endif
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
public struct BufferedAsyncByteIterator : _Concurrency.AsyncIteratorProtocol {
  public typealias Element = Swift.UInt8
  @usableFromInline
  internal var buffer: HealthKit._AsyncBytesBuffer
  #if compiler(>=5.3) && $NonescapableTypes
  @inlinable @inline(__always) public mutating func next() async throws -> Swift.UInt8? {
        return try await buffer.next()
    }
  #endif
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, macCatalyst 16.0, *)
  @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
}
@available(iOS 26.0, watchOS 26.0, macCatalyst 26.0, macOS 26.0, visionOS 26.0, *)
extension HealthKit.HKActivitySummary : @unchecked Swift.Sendable {
}
@available(iOS 26.0, watchOS 26.0, macCatalyst 26.0, macOS 26.0, visionOS 26.0, *)
extension HealthKit.HKMedicationDoseEvent {
  #if compiler(>=5.3) && $NonescapableTypes
  public var doseQuantity: Swift.Double? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var scheduledDoseQuantity: Swift.Double? {
    get
  }
  #endif
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
public struct HKSourceQueryDescriptor<Sample> where Sample : HealthKit.HKSample {
  public var predicate: HealthKit.HKSamplePredicate<Sample>
  public init(predicate: HealthKit.HKSamplePredicate<Sample>)
}
@available(iOS 15.4, watchOS 8.5, macCatalyst 15.4, macOS 13.0, *)
extension HealthKit.HKSourceQueryDescriptor : HealthKit.HKAsyncQuery {
  public func result(for healthStore: HealthKit.HKHealthStore) async throws -> [HealthKit.HKSource]
  @available(iOS 15.4, watchOS 8.5, macOS 13.0, macCatalyst 15.4, *)
  public typealias Output = [HealthKit.HKSource]
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HealthKit.HKSamplePredicate {
  #if compiler(>=5.3) && $NonescapableTypes
  public static func gad7Assessment(_ predicate: Foundation.NSPredicate? = nil) -> HealthKit.HKSamplePredicate<HealthKit.HKGAD7Assessment>
  #endif
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HealthKit.HKGAD7Assessment {
  #if compiler(>=5.3) && $NonescapableTypes
  convenience public init(date: Foundation.Date, answers: [HealthKit.HKGAD7Assessment.Answer], metadata: [Swift.String : Any]? = [:])
  #endif
  public var answers: [HealthKit.HKGAD7Assessment.Answer] {
    get
  }
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValue : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValueAppetiteChanges : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValueAppleStandHour : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValueAppleWalkingSteadinessEvent : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValueCervicalMucusQuality : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValueContraceptive : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValueEnvironmentalAudioExposureEvent : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValueHeadphoneAudioExposureEvent : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValueLowCardioFitnessEvent : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS, introduced: 16.0, deprecated: 18.0, renamed: "HKCategoryValueVaginalBleeding")
@available(watchOS, introduced: 9.0, deprecated: 11.0, renamed: "HKCategoryValueVaginalBleeding")
@available(macCatalyst, introduced: 16.0, deprecated: 18.0, renamed: "HKCategoryValueVaginalBleeding")
@available(macOS, introduced: 13.0, deprecated: 15.0, renamed: "HKCategoryValueVaginalBleeding")
@available(visionOS, introduced: 1.0, deprecated: 2.0, renamed: "HKCategoryValueVaginalBleeding")
extension HealthKit.HKCategoryValueMenstrualFlow : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValueOvulationTestResult : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValuePregnancyTestResult : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValuePresence : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValueProgesteroneTestResult : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValueSeverity : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValueSleepAnalysis : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HealthKit.HKCategoryValueVaginalBleeding : HealthKit.HKCategoryValuePredicateProviding {
}
@available(iOS 16.0, watchOS 9.0, macCatalyst 16.0, macOS 13.0, *)
extension HealthKit.HKCategoryValueSleepAnalysis {
  public static var allAsleepValues: Swift.Set<HealthKit.HKCategoryValueSleepAnalysis> {
    get
  }
}
@available(iOS 26.0, watchOS 26.0, macCatalyst 26.0, macOS 26.0, visionOS 26.0, *)
public struct HKUserAnnotatedMedicationQueryDescriptor {
  public var predicate: Foundation.NSPredicate?
  public var limit: Swift.Int?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(predicate: Foundation.NSPredicate? = nil, limit: Swift.Int? = nil)
  #endif
}
@available(iOS 26.0, watchOS 26.0, macCatalyst 26.0, macOS 26.0, visionOS 26.0, *)
extension HealthKit.HKUserAnnotatedMedicationQueryDescriptor : HealthKit.HKAsyncQuery {
  public func result(for healthStore: HealthKit.HKHealthStore) async throws -> [HealthKit.HKUserAnnotatedMedication]
  @available(iOS 26.0, watchOS 26.0, visionOS 26.0, macOS 26.0, macCatalyst 26.0, *)
  public typealias Output = [HealthKit.HKUserAnnotatedMedication]
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HealthKit.HKSamplePredicate {
  #if compiler(>=5.3) && $NonescapableTypes
  public static func phq9Assessment(_ predicate: Foundation.NSPredicate? = nil) -> HealthKit.HKSamplePredicate<HealthKit.HKPHQ9Assessment>
  #endif
}
@available(iOS 18.0, watchOS 11.0, macCatalyst 18.0, macOS 15.0, visionOS 2.0, *)
extension HealthKit.HKPHQ9Assessment {
  #if compiler(>=5.3) && $NonescapableTypes
  convenience public init(date: Foundation.Date, answers: [HealthKit.HKPHQ9Assessment.Answer], metadata: [Swift.String : Any]? = [:])
  #endif
  public var answers: [HealthKit.HKPHQ9Assessment.Answer] {
    get
  }
}
