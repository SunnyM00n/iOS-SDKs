// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -user-module-version 217.1 -module-name WirelessInsights
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import Foundation
import Swift
@_exported import WirelessInsights
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public struct ServicePrediction : Swift.Sendable, Swift.Hashable, Swift.Codable {
  public enum Impact : Swift.Sendable, Swift.Hashable, Swift.Codable, Swift.Comparable {
    case low
    case medium
    case high
    public static func < (a: WirelessInsights.ServicePrediction.Impact, b: WirelessInsights.ServicePrediction.Impact) -> Swift.Bool
    public static func == (a: WirelessInsights.ServicePrediction.Impact, b: WirelessInsights.ServicePrediction.Impact) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Confidence : Swift.Sendable, Swift.Hashable, Swift.Codable, Swift.Comparable {
    case low
    case medium
    case high
    public static func < (a: WirelessInsights.ServicePrediction.Confidence, b: WirelessInsights.ServicePrediction.Confidence) -> Swift.Bool
    public static func == (a: WirelessInsights.ServicePrediction.Confidence, b: WirelessInsights.ServicePrediction.Confidence) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct QuantizedInterval : Swift.Sendable {
    public static let minimal: Swift.Double
    public static let short: Swift.Double
    public static let medium: Swift.Double
    public static let long: Swift.Double
  }
  public let impact: WirelessInsights.ServicePrediction.Impact
  public let predictedStartTime: Foundation.Date
  public let predictedInterval: Foundation.TimeInterval
  public struct ConfidenceScore : Swift.Sendable, Swift.Hashable, Swift.Codable {
    public let prediction: WirelessInsights.ServicePrediction.Confidence
    public let startTime: WirelessInsights.ServicePrediction.Confidence
    public let duration: WirelessInsights.ServicePrediction.Confidence
    public static func == (a: WirelessInsights.ServicePrediction.ConfidenceScore, b: WirelessInsights.ServicePrediction.ConfidenceScore) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public let confidenceScore: WirelessInsights.ServicePrediction.ConfidenceScore
  public static func == (a: WirelessInsights.ServicePrediction, b: WirelessInsights.ServicePrediction) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
public enum ServicePredictionError : Swift.Error {
  case unsupportedDevice
  case connectionError
  public static func == (a: WirelessInsights.ServicePredictionError, b: WirelessInsights.ServicePredictionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
final public class ServicePredictionProvider {
  final public var servicePredictions: any _Concurrency.AsyncSequence<[WirelessInsights.ServicePrediction], any Swift.Error> {
    get
  }
  public init()
  @objc deinit
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension WirelessInsights.ServicePredictionError : Swift.Equatable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(macCatalyst, unavailable)
@available(visionOS, unavailable)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension WirelessInsights.ServicePredictionError : Swift.Hashable {}
