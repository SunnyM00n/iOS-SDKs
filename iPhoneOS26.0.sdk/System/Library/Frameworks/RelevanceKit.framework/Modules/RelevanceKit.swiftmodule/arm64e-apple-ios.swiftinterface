// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -library-level api -enable-upcoming-feature MemberImportVisibility -enable-experimental-feature DebugDescriptionMacro -user-module-version 107 -module-name RelevanceKit
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import CoreLocation
import Foundation
import OSLog
@_exported import RelevanceKit
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(macOS 26.0, iOS 26.0, watchOS 26.0, tvOS 26.0, visionOS 26.0, *)
extension RelevanceKit.RelevantContext {
  public static func date(_ exact: Foundation.Date, kind: RelevanceKit.RelevantContext.DateKind) -> RelevanceKit.RelevantContext
  public static func date(interval: Foundation.DateInterval, kind: RelevanceKit.RelevantContext.DateKind) -> RelevanceKit.RelevantContext
  public static func date(range: Swift.ClosedRange<Foundation.Date>, kind: RelevanceKit.RelevantContext.DateKind) -> RelevanceKit.RelevantContext
  public struct DateKind {
    public static var informational: RelevanceKit.RelevantContext.DateKind {
      get
    }
    public static var `default`: RelevanceKit.RelevantContext.DateKind {
      get
    }
    public static var scheduled: RelevanceKit.RelevantContext.DateKind {
      get
    }
  }
}
@available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, visionOS 1.0, *)
@_originallyDefinedIn(module: "AppIntents", macOS 26.0)
@_originallyDefinedIn(module: "AppIntents", iOS 26.0)
@_originallyDefinedIn(module: "AppIntents", watchOS 26.0)
@_originallyDefinedIn(module: "AppIntents", tvOS 26.0)
@_originallyDefinedIn(module: "AppIntents", visionOS 26.0)
public struct RelevantContext {
  public static func date(_ exact: Foundation.Date) -> RelevanceKit.RelevantContext
  @available(macOS, introduced: 14.0, deprecated: 26.0, message: "Please use date(interval:) or date(range:).")
  @available(iOS, introduced: 17.0, deprecated: 26.0, message: "Please use date(interval:) or date(range:).")
  @available(watchOS, introduced: 10.0, deprecated: 26.0, message: "Please use date(interval:) or date(range:).")
  @available(tvOS, introduced: 17.0, deprecated: 26.0, message: "Please use date(interval:) or date(range:).")
  @available(visionOS, introduced: 1.0, deprecated: 26.0, message: "Please use date(interval:) or date(range:).")
  public static func date(from: Foundation.Date, to: Foundation.Date) -> RelevanceKit.RelevantContext
  @available(macOS 14.0, iOS 17.0, watchOS 10.0, tvOS 17.0, *)
  @available(visionOS, unavailable)
  public static func location(_ exact: CoreLocation.CLRegion) -> RelevanceKit.RelevantContext
  public static func location(inferred: RelevanceKit.RelevantContext.InferredLocation) -> RelevanceKit.RelevantContext
  public struct InferredLocation {
    public static var home: RelevanceKit.RelevantContext.InferredLocation {
      get
    }
    public static var work: RelevanceKit.RelevantContext.InferredLocation {
      get
    }
    public static var school: RelevanceKit.RelevantContext.InferredLocation {
      get
    }
    public static var commute: RelevanceKit.RelevantContext.InferredLocation {
      get
    }
  }
  public static func sleep(_ condition: RelevanceKit.RelevantContext.SleepCondition) -> RelevanceKit.RelevantContext
  public struct SleepCondition {
    public static var wakeup: RelevanceKit.RelevantContext.SleepCondition {
      get
    }
    public static var bedtime: RelevanceKit.RelevantContext.SleepCondition {
      get
    }
  }
  public static func fitness(_ condition: RelevanceKit.RelevantContext.FitnessCondition) -> RelevanceKit.RelevantContext
  public struct FitnessCondition {
    public static var workoutActive: RelevanceKit.RelevantContext.FitnessCondition {
      get
    }
    public static var activityRingsIncomplete: RelevanceKit.RelevantContext.FitnessCondition {
      get
    }
  }
  public static func hardware(headphones: RelevanceKit.RelevantContext.HeadphonesCondition) -> RelevanceKit.RelevantContext
  public struct HeadphonesCondition {
    public static var connected: RelevanceKit.RelevantContext.HeadphonesCondition {
      get
    }
  }
}
