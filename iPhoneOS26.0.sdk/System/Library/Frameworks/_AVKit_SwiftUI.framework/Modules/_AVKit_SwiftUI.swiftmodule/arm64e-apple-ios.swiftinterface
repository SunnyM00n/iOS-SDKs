// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 1270.77.1.11 -module-name _AVKit_SwiftUI
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import AVFoundation
@_exported import AVKit
import Combine
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 18.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func onCameraCaptureEvent(isEnabled: Swift.Bool = true, primaryAction: @escaping (AVKit.AVCaptureEvent) -> Swift.Void, secondaryAction: @escaping (AVKit.AVCaptureEvent) -> Swift.Void) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func onCameraCaptureEvent(isEnabled: Swift.Bool = true, action: @escaping (AVKit.AVCaptureEvent) -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func onCameraCaptureEvent(isEnabled: Swift.Bool = true, defaultSoundDisabled: Swift.Bool = false, primaryAction: @escaping (AVKit.AVCaptureEvent) async -> Swift.Void, secondaryAction: @escaping (AVKit.AVCaptureEvent) async -> Swift.Void) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func onCameraCaptureEvent(isEnabled: Swift.Bool = true, defaultSoundDisabled: Swift.Bool = false, action: @escaping (AVKit.AVCaptureEvent) async -> Swift.Void) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func onCameraCaptureEvent(isEnabled: Swift.Bool = true, defaultSoundDisabled: Swift.Bool = false, primaryAction: @escaping (AVKit.AVCaptureEvent) -> Swift.Void, secondaryAction: @escaping (AVKit.AVCaptureEvent) -> Swift.Void) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func onCameraCaptureEvent(isEnabled: Swift.Bool = true, defaultSoundDisabled: Swift.Bool = false, action: @escaping (AVKit.AVCaptureEvent) -> Swift.Void) -> some SwiftUICore.View
  
}
@available(iOS 14.0, macOS 11.0, watchOS 7.0, tvOS 14.0, *)
@_Concurrency.MainActor @preconcurrency public struct VideoPlayer<VideoOverlay> : SwiftUICore.View where VideoOverlay : SwiftUICore.View {
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public init(player: AVFoundation.AVPlayer?, @SwiftUICore.ViewBuilder videoOverlay: () -> VideoOverlay)
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
  public typealias Body = @_opaqueReturnTypeOf("$s14_AVKit_SwiftUI11VideoPlayerV4bodyQrvp", 0) __<VideoOverlay>
}
@available(iOS 14.0, macOS 11.0, watchOS 7.0, tvOS 14.0, *)
extension _AVKit_SwiftUI.VideoPlayer where VideoOverlay == SwiftUICore.EmptyView {
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public init(player: AVFoundation.AVPlayer?)
  #endif
}
@available(iOS 14.0, macOS 11.0, watchOS 7.0, tvOS 14.0, *)
extension _AVKit_SwiftUI.VideoPlayer : Swift.Sendable {}
