// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -module-link-name swift_DarwinFoundation1 -swift-version 6 -enforce-exclusivity=checked -O -library-level api -module-abi-name Darwin -enable-upcoming-feature MemberImportVisibility -enable-experimental-feature DebugDescriptionMacro -user-module-version 347.0.12 -module-name _DarwinFoundation1
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import Swift
@_exported import _DarwinFoundation1
import _DarwinFoundation1._errno
import _DarwinFoundation1._math
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
public var errno: Swift.Int32 {
  get
  set(val)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@objc public enum POSIXErrorCode : Swift.Int32, Swift.Sendable {
  case EPERM = 1
  case ENOENT = 2
  case ESRCH = 3
  case EINTR = 4
  case EIO = 5
  case ENXIO = 6
  case E2BIG = 7
  case ENOEXEC = 8
  case EBADF = 9
  case ECHILD = 10
  case EDEADLK = 11
  case ENOMEM = 12
  case EACCES = 13
  case EFAULT = 14
  case ENOTBLK = 15
  case EBUSY = 16
  case EEXIST = 17
  case EXDEV = 18
  case ENODEV = 19
  case ENOTDIR = 20
  case EISDIR = 21
  case EINVAL = 22
  case ENFILE = 23
  case EMFILE = 24
  case ENOTTY = 25
  case ETXTBSY = 26
  case EFBIG = 27
  case ENOSPC = 28
  case ESPIPE = 29
  case EROFS = 30
  case EMLINK = 31
  case EPIPE = 32
  case EDOM = 33
  case ERANGE = 34
  case EAGAIN = 35
  public static var EWOULDBLOCK: _DarwinFoundation1.POSIXErrorCode {
    get
  }
  case EINPROGRESS = 36
  case EALREADY = 37
  case ENOTSOCK = 38
  case EDESTADDRREQ = 39
  case EMSGSIZE = 40
  case EPROTOTYPE = 41
  case ENOPROTOOPT = 42
  case EPROTONOSUPPORT = 43
  case ESOCKTNOSUPPORT = 44
  case ENOTSUP = 45
  case EPFNOSUPPORT = 46
  case EAFNOSUPPORT = 47
  case EADDRINUSE = 48
  case EADDRNOTAVAIL = 49
  case ENETDOWN = 50
  case ENETUNREACH = 51
  case ENETRESET = 52
  case ECONNABORTED = 53
  case ECONNRESET = 54
  case ENOBUFS = 55
  case EISCONN = 56
  case ENOTCONN = 57
  case ESHUTDOWN = 58
  case ETOOMANYREFS = 59
  case ETIMEDOUT = 60
  case ECONNREFUSED = 61
  case ELOOP = 62
  case ENAMETOOLONG = 63
  case EHOSTDOWN = 64
  case EHOSTUNREACH = 65
  case ENOTEMPTY = 66
  case EPROCLIM = 67
  case EUSERS = 68
  case EDQUOT = 69
  case ESTALE = 70
  case EREMOTE = 71
  case EBADRPC = 72
  case ERPCMISMATCH = 73
  case EPROGUNAVAIL = 74
  case EPROGMISMATCH = 75
  case EPROCUNAVAIL = 76
  case ENOLCK = 77
  case ENOSYS = 78
  case EFTYPE = 79
  case EAUTH = 80
  case ENEEDAUTH = 81
  case EPWROFF = 82
  case EDEVERR = 83
  case EOVERFLOW = 84
  case EBADEXEC = 85
  case EBADARCH = 86
  case ESHLIBVERS = 87
  case EBADMACHO = 88
  case ECANCELED = 89
  case EIDRM = 90
  case ENOMSG = 91
  case EILSEQ = 92
  case ENOATTR = 93
  case EBADMSG = 94
  case EMULTIHOP = 95
  case ENODATA = 96
  case ENOLINK = 97
  case ENOSR = 98
  case ENOSTR = 99
  case EPROTO = 100
  case ETIME = 101
  case _EOPNOTSUPP_UNIX2003 = 102
  public static var EOPNOTSUPP: _DarwinFoundation1.POSIXErrorCode {
    get
  }
  case ENOPOLICY = 103
  case ENOTRECOVERABLE = 104
  case EOWNERDEAD = 105
  case EQFULL = 106
  case ENOTCAPABLE = 107
  public static var ELAST: _DarwinFoundation1.POSIXErrorCode {
    get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.Int32)
  #endif
  @available(iOS 7.0, tvOS 9.0, watchOS 2.0, visionOS 1.0, macOS 10.9, *)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 3.0, message: "Please use 'Double.pi' or '.pi' to get the value of correct type and avoid casting.")
public let M_PI: Swift.Double
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 3.0, message: "Please use 'Double.pi / 2' or '.pi / 2' to get the value of correct type and avoid casting.")
public let M_PI_2: Swift.Double
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 3.0, message: "Please use 'Double.pi / 4' or '.pi / 4' to get the value of correct type and avoid casting.")
public let M_PI_4: Swift.Double
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 3.0, message: "Please use '2.squareRoot()'.")
public let M_SQRT2: Swift.Double
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 3.0, message: "Please use '0.5.squareRoot()'.")
public let M_SQRT1_2: Swift.Double
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 4.2, renamed: "abs")
@_transparent public func fabs<T>(_ x: T) -> T where T : Swift.FloatingPoint {
    return x.magnitude
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func sqrt<T>(_ x: T) -> T where T : Swift.FloatingPoint {
    return x.squareRoot()
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func fma<T>(_ x: T, _ y: T, _ z: T) -> T where T : Swift.FloatingPoint {
    return z.addingProduct(x, y)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func remainder<T>(_ x: T, _ y: T) -> T where T : Swift.FloatingPoint {
    return x.remainder(dividingBy: y)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func fmod<T>(_ x: T, _ y: T) -> T where T : Swift.FloatingPoint {
    return x.truncatingRemainder(dividingBy: y)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func ceil<T>(_ x: T) -> T where T : Swift.FloatingPoint {
    return x.rounded(.up)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func floor<T>(_ x: T) -> T where T : Swift.FloatingPoint {
    return x.rounded(.down)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func round<T>(_ x: T) -> T where T : Swift.FloatingPoint {
    return x.rounded()
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func trunc<T>(_ x: T) -> T where T : Swift.FloatingPoint {
    return x.rounded(.towardZero)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func scalbn<T>(_ x: T, _ n: Swift.Int) -> T where T : Swift.FloatingPoint {
    return T(sign: .plus, exponent: T.Exponent(n), significand: x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func modf<T>(_ x: T) -> (T, T) where T : Swift.FloatingPoint {
     
    guard x.isFinite else { return (x+0, 0) }
    let integral = trunc(x)
    let fractional = x - integral
    return (integral, fractional)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func frexp<T>(_ x: T) -> (T, Swift.Int) where T : Swift.BinaryFloatingPoint {
    guard x.isFinite else { return (x+0, 0) }
    guard x != 0 else { return (x, 0) }
     
     
    return (x.significand / 2, Int(x.exponent + 1))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 4.2, renamed: "scalbn")
@_transparent public func ldexp(_ x: Swift.Float, _ n: Swift.Int) -> Swift.Float {
    return Float(sign: .plus, exponent: n, significand: x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 4.2, renamed: "scalbn")
@_transparent public func ldexp(_ x: Swift.Double, _ n: Swift.Int) -> Swift.Double {
    return Double(sign: .plus, exponent: n, significand: x)
}
@available(*, unavailable, message: "use the floatingPointClass property.")
public func fpclassify<T>(_ value: T) -> Swift.Int where T : Swift.FloatingPoint
@available(*, unavailable, message: "use the isNormal property.")
public func isnormal<T>(_ value: T) -> Swift.Bool where T : Swift.FloatingPoint
@available(*, unavailable, message: "use the isFinite property.")
public func isfinite<T>(_ value: T) -> Swift.Bool where T : Swift.FloatingPoint
@available(*, unavailable, message: "use the isInfinite property.")
public func isinf<T>(_ value: T) -> Swift.Bool where T : Swift.FloatingPoint
@available(*, unavailable, message: "use the isNaN property.")
public func isnan<T>(_ value: T) -> Swift.Bool where T : Swift.FloatingPoint
@available(*, unavailable, message: "use the sign property.")
public func signbit<T>(_ value: T) -> Swift.Int where T : Swift.FloatingPoint
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 4.2, message: "use the exponent property.")
public func ilogb<T>(_ x: T) -> Swift.Int where T : Swift.BinaryFloatingPoint
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func acos(_ x: Swift.Float) -> Swift.Float {
    return Float(acosf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func asin(_ x: Swift.Float) -> Swift.Float {
    return Float(asinf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func atan(_ x: Swift.Float) -> Swift.Float {
    return Float(atanf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func tan(_ x: Swift.Float) -> Swift.Float {
    return Float(tanf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func acosh(_ x: Swift.Float) -> Swift.Float {
    return Float(acoshf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func asinh(_ x: Swift.Float) -> Swift.Float {
    return Float(asinhf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func atanh(_ x: Swift.Float) -> Swift.Float {
    return Float(atanhf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func cosh(_ x: Swift.Float) -> Swift.Float {
    return Float(coshf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func sinh(_ x: Swift.Float) -> Swift.Float {
    return Float(sinhf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func tanh(_ x: Swift.Float) -> Swift.Float {
    return Float(tanhf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func expm1(_ x: Swift.Float) -> Swift.Float {
    return Float(expm1f(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log1p(_ x: Swift.Float) -> Swift.Float {
    return Float(log1pf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func logb(_ x: Swift.Float) -> Swift.Float {
    return Float(logbf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func cbrt(_ x: Swift.Float) -> Swift.Float {
    return Float(cbrtf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func erf(_ x: Swift.Float) -> Swift.Float {
    return Float(erff(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func erfc(_ x: Swift.Float) -> Swift.Float {
    return Float(erfcf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func tgamma(_ x: Swift.Float) -> Swift.Float {
    return Float(tgammaf(CFloat(x)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func cos(_ x: Swift.Float) -> Swift.Float {
    return _cos(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func cos(_ x: Swift.Double) -> Swift.Double {
    return _cos(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func sin(_ x: Swift.Float) -> Swift.Float {
    return _sin(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func sin(_ x: Swift.Double) -> Swift.Double {
    return _sin(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func exp(_ x: Swift.Float) -> Swift.Float {
    return _exp(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func exp(_ x: Swift.Double) -> Swift.Double {
    return _exp(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func exp2(_ x: Swift.Float) -> Swift.Float {
    return _exp2(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func exp2(_ x: Swift.Double) -> Swift.Double {
    return _exp2(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log(_ x: Swift.Float) -> Swift.Float {
    return _log(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log(_ x: Swift.Double) -> Swift.Double {
    return _log(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log10(_ x: Swift.Float) -> Swift.Float {
    return _log10(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log10(_ x: Swift.Double) -> Swift.Double {
    return _log10(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log2(_ x: Swift.Float) -> Swift.Float {
    return _log2(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func log2(_ x: Swift.Double) -> Swift.Double {
    return _log2(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func nearbyint(_ x: Swift.Float) -> Swift.Float {
    return _nearbyint(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func nearbyint(_ x: Swift.Double) -> Swift.Double {
    return _nearbyint(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func rint(_ x: Swift.Float) -> Swift.Float {
    return _rint(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func rint(_ x: Swift.Double) -> Swift.Double {
    return _rint(x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func atan2(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
    return Float(atan2f(CFloat(lhs), CFloat(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func hypot(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
    return Float(hypotf(CFloat(lhs), CFloat(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func pow(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
    return Float(powf(CFloat(lhs), CFloat(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func copysign(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
    return Float(copysignf(CFloat(lhs), CFloat(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func nextafter(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
    return Float(nextafterf(CFloat(lhs), CFloat(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func fdim(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
    return Float(fdimf(CFloat(lhs), CFloat(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func fmax(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
    return Float(fmaxf(CFloat(lhs), CFloat(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func fmin(_ lhs: Swift.Float, _ rhs: Swift.Float) -> Swift.Float {
    return Float(fminf(CFloat(lhs), CFloat(rhs)))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func lgamma(_ x: Swift.Float) -> (Swift.Float, Swift.Int) {
    var sign = Int32(0)
    let value = lgammaf_r(CFloat(x), &sign)
    return (Float(value), Int(sign))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func lgamma(_ x: Swift.Double) -> (Swift.Double, Swift.Int) {
    var sign = Int32(0)
    let value = lgamma_r(CDouble(x), &sign)
    return (Double(value), Int(sign))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func remquo(_ x: Swift.Float, _ y: Swift.Float) -> (Swift.Float, Swift.Int) {
    var quo = Int32(0)
    let rem = remquof(CFloat(x), CFloat(y), &quo)
    return (Float(rem), Int(quo))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func remquo(_ x: Swift.Double, _ y: Swift.Double) -> (Swift.Double, Swift.Int) {
    var quo = Int32(0)
    let rem = remquo(CDouble(x), CDouble(y), &quo)
    return (Double(rem), Int(quo))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@available(swift, deprecated: 4.2, message: "use Float(nan: Float.RawSignificand).")
@_transparent public func nan(_ tag: Swift.String) -> Swift.Float {
    return Float(nanf(tag))
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func jn(_ n: Swift.Int, _ x: Swift.Double) -> Swift.Double {
    return jn(Int32(n), x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
@_transparent public func yn(_ n: Swift.Int, _ x: Swift.Double) -> Swift.Double {
    return yn(Int32(n), x)
}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
extension _DarwinFoundation1.POSIXErrorCode : Swift.Equatable {}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
extension _DarwinFoundation1.POSIXErrorCode : Swift.Hashable {}
@available(macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0, *)
extension _DarwinFoundation1.POSIXErrorCode : Swift.RawRepresentable {}
