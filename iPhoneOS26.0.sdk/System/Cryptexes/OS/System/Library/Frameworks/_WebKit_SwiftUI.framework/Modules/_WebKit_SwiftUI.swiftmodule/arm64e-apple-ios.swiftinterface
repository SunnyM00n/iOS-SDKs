// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -user-module-version 7622.1.22.10.9 -module-name _WebKit_SwiftUI
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import Foundation
import Swift
import SwiftUI
@_exported import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension SwiftUICore.View {
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func webViewBackForwardNavigationGestures(_ value: _WebKit_SwiftUI.WebView.BackForwardNavigationGesturesBehavior) -> some SwiftUICore.View
  
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func webViewMagnificationGestures(_ value: _WebKit_SwiftUI.WebView.MagnificationGesturesBehavior) -> some SwiftUICore.View
  
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func webViewLinkPreviews(_ value: _WebKit_SwiftUI.WebView.LinkPreviewBehavior) -> some SwiftUICore.View
  
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func webViewTextSelection<S>(_ selectability: S) -> some SwiftUICore.View where S : SwiftUICore.TextSelectability
  
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func webViewElementFullscreenBehavior(_ value: _WebKit_SwiftUI.WebView.ElementFullscreenBehavior) -> some SwiftUICore.View
  
  @available(macOS 26.0, *)
  @available(iOS, unavailable)
  @available(visionOS, unavailable)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func webViewContextMenu(@SwiftUICore.ViewBuilder menu: @escaping @_Concurrency.MainActor @Sendable (_WebKit_SwiftUI.WebView.ActivatedElementInfo) -> some View) -> some SwiftUICore.View
  
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func webViewContentBackground(_ visibility: SwiftUICore.Visibility) -> some SwiftUICore.View
  
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func webViewOnScrollGeometryChange<T>(for type: T.Type, of transform: @escaping (SwiftUICore.ScrollGeometry) -> T, action: @escaping (T, T) -> Swift.Void) -> some SwiftUICore.View where T : Swift.Hashable
  
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func webViewScrollPosition(_ position: SwiftUICore.Binding<SwiftUICore.ScrollPosition>) -> some SwiftUICore.View
  
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  nonisolated public func webViewScrollInputBehavior(_ behavior: SwiftUI.ScrollInputBehavior, for input: SwiftUI.ScrollInputKind) -> some SwiftUICore.View
  
}
extension WebKit.WebPage {
  #if compiler(>=5.3) && $NonescapableTypes
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor final public var themeColor: SwiftUICore.Color? {
    get
  }
  #endif
}
extension WebKit.WebPage.NavigationAction {
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor public var modifierFlags: SwiftUICore.EventModifiers {
    get
  }
}
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
@_Concurrency.MainActor @preconcurrency public struct WebView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ page: WebKit.WebPage)
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public init(url: Foundation.URL?)
  #endif
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
  @available(tvOS, unavailable)
  @available(watchOS, unavailable)
  public typealias Body = @_opaqueReturnTypeOf("$s15_WebKit_SwiftUI0A4ViewV4bodyQrvp", 0) __
}
extension _WebKit_SwiftUI.WebView {
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public struct BackForwardNavigationGesturesBehavior : Swift.Sendable {
    public static let automatic: _WebKit_SwiftUI.WebView.BackForwardNavigationGesturesBehavior
    public static let enabled: _WebKit_SwiftUI.WebView.BackForwardNavigationGesturesBehavior
    public static let disabled: _WebKit_SwiftUI.WebView.BackForwardNavigationGesturesBehavior
  }
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public struct MagnificationGesturesBehavior : Swift.Sendable {
    public static let automatic: _WebKit_SwiftUI.WebView.MagnificationGesturesBehavior
    public static let enabled: _WebKit_SwiftUI.WebView.MagnificationGesturesBehavior
    public static let disabled: _WebKit_SwiftUI.WebView.MagnificationGesturesBehavior
  }
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public struct LinkPreviewBehavior : Swift.Sendable {
    public static let automatic: _WebKit_SwiftUI.WebView.LinkPreviewBehavior
    public static let enabled: _WebKit_SwiftUI.WebView.LinkPreviewBehavior
    public static let disabled: _WebKit_SwiftUI.WebView.LinkPreviewBehavior
  }
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public struct ElementFullscreenBehavior : Swift.Sendable {
    public static let automatic: _WebKit_SwiftUI.WebView.ElementFullscreenBehavior
    public static let enabled: _WebKit_SwiftUI.WebView.ElementFullscreenBehavior
    public static let disabled: _WebKit_SwiftUI.WebView.ElementFullscreenBehavior
  }
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  public struct ActivatedElementInfo : Swift.Hashable, Swift.Sendable {
    public let linkURL: Foundation.URL?
    public static func == (a: _WebKit_SwiftUI.WebView.ActivatedElementInfo, b: _WebKit_SwiftUI.WebView.ActivatedElementInfo) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
@available(watchOS, unavailable)
@available(tvOS, unavailable)
extension _WebKit_SwiftUI.WebView : Swift.Sendable {}
