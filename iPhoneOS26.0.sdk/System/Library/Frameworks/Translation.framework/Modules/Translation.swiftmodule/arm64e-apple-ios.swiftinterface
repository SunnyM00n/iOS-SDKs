// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 350.1 -module-name Translation
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import Foundation
import Swift
@_exported import Translation
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 18.0, macOS 15.0, macCatalyst 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public class LanguageAvailability {
  public enum Status : Swift.Equatable, Swift.Sendable {
    case installed
    case supported
    case unsupported
    public static func == (lhs: Translation.LanguageAvailability.Status, rhs: Translation.LanguageAvailability.Status) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var supportedLanguages: [Foundation.Locale.Language] {
    get async
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public func status(from source: Foundation.Locale.Language, to target: Foundation.Locale.Language?) async -> Translation.LanguageAvailability.Status
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func status(for text: Swift.String, to target: Foundation.Locale.Language?) async throws -> Translation.LanguageAvailability.Status
  #endif
  public init()
  @objc deinit
}
@available(iOS 18.0, macOS 15.0, macCatalyst 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct TranslationError : Foundation.LocalizedError {
  public static let unsupportedSourceLanguage: Translation.TranslationError
  public static let unsupportedTargetLanguage: Translation.TranslationError
  public static let unsupportedLanguagePairing: Translation.TranslationError
  public static let unableToIdentifyLanguage: Translation.TranslationError
  public static let nothingToTranslate: Translation.TranslationError
  @available(iOS 26.0, macOS 26.0, *)
  public static let alreadyCancelled: Translation.TranslationError
  @available(iOS 26.0, macOS 26.0, *)
  public static let notInstalled: Translation.TranslationError
  public static let internalError: Translation.TranslationError
  public static func ~= (match: Translation.TranslationError, error: any Swift.Error) -> Swift.Bool
  #if compiler(>=5.3) && $NonescapableTypes
  public var errorDescription: Swift.String? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public var failureReason: Swift.String? {
    get
  }
  #endif
}
@available(iOS 18.0, macOS 15.0, macCatalyst 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public class TranslationSession {
  final public let sourceLanguage: Foundation.Locale.Language?
  final public let targetLanguage: Foundation.Locale.Language?
  @available(iOS 26.0, macOS 26.0, *)
  public var canRequestDownloads: Swift.Bool {
    get
  }
  @available(iOS 26.0, macOS 26.0, *)
  public var isReady: Swift.Bool {
    get async
  }
  public struct Request {
    public var sourceText: Swift.String
    public var clientIdentifier: Swift.String?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(sourceText: Swift.String, clientIdentifier: Swift.String? = nil)
    #endif
  }
  public struct Response : Swift.Sendable {
    public let sourceLanguage: Foundation.Locale.Language
    public let targetLanguage: Foundation.Locale.Language
    public let sourceText: Swift.String
    public let targetText: Swift.String
    public let clientIdentifier: Swift.String?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(sourceLanguage: Foundation.Locale.Language, targetLanguage: Foundation.Locale.Language, sourceText: Swift.String, targetText: Swift.String, clientIdentifier: Swift.String? = nil)
    #endif
  }
  public struct BatchResponse : _Concurrency.AsyncSequence {
    public typealias Element = Translation.TranslationSession.Response
    public func makeAsyncIterator() -> Translation.TranslationSession.BatchResponse.AsyncIterator
    public struct AsyncIterator : _Concurrency.AsyncIteratorProtocol {
      #if compiler(>=5.3) && $NonescapableTypes
      public mutating func next() async throws -> Translation.TranslationSession.BatchResponse.Element?
      #endif
      @available(iOS 18.0, macOS 15.0, macCatalyst 26.0, *)
      @available(tvOS, unavailable)
      @available(watchOS, unavailable)
      @available(visionOS, unavailable)
      public typealias Element = Translation.TranslationSession.BatchResponse.Element
      @available(iOS 18.0, macOS 15.0, macCatalyst 26.0, *)
      @available(tvOS, unavailable, introduced: 18.0)
      @available(watchOS, unavailable, introduced: 11.0)
      @available(visionOS, unavailable, introduced: 2.0)
      @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = any Swift.Error
    }
    @available(iOS 18.0, macOS 15.0, macCatalyst 26.0, *)
    @available(tvOS, unavailable, introduced: 18.0)
    @available(watchOS, unavailable, introduced: 11.0)
    @available(visionOS, unavailable, introduced: 2.0)
    @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = any Swift.Error
  }
  public struct Configuration : Swift.Equatable {
    public var source: Foundation.Locale.Language?
    public var target: Foundation.Locale.Language?
    public var version: Swift.Int {
      get
    }
    public mutating func invalidate()
    #if compiler(>=5.3) && $NonescapableTypes
    public init(source: Foundation.Locale.Language? = nil, target: Foundation.Locale.Language? = nil)
    #endif
    public static func == (lhs: Translation.TranslationSession.Configuration, rhs: Translation.TranslationSession.Configuration) -> Swift.Bool
  }
  public func translate(_ string: Swift.String) async throws -> Translation.TranslationSession.Response
  public func translate(batch: [Translation.TranslationSession.Request]) -> Translation.TranslationSession.BatchResponse
  public func translations(from batch: [Translation.TranslationSession.Request]) async throws -> [Translation.TranslationSession.Response]
  public func prepareTranslation() async throws
  @available(iOS 26.0, macOS 26.0, *)
  public func cancel()
  #if compiler(>=5.3) && $NonescapableTypes
  @available(iOS 26.0, macOS 26.0, *)
  convenience public init(installedSource source: Foundation.Locale.Language, target: Foundation.Locale.Language?)
  #endif
  @objc deinit
}
@available(iOS 18.0, macOS 15.0, macCatalyst 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension Translation.LanguageAvailability.Status : Swift.Hashable {}
