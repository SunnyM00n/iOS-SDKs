// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -library-level api -enable-upcoming-feature InternalImportsByDefault -enable-upcoming-feature MemberImportVisibility -enable-experimental-feature DebugDescriptionMacro -user-module-version 8.43.1 -module-name IdentityDocumentServices
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
public import Foundation
public import Swift
public import _Concurrency
public import _StringProcessing
public import _SwiftConcurrencyShims
@available(iOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct IdentityDocumentWebPresentmentRawRequestValidator {
  public init()
  public func validateISO18013MobileDocumentRequest(_ requestData: Foundation.Data, origin: Foundation.URL) throws -> IdentityDocumentServices.ISO18013MobileDocumentRequest
}
@available(iOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct ISO18013MobileDocumentRequest : IdentityDocumentServices.IdentityDocumentWebPresentmentRequest {
  public var presentmentRequests: [IdentityDocumentServices.ISO18013MobileDocumentRequest.PresentmentRequest]
  public var requestAuthentications: [IdentityDocumentServices.ISO18013MobileDocumentRequest.RequestAuthentication]
  public init(presentmentRequests: [IdentityDocumentServices.ISO18013MobileDocumentRequest.PresentmentRequest], requestAuthentications: [IdentityDocumentServices.ISO18013MobileDocumentRequest.RequestAuthentication])
}
@available(iOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension IdentityDocumentServices.ISO18013MobileDocumentRequest {
  public struct RequestAuthentication : Swift.Sendable {
    public var authenticationCertificateChain: [Security.SecCertificate] {
      get
      set
    }
    public init(authenticationCertificateChain: [Security.SecCertificate])
  }
  public struct PresentmentRequest : Swift.Sendable {
    public var documentRequestSets: [IdentityDocumentServices.ISO18013MobileDocumentRequest.DocumentRequestSet]
    public var isMandatory: Swift.Bool
    public init(documentRequestSets: [IdentityDocumentServices.ISO18013MobileDocumentRequest.DocumentRequestSet], isMandatory: Swift.Bool)
  }
  public struct DocumentRequestSet : Swift.Sendable {
    public var requests: [IdentityDocumentServices.ISO18013MobileDocumentRequest.DocumentRequest]
    public init(requests: [IdentityDocumentServices.ISO18013MobileDocumentRequest.DocumentRequest])
  }
  public struct DocumentRequest : Swift.Sendable {
    public var documentType: Swift.String
    public var namespaces: [Swift.String : [Swift.String : IdentityDocumentServices.ISO18013MobileDocumentRequest.ElementInfo]]
    public init(documentType: Swift.String, namespaces: [Swift.String : [Swift.String : IdentityDocumentServices.ISO18013MobileDocumentRequest.ElementInfo]])
  }
  public struct ElementInfo : Swift.Sendable {
    public var isRetaining: Swift.Bool
    public init(isRetaining: Swift.Bool)
  }
}
@available(iOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct ISO18013MobileDocumentResponse : IdentityDocumentServices.IdentityDocumentWebPresentmentResponse {
  public let responseData: Foundation.Data
  public init(responseData: Foundation.Data)
}
@available(iOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct IdentityDocumentPresentmentError : Foundation.LocalizedError {
  public enum Code : Swift.Int, Swift.Sendable {
    case unknown
    case invalidRequest
    case requestInProgress
    case cancelled
    case notEntitled
    #if compiler(>=5.3) && $NonescapableTypes
    public init?(rawValue: Swift.Int)
    #endif
    @available(iOS 26.0, macOS 26.0, *)
    @available(tvOS, unavailable)
    @available(watchOS, unavailable)
    @available(visionOS, unavailable)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public let code: IdentityDocumentServices.IdentityDocumentPresentmentError.Code
  public let debugDescription: Swift.String
  public static let unknown: IdentityDocumentServices.IdentityDocumentPresentmentError.Code
  public static let invalidRequest: IdentityDocumentServices.IdentityDocumentPresentmentError.Code
  public static let requestInProgress: IdentityDocumentServices.IdentityDocumentPresentmentError.Code
  public static let cancelled: IdentityDocumentServices.IdentityDocumentPresentmentError.Code
  public static let notEntitled: IdentityDocumentServices.IdentityDocumentPresentmentError.Code
}
@available(iOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension IdentityDocumentServices.IdentityDocumentPresentmentError.Code {
  public static func ~= (lhs: IdentityDocumentServices.IdentityDocumentPresentmentError.Code, rhs: any Swift.Error) -> Swift.Bool
}
@available(iOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct IdentityDocumentWebPresentmentRawRequest : Swift.Sendable {
  public enum RequestType : Swift.Sendable {
    case iso18013MobileDocument
    public static func == (a: IdentityDocumentServices.IdentityDocumentWebPresentmentRawRequest.RequestType, b: IdentityDocumentServices.IdentityDocumentWebPresentmentRawRequest.RequestType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var requestType: IdentityDocumentServices.IdentityDocumentWebPresentmentRawRequest.RequestType
  public var requestData: Foundation.Data
  public init(requestType: IdentityDocumentServices.IdentityDocumentWebPresentmentRawRequest.RequestType, requestData: Foundation.Data)
}
@available(iOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol IdentityDocumentWebPresentmentRequest : Swift.Sendable {
}
@available(iOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol IdentityDocumentWebPresentmentResponse : Swift.Sendable {
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension IdentityDocumentServices.IdentityDocumentProviderRegistrationStore {
  public enum RegistrationError : Foundation.LocalizedError {
    case unknown
    case invalidRequest
    case notAuthorized
    case notSupported
    public static func == (a: IdentityDocumentServices.IdentityDocumentProviderRegistrationStore.RegistrationError, b: IdentityDocumentServices.IdentityDocumentProviderRegistrationStore.RegistrationError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public actor IdentityDocumentProviderRegistrationStore {
  public var status: IdentityDocumentServices.IdentityDocumentProviderRegistrationStore.Status {
    get async
  }
  public var registrations: [any IdentityDocumentServices.IdentityDocumentRegistration] {
    get async throws
  }
  public init()
  public func addRegistration(_ registration: some IdentityDocumentRegistration) async throws
  public func removeRegistration(forDocumentIdentifier documentIdentifier: Swift.String) async throws
  @objc deinit
  @available(iOS 26.0, *)
  @available(tvOS, unavailable, introduced: 13.0)
  @available(watchOS, unavailable, introduced: 6.0)
  @available(visionOS, unavailable)
  @available(macOS, unavailable, introduced: 10.15)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension IdentityDocumentServices.IdentityDocumentProviderRegistrationStore {
  public enum Status : Swift.Sendable {
    case authorized
    case notDetermined
    case notAuthorized
    case notSupported
    public static func == (a: IdentityDocumentServices.IdentityDocumentProviderRegistrationStore.Status, b: IdentityDocumentServices.IdentityDocumentProviderRegistrationStore.Status) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public protocol IdentityDocumentRegistration : Swift.Sendable {
  var documentIdentifier: Swift.String { get }
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
public struct MobileDocumentRegistration : IdentityDocumentServices.IdentityDocumentRegistration {
  public var mobileDocumentType: Swift.String
  public var supportedAuthorityKeyIdentifiers: [Foundation.Data]
  public var documentIdentifier: Swift.String
  public var invalidationDate: Foundation.Date?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(mobileDocumentType: Swift.String, supportedAuthorityKeyIdentifiers: [Foundation.Data], documentIdentifier: Swift.String = UUID().uuidString, invalidationDate: Foundation.Date? = nil)
  #endif
}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension IdentityDocumentServices.IdentityDocumentProviderRegistrationStore.Status : Swift.Equatable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension IdentityDocumentServices.IdentityDocumentProviderRegistrationStore.Status : Swift.Hashable {}
@available(iOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension IdentityDocumentServices.IdentityDocumentPresentmentError.Code : Swift.Equatable {}
@available(iOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension IdentityDocumentServices.IdentityDocumentPresentmentError.Code : Swift.Hashable {}
@available(iOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension IdentityDocumentServices.IdentityDocumentPresentmentError.Code : Swift.RawRepresentable {}
@available(iOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension IdentityDocumentServices.IdentityDocumentWebPresentmentRawRequest.RequestType : Swift.Equatable {}
@available(iOS 26.0, macOS 26.0, *)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension IdentityDocumentServices.IdentityDocumentWebPresentmentRawRequest.RequestType : Swift.Hashable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension IdentityDocumentServices.IdentityDocumentProviderRegistrationStore.RegistrationError : Swift.Equatable {}
@available(iOS 26.0, *)
@available(macOS, unavailable)
@available(tvOS, unavailable)
@available(watchOS, unavailable)
@available(visionOS, unavailable)
extension IdentityDocumentServices.IdentityDocumentProviderRegistrationStore.RegistrationError : Swift.Hashable {}
