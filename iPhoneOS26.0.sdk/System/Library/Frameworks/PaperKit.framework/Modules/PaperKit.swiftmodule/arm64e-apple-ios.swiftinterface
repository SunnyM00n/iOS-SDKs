// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.17.14 clang-1700.3.17.1)
// swift-module-flags: -target arm64e-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-upcoming-feature InternalImportsByDefault -enable-upcoming-feature MemberImportVisibility -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 333.101 -module-name PaperKit
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
public import CoreGraphics
public import Foundation
public import Observation
public import PencilKit
public import Swift
public import UIKit.UIImage
public import UIKit
public import UniformTypeIdentifiers
public import _Concurrency
public import _StringProcessing
public import _SwiftConcurrencyShims
extension UniformTypeIdentifiers.UTType {
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  public static let paperkit: UniformTypeIdentifiers.UTType
}
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
public struct PaperMarkup : Swift.Sendable, Swift.Equatable {
  public static func == (lhs: PaperKit.PaperMarkup, rhs: PaperKit.PaperMarkup) -> Swift.Bool
  public init(dataRepresentation: Foundation.Data) throws
  public init(bounds: CoreFoundation.CGRect)
  public func dataRepresentation() async throws -> Foundation.Data
  #if compiler(>=5.3) && $NonescapableTypes
  public var indexableContent: Swift.String? {
    get async
  }
  #endif
  public var bounds: CoreFoundation.CGRect {
    get
    set
  }
  public var contentsRenderFrame: CoreFoundation.CGRect {
    get
  }
  #if compiler(>=5.3) && $AsyncExecutionBehaviorAttributes
  nonisolated(nonsending) public func draw(in context: CoreGraphics.CGContext, frame: CoreFoundation.CGRect, options: PaperKit.RenderingOptions = RenderingOptions()) async
  #endif
  public mutating func append(contentsOf other: PaperKit.PaperMarkup)
  public mutating func append(contentsOf drawing: PencilKit.PKDrawing)
  public mutating func transformContent(_ transform: CoreFoundation.CGAffineTransform)
  public mutating func insertNewShape(configuration: PaperKit.ShapeConfiguration, frame: CoreFoundation.CGRect, rotation: CoreFoundation.CGFloat = 0)
  public mutating func insertNewLine(configuration: PaperKit.ShapeConfiguration, from start: CoreFoundation.CGPoint, to end: CoreFoundation.CGPoint, startMarker lineStartMarker: Swift.Bool = false, endMarker lineEndMarker: Swift.Bool = false)
  public mutating func insertNewTextbox(attributedText: Foundation.NSAttributedString, frame: CoreFoundation.CGRect, rotation: CoreFoundation.CGFloat = 0)
  public mutating func insertNewTextbox(attributedText: Foundation.AttributedString, frame: CoreFoundation.CGRect, rotation: CoreFoundation.CGFloat = 0)
  public mutating func insertNewImage(_ image: CoreGraphics.CGImage, frame: CoreFoundation.CGRect, rotation: CoreFoundation.CGFloat = 0)
  public var featureSet: PaperKit.FeatureSet {
    get
  }
  public mutating func removeContentUnsupported(by featureSet: PaperKit.FeatureSet)
}
@objc @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
@_Concurrency.MainActor @preconcurrency public class PaperMarkupViewController : UIKit.UIViewController, PencilKit.PKToolPickerObserver {
  public protocol Delegate : AnyObject {
    func paperMarkupViewControllerDidChangeMarkup(_ paperMarkupViewController: PaperKit.PaperMarkupViewController)
    func paperMarkupViewControllerDidChangeSelection(_ paperMarkupViewController: PaperKit.PaperMarkupViewController)
    func paperMarkupViewControllerDidBeginDrawing(_ paperMarkupViewController: PaperKit.PaperMarkupViewController)
    func paperMarkupViewControllerDidChangeContentVisibleFrame(_ paperMarkupViewController: PaperKit.PaperMarkupViewController)
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any PaperKit.PaperMarkupViewController.Delegate)? {
    get
    set
    _modify
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public var markup: PaperKit.PaperMarkup? {
    get
    set
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public init(markup: PaperKit.PaperMarkup? = nil, supportedFeatureSet: PaperKit.FeatureSet)
  #endif
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var undoManager: Foundation.UndoManager? {
    @objc get
  }
  #endif
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public var contentView: UIKit.UIView? {
    get
    set
    _modify
  }
  #endif
  @_Concurrency.MainActor @preconcurrency public var isEditable: Swift.Bool {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var drawingTool: any PencilKit.PKTool {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var directTouchMode: PaperKit.PaperMarkupViewController.TouchMode {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var directTouchAutomaticallyDraws: Swift.Bool {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var indirectPointerTouchMode: PaperKit.PaperMarkupViewController.TouchMode {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public func suggestedFrameForInserting(contentInFrame frame: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency public var selectedMarkup: PaperKit.PaperMarkup {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isRulerActive: Swift.Bool {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var contentVisibleFrame: CoreFoundation.CGRect {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func setContentVisibleFrame(_ rect: CoreFoundation.CGRect, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public var zoomRange: Swift.ClosedRange<CoreFoundation.CGFloat> {
    get
    set
    _modify
  }
  @_Concurrency.MainActor @preconcurrency public var supportedFeatureSet: PaperKit.FeatureSet {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc public func toolPickerSelectedToolItemDidChange(_ toolPicker: PencilKit.PKToolPicker)
  @_Concurrency.MainActor @preconcurrency @objc public func toolPickerIsRulerActiveDidChange(_ toolPicker: PencilKit.PKToolPicker)
  @objc deinit
}
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
extension PaperKit.PaperMarkupViewController : nonisolated Observation.Observable {
}
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
public struct ShapeConfiguration {
  public var type: PaperKit.ShapeConfiguration.Shape
  public var fillColor: CoreGraphics.CGColor?
  public var strokeColor: CoreGraphics.CGColor?
  public var lineWidth: CoreFoundation.CGFloat
  #if compiler(>=5.3) && $NonescapableTypes
  public init(type: PaperKit.ShapeConfiguration.Shape, fillColor: CoreGraphics.CGColor? = CGColor(srgbRed: 0, green: 0, blue: 0, alpha: 1), strokeColor: CoreGraphics.CGColor? = nil, lineWidth: CoreFoundation.CGFloat = 0)
  #endif
}
extension PaperKit.PaperMarkupViewController {
  @available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
  public enum TouchMode : Swift.Hashable, Swift.Sendable {
    case selection
    case drawing
    public static func == (a: PaperKit.PaperMarkupViewController.TouchMode, b: PaperKit.PaperMarkupViewController.TouchMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
public enum MarkupError : Swift.Error, Swift.Sendable {
  case incorrectFormat
  case malformedData
  case incompatibleFormatTooNew
  public static func == (a: PaperKit.MarkupError, b: PaperKit.MarkupError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}


@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
extension PaperKit.ShapeConfiguration {
  public enum Shape : Swift.Hashable, Swift.CaseIterable, Swift.Sendable {
    case rectangle
    case ellipse
    case line
    case chatBubble
    case roundedRectangle
    case regularPolygon
    case star
    case arrowShape
    public static func == (a: PaperKit.ShapeConfiguration.Shape, b: PaperKit.ShapeConfiguration.Shape) -> Swift.Bool
    @available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias AllCases = [PaperKit.ShapeConfiguration.Shape]
    nonisolated public static var allCases: [PaperKit.ShapeConfiguration.Shape] {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
public struct RenderingOptions : Swift.Equatable, Swift.Sendable {
  public var darkUserInterfaceStyle: Swift.Bool
  public var rightToLeftLayoutDirection: Swift.Bool
  public init(traitCollection: UIKit.UITraitCollection)
  public init(darkUserInterfaceStyle: Swift.Bool = false, layoutRightToLeft: Swift.Bool = false)
  public static func == (a: PaperKit.RenderingOptions, b: PaperKit.RenderingOptions) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @available(iOS 26.0, visionOS 26.0, *)
@_Concurrency.MainActor @preconcurrency public class MarkupEditViewController : UIKit.UIViewController {
  @available(iOS 26.0, visionOS 26.0, *)
  public protocol Delegate : AnyObject {
    func markupEditViewController(_ markupEditViewController: PaperKit.MarkupEditViewController, insertNewShape type: PaperKit.ShapeConfiguration.Shape)
    func markupEditViewControllerInsertNewTextbox(_ markupEditViewController: PaperKit.MarkupEditViewController)
    func markupEditViewController(_ markupEditViewController: PaperKit.MarkupEditViewController, insertNewLineWithStartMarker lineStartMarker: Swift.Bool, endMarker lineEndMarker: Swift.Bool)
    func markupEditViewController(_ markupEditViewController: PaperKit.MarkupEditViewController, insertNewContents toInsert: PaperKit.PaperMarkup)
  }
  @_Concurrency.MainActor @preconcurrency final public let supportedFeatureSet: PaperKit.FeatureSet
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any PaperKit.MarkupEditViewController.Delegate)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(supportedFeatureSet: PaperKit.FeatureSet, additionalActions: [UIKit.UIMenuElement] = [])
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLayoutSubviews()
  @objc deinit
}
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
public struct FeatureSet : Swift.Equatable, Swift.Sendable {
  public var contentVersion: PaperKit.FeatureSet.ContentVersion
  public var shapes: Swift.Set<PaperKit.ShapeConfiguration.Shape>
  public enum Feature : Swift.Hashable, Swift.CaseIterable, Swift.Sendable {
    case images
    case stickers
    case loupes
    case links
    case shapeFills
    case shapeStrokes
    case shapeOpacity
    case text
    case drawing
    public static func == (a: PaperKit.FeatureSet.Feature, b: PaperKit.FeatureSet.Feature) -> Swift.Bool
    @available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias AllCases = [PaperKit.FeatureSet.Feature]
    nonisolated public static var allCases: [PaperKit.FeatureSet.Feature] {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var features: Swift.Set<PaperKit.FeatureSet.Feature>
  public func contains(_ feature: PaperKit.FeatureSet.Feature) -> Swift.Bool
  public mutating func insert(_ newFeature: PaperKit.FeatureSet.Feature)
  public mutating func remove(_ feature: PaperKit.FeatureSet.Feature)
  public var inks: Swift.Set<PencilKit.PKInkingTool.InkType>
  public struct LineMarkerPositions : Swift.OptionSet, Swift.Sendable, Swift.Hashable {
    public let rawValue: Swift.Int
    public static let plain: PaperKit.FeatureSet.LineMarkerPositions
    public static let single: PaperKit.FeatureSet.LineMarkerPositions
    public static let double: PaperKit.FeatureSet.LineMarkerPositions
    public static let all: PaperKit.FeatureSet.LineMarkerPositions
    public init(rawValue: Swift.Int)
    @available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias ArrayLiteralElement = PaperKit.FeatureSet.LineMarkerPositions
    @available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias Element = PaperKit.FeatureSet.LineMarkerPositions
    @available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias RawValue = Swift.Int
  }
  public var lineMarkerPositions: PaperKit.FeatureSet.LineMarkerPositions
  public var colorMaximumLinearExposure: CoreFoundation.CGFloat
  public static var version1: PaperKit.FeatureSet {
    get
  }
  public static var latest: PaperKit.FeatureSet {
    get
  }
  public static var empty: PaperKit.FeatureSet {
    get
  }
  public func isSubset(of other: PaperKit.FeatureSet) -> Swift.Bool
  public static func == (a: PaperKit.FeatureSet, b: PaperKit.FeatureSet) -> Swift.Bool
}
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
extension PaperKit.FeatureSet {
  public enum ContentVersion : Swift.Int, Swift.Sendable {
    case version1
    public var pencilKitContentVersion: PencilKit.PKContentVersion {
      get
    }
    public static var latest: PaperKit.FeatureSet.ContentVersion {
      get
    }
    #if compiler(>=5.3) && $NonescapableTypes
    public init?(rawValue: Swift.Int)
    #endif
    @available(iOS 26.0, visionOS 26.0, macOS 26.0, *)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
extension PaperKit.MarkupError : Swift.Equatable {}
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
extension PaperKit.MarkupError : Swift.Hashable {}
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
extension PaperKit.FeatureSet.ContentVersion : Swift.Equatable {}
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
extension PaperKit.FeatureSet.ContentVersion : Swift.Hashable {}
@available(iOS 26.0, macOS 26.0, visionOS 26.0, *)
extension PaperKit.FeatureSet.ContentVersion : Swift.RawRepresentable {}
